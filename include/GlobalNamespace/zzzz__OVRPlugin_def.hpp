#pragma once
// IWYU pragma private; include "GlobalNamespace/OVRPlugin.hpp"
#include "../cordl_internals/cordl_internals.hpp"
#include "beatsaber-hook/shared/utils/typedefs.h"
CORDL_MODULE_INIT
#include "System/Runtime/InteropServices/zzzz__GCHandle_def.hpp"
#include "System/zzzz__Guid_def.hpp"
#include "System/zzzz__IDisposable_def.hpp"
#include "System/zzzz__IEquatable_1_def.hpp"
#include "System/zzzz__IntPtr_def.hpp"
#include "System/zzzz__MulticastDelegate_def.hpp"
#include "System/zzzz__Nullable_1_def.hpp"
#include "System/zzzz__Object_def.hpp"
#include "UnityEngine/zzzz__Rect_def.hpp"
#include "UnityEngine/zzzz__Vector4_def.hpp"
#include "beatsaber-hook/shared/utils/typedefs-string.hpp"
#include <cmath>
#include <cstddef>
#include <cstdint>
CORDL_MODULE_EXPORT(OVRPlugin)
namespace GlobalNamespace {
struct Media_OVRPlugin_InputVideoBufferType;
}
namespace GlobalNamespace {
struct Media_OVRPlugin_MrcActivationMode;
}
namespace GlobalNamespace {
struct Media_OVRPlugin_PlatformCameraMode;
}
namespace GlobalNamespace {
class OVRNativeBuffer;
}
namespace GlobalNamespace {
struct OVRPlugin_AppPerfFrameStats;
}
namespace GlobalNamespace {
struct OVRPlugin_AppPerfStats;
}
namespace GlobalNamespace {
struct OVRPlugin_BatteryStatus;
}
namespace GlobalNamespace {
struct OVRPlugin_BlendFactor;
}
namespace GlobalNamespace {
struct OVRPlugin_BodyJointLocation;
}
namespace GlobalNamespace {
struct OVRPlugin_BodyStateInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_BodyState;
}
namespace GlobalNamespace {
struct OVRPlugin_BoneCapsule;
}
namespace GlobalNamespace {
struct OVRPlugin_BoneId;
}
namespace GlobalNamespace {
struct OVRPlugin_Bone;
}
namespace GlobalNamespace {
struct OVRPlugin_Bool;
}
namespace GlobalNamespace {
struct OVRPlugin_BoundaryGeometry;
}
namespace GlobalNamespace {
struct OVRPlugin_BoundaryTestResult;
}
namespace GlobalNamespace {
struct OVRPlugin_BoundaryType;
}
namespace GlobalNamespace {
struct OVRPlugin_Boundsf;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraAnchorType;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraDeviceDepthQuality;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraDeviceDepthSensingMode;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraDeviceIntrinsicsParameters;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraDevice;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraExtrinsics;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraIntrinsics;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraStatus;
}
namespace GlobalNamespace {
struct OVRPlugin_ColorSpace;
}
namespace GlobalNamespace {
struct OVRPlugin_Colorf;
}
namespace GlobalNamespace {
struct OVRPlugin_ControllerState2;
}
namespace GlobalNamespace {
struct OVRPlugin_ControllerState4;
}
namespace GlobalNamespace {
struct OVRPlugin_ControllerState5;
}
namespace GlobalNamespace {
struct OVRPlugin_ControllerState6;
}
namespace GlobalNamespace {
struct OVRPlugin_ControllerState;
}
namespace GlobalNamespace {
struct OVRPlugin_Controller;
}
namespace GlobalNamespace {
struct OVRPlugin_EventDataBuffer;
}
namespace GlobalNamespace {
struct OVRPlugin_EventType;
}
namespace GlobalNamespace {
struct OVRPlugin_EyeGazeState;
}
namespace GlobalNamespace {
struct OVRPlugin_EyeGazesStateInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_EyeGazesState;
}
namespace GlobalNamespace {
struct OVRPlugin_EyeTextureFormat;
}
namespace GlobalNamespace {
struct OVRPlugin_Eye;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceConstants;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceExpressionStatusInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceExpressionStatus;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceExpression;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceRegionConfidence;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceState2Internal;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceStateInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceState;
}
namespace GlobalNamespace {
struct OVRPlugin_FeatureType;
}
namespace GlobalNamespace {
struct OVRPlugin_FixedFoveatedRenderingLevel;
}
namespace GlobalNamespace {
struct OVRPlugin_FoveatedRenderingLevel;
}
namespace GlobalNamespace {
struct OVRPlugin_Fovf;
}
namespace GlobalNamespace {
struct OVRPlugin_Frustumf2;
}
namespace GlobalNamespace {
struct OVRPlugin_Frustumf;
}
namespace GlobalNamespace {
class OVRPlugin_GUID;
}
namespace GlobalNamespace {
struct OVRPlugin_HandFingerPinch;
}
namespace GlobalNamespace {
struct OVRPlugin_HandFinger;
}
namespace GlobalNamespace {
struct OVRPlugin_HandStateInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_HandState;
}
namespace GlobalNamespace {
struct OVRPlugin_HandStatus;
}
namespace GlobalNamespace {
struct OVRPlugin_Hand;
}
namespace GlobalNamespace {
struct OVRPlugin_Handedness;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsAmplitudeEnvelopeVibration;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsBuffer;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsConstants;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsDesc;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsLocation;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsPcmVibration;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsState;
}
namespace GlobalNamespace {
struct OVRPlugin_InsightPassthroughColorMapType;
}
namespace GlobalNamespace {
struct OVRPlugin_InsightPassthroughKeyboardHandsIntensity;
}
namespace GlobalNamespace {
struct OVRPlugin_InsightPassthroughStyle2;
}
namespace GlobalNamespace {
struct OVRPlugin_InsightPassthroughStyleFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_InsightPassthroughStyle;
}
namespace GlobalNamespace {
struct OVRPlugin_InteractionProfile;
}
namespace GlobalNamespace {
struct OVRPlugin_KeyboardDescriptionConstants;
}
namespace GlobalNamespace {
struct OVRPlugin_KeyboardDescription;
}
namespace GlobalNamespace {
struct OVRPlugin_KeyboardState;
}
namespace GlobalNamespace {
class OVRPlugin_Ktx;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerDescInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerDesc;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerLayout;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerSharpenType;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerSubmit;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerSuperSamplingType;
}
namespace GlobalNamespace {
class OVRPlugin_LogCallback2DelegateType;
}
namespace GlobalNamespace {
struct OVRPlugin_LogLevel;
}
namespace GlobalNamespace {
class OVRPlugin_Media;
}
namespace GlobalNamespace {
struct OVRPlugin_MeshConstants;
}
namespace GlobalNamespace {
struct OVRPlugin_MeshType;
}
namespace GlobalNamespace {
class OVRPlugin_Mesh;
}
namespace GlobalNamespace {
struct OVRPlugin_Node;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_0_1_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_0_1_1;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_0_1_2;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_0_1_3;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_0_5_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_0_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_10_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_11_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_12_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_15_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_16_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_17_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_18_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_19_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_1_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_21_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_28_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_29_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_2_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_30_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_31_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_32_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_34_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_35_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_36_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_37_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_38_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_39_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_3_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_40_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_41_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_42_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_43_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_44_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_45_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_46_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_47_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_48_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_49_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_50_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_51_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_52_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_53_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_54_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_55_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_55_1;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_56_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_57_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_58_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_59_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_5_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_60_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_61_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_62_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_63_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_64_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_65_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_66_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_67_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_68_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_69_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_6_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_70_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_71_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_72_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_73_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_74_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_75_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_76_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_78_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_79_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_7_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_81_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_82_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_83_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_84_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_85_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_86_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_87_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_88_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_8_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_9_0;
}
namespace GlobalNamespace {
struct OVRPlugin_OverlayFlag;
}
namespace GlobalNamespace {
struct OVRPlugin_OverlayShape;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughCapabilities;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughCapabilityFields;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughCapabilityFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughColorLutChannels;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughColorLutData;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughPreferenceFields;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughPreferenceFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughPreferences;
}
namespace GlobalNamespace {
struct OVRPlugin_PerfMetrics;
}
namespace GlobalNamespace {
template <typename T> struct OVRPlugin_PinnedArray_1;
}
namespace GlobalNamespace {
struct OVRPlugin_PlatformUI;
}
namespace GlobalNamespace {
struct OVRPlugin_PolygonalBoundary2DInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_PoseStatef;
}
namespace GlobalNamespace {
struct OVRPlugin_Posef;
}
namespace GlobalNamespace {
struct OVRPlugin_ProcessorPerformanceLevel;
}
namespace GlobalNamespace {
class OVRPlugin_Qpl;
}
namespace GlobalNamespace {
struct OVRPlugin_Quatf;
}
namespace GlobalNamespace {
struct OVRPlugin_RecenterFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_Rectf;
}
namespace GlobalNamespace {
struct OVRPlugin_Recti;
}
namespace GlobalNamespace {
struct OVRPlugin_RenderModelFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_RenderModelPropertiesInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_RenderModelProperties;
}
namespace GlobalNamespace {
struct OVRPlugin_Result;
}
namespace GlobalNamespace {
struct OVRPlugin_RoomLayoutInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_RoomLayout;
}
namespace GlobalNamespace {
struct OVRPlugin_SceneCaptureRequestInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_Size3f;
}
namespace GlobalNamespace {
struct OVRPlugin_Sizef;
}
namespace GlobalNamespace {
struct OVRPlugin_Sizei;
}
namespace GlobalNamespace {
struct OVRPlugin_Skeleton2Internal;
}
namespace GlobalNamespace {
struct OVRPlugin_Skeleton2;
}
namespace GlobalNamespace {
struct OVRPlugin_SkeletonConstants;
}
namespace GlobalNamespace {
struct OVRPlugin_SkeletonType;
}
namespace GlobalNamespace {
struct OVRPlugin_Skeleton;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceComponentType;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceContainerInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceFilterInfoComponents;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceFilterInfoIds;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceLocationFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceLocationf;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceQueryActionType;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceQueryFilterType;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceQueryInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceQueryResult;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceQueryType;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceSemanticLabelInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceStorageLocation;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceStoragePersistenceMode;
}
namespace GlobalNamespace {
struct OVRPlugin_SpatialAnchorCreateInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_Step;
}
namespace GlobalNamespace {
struct OVRPlugin_SystemHeadset;
}
namespace GlobalNamespace {
struct OVRPlugin_SystemRegion;
}
namespace GlobalNamespace {
struct OVRPlugin_TextureRectMatrixf;
}
namespace GlobalNamespace {
struct OVRPlugin_TiledMultiResLevel;
}
namespace GlobalNamespace {
struct OVRPlugin_TrackedKeyboardFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_TrackedKeyboardPresentationStyles;
}
namespace GlobalNamespace {
struct OVRPlugin_TrackedKeyboardQueryFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_Tracker;
}
namespace GlobalNamespace {
struct OVRPlugin_TrackingConfidence;
}
namespace GlobalNamespace {
struct OVRPlugin_TrackingOrigin;
}
namespace GlobalNamespace {
struct OVRPlugin_TriangleMeshInternal;
}
namespace GlobalNamespace {
class OVRPlugin_UnityOpenXR;
}
namespace GlobalNamespace {
struct OVRPlugin_Vector2f;
}
namespace GlobalNamespace {
struct OVRPlugin_Vector2i;
}
namespace GlobalNamespace {
struct OVRPlugin_Vector3f;
}
namespace GlobalNamespace {
struct OVRPlugin_Vector4f;
}
namespace GlobalNamespace {
struct OVRPlugin_Vector4s;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardCreateInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardInputInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardInputSource;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardInputStateFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardLocationInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardLocationType;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardModelAnimationState;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardModelAnimationStatesInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardModelAnimationStates;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardModelVisibility;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardSpaceCreateInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardTextureData;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardTextureIdsInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardTextureIds;
}
namespace GlobalNamespace {
struct OVRPlugin_XrApi;
}
namespace GlobalNamespace {
struct Qpl_OVRPlugin_ResultType;
}
namespace System {
class AsyncCallback;
}
namespace System {
struct Guid;
}
namespace System {
class IAsyncResult;
}
namespace System {
struct IntPtr;
}
namespace System {
template <typename T> struct Nullable_1;
}
namespace System {
class Object;
}
namespace System {
class Version;
}
namespace Unity::Collections {
struct Allocator;
}
namespace Unity::Collections {
template <typename T> struct NativeArray_1;
}
namespace UnityEngine {
struct Matrix4x4;
}
namespace UnityEngine {
class RenderTexture;
}
namespace UnityEngine {
class Texture2D;
}
namespace UnityEngine {
struct Vector2;
}
namespace UnityEngine {
struct Vector3;
}
namespace UnityEngine {
struct Vector4;
}
// Forward declare root types
namespace GlobalNamespace {
struct Media_OVRPlugin_InputVideoBufferType;
}
namespace GlobalNamespace {
struct Media_OVRPlugin_MrcActivationMode;
}
namespace GlobalNamespace {
struct Media_OVRPlugin_PlatformCameraMode;
}
namespace GlobalNamespace {
struct OVRPlugin_BatteryStatus;
}
namespace GlobalNamespace {
struct OVRPlugin_BlendFactor;
}
namespace GlobalNamespace {
struct OVRPlugin_BoneId;
}
namespace GlobalNamespace {
struct OVRPlugin_Bool;
}
namespace GlobalNamespace {
struct OVRPlugin_BoundaryType;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraAnchorType;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraDevice;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraDeviceDepthQuality;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraDeviceDepthSensingMode;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraStatus;
}
namespace GlobalNamespace {
struct OVRPlugin_ColorSpace;
}
namespace GlobalNamespace {
struct OVRPlugin_Controller;
}
namespace GlobalNamespace {
struct OVRPlugin_EventType;
}
namespace GlobalNamespace {
struct OVRPlugin_Eye;
}
namespace GlobalNamespace {
struct OVRPlugin_EyeTextureFormat;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceConstants;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceExpression;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceRegionConfidence;
}
namespace GlobalNamespace {
struct OVRPlugin_FeatureType;
}
namespace GlobalNamespace {
struct OVRPlugin_FixedFoveatedRenderingLevel;
}
namespace GlobalNamespace {
struct OVRPlugin_FoveatedRenderingLevel;
}
namespace GlobalNamespace {
struct OVRPlugin_Hand;
}
namespace GlobalNamespace {
struct OVRPlugin_HandFinger;
}
namespace GlobalNamespace {
struct OVRPlugin_HandFingerPinch;
}
namespace GlobalNamespace {
struct OVRPlugin_HandStatus;
}
namespace GlobalNamespace {
struct OVRPlugin_Handedness;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsConstants;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsLocation;
}
namespace GlobalNamespace {
struct OVRPlugin_InsightPassthroughColorMapType;
}
namespace GlobalNamespace {
struct OVRPlugin_InsightPassthroughStyleFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_InteractionProfile;
}
namespace GlobalNamespace {
struct OVRPlugin_KeyboardDescriptionConstants;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerLayout;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerSharpenType;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerSuperSamplingType;
}
namespace GlobalNamespace {
struct OVRPlugin_LogLevel;
}
namespace GlobalNamespace {
struct OVRPlugin_MeshConstants;
}
namespace GlobalNamespace {
struct OVRPlugin_MeshType;
}
namespace GlobalNamespace {
struct OVRPlugin_Node;
}
namespace GlobalNamespace {
struct OVRPlugin_OverlayFlag;
}
namespace GlobalNamespace {
struct OVRPlugin_OverlayShape;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughCapabilityFields;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughCapabilityFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughColorLutChannels;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughPreferenceFields;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughPreferenceFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_PerfMetrics;
}
namespace GlobalNamespace {
struct OVRPlugin_PlatformUI;
}
namespace GlobalNamespace {
struct OVRPlugin_ProcessorPerformanceLevel;
}
namespace GlobalNamespace {
struct OVRPlugin_RecenterFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_RenderModelFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_Result;
}
namespace GlobalNamespace {
struct OVRPlugin_SkeletonConstants;
}
namespace GlobalNamespace {
struct OVRPlugin_SkeletonType;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceComponentType;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceLocationFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceQueryActionType;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceQueryFilterType;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceQueryType;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceStorageLocation;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceStoragePersistenceMode;
}
namespace GlobalNamespace {
struct OVRPlugin_Step;
}
namespace GlobalNamespace {
struct OVRPlugin_SystemHeadset;
}
namespace GlobalNamespace {
struct OVRPlugin_SystemRegion;
}
namespace GlobalNamespace {
struct OVRPlugin_TiledMultiResLevel;
}
namespace GlobalNamespace {
struct OVRPlugin_TrackedKeyboardFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_TrackedKeyboardPresentationStyles;
}
namespace GlobalNamespace {
struct OVRPlugin_TrackedKeyboardQueryFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_Tracker;
}
namespace GlobalNamespace {
struct OVRPlugin_TrackingConfidence;
}
namespace GlobalNamespace {
struct OVRPlugin_TrackingOrigin;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardInputSource;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardInputStateFlags;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardLocationType;
}
namespace GlobalNamespace {
struct OVRPlugin_XrApi;
}
namespace GlobalNamespace {
struct Qpl_OVRPlugin_ResultType;
}
namespace GlobalNamespace {
class OVRPlugin;
}
namespace GlobalNamespace {
class OVRPlugin_GUID;
}
namespace GlobalNamespace {
class OVRPlugin_Ktx;
}
namespace GlobalNamespace {
class OVRPlugin_LogCallback2DelegateType;
}
namespace GlobalNamespace {
class OVRPlugin_Media;
}
namespace GlobalNamespace {
class OVRPlugin_Mesh;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_0_1_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_0_1_1;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_0_1_2;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_0_1_3;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_0_5_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_0_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_10_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_11_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_12_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_15_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_16_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_17_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_18_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_19_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_1_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_21_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_28_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_29_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_2_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_30_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_31_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_32_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_34_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_35_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_36_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_37_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_38_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_39_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_3_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_40_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_41_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_42_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_43_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_44_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_45_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_46_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_47_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_48_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_49_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_50_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_51_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_52_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_53_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_54_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_55_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_55_1;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_56_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_57_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_58_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_59_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_5_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_60_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_61_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_62_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_63_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_64_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_65_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_66_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_67_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_68_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_69_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_6_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_70_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_71_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_72_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_73_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_74_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_75_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_76_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_78_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_79_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_7_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_81_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_82_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_83_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_84_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_85_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_86_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_87_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_88_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_8_0;
}
namespace GlobalNamespace {
class OVRPlugin_OVRP_1_9_0;
}
namespace GlobalNamespace {
class OVRPlugin_Qpl;
}
namespace GlobalNamespace {
class OVRPlugin_UnityOpenXR;
}
namespace GlobalNamespace {
struct OVRPlugin_AppPerfFrameStats;
}
namespace GlobalNamespace {
struct OVRPlugin_AppPerfStats;
}
namespace GlobalNamespace {
struct OVRPlugin_BodyJointLocation;
}
namespace GlobalNamespace {
struct OVRPlugin_BodyState;
}
namespace GlobalNamespace {
struct OVRPlugin_BodyStateInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_Bone;
}
namespace GlobalNamespace {
struct OVRPlugin_BoneCapsule;
}
namespace GlobalNamespace {
struct OVRPlugin_BoundaryGeometry;
}
namespace GlobalNamespace {
struct OVRPlugin_BoundaryTestResult;
}
namespace GlobalNamespace {
struct OVRPlugin_Boundsf;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraDeviceIntrinsicsParameters;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraExtrinsics;
}
namespace GlobalNamespace {
struct OVRPlugin_CameraIntrinsics;
}
namespace GlobalNamespace {
struct OVRPlugin_Colorf;
}
namespace GlobalNamespace {
struct OVRPlugin_ControllerState;
}
namespace GlobalNamespace {
struct OVRPlugin_ControllerState2;
}
namespace GlobalNamespace {
struct OVRPlugin_ControllerState4;
}
namespace GlobalNamespace {
struct OVRPlugin_ControllerState5;
}
namespace GlobalNamespace {
struct OVRPlugin_ControllerState6;
}
namespace GlobalNamespace {
struct OVRPlugin_EventDataBuffer;
}
namespace GlobalNamespace {
struct OVRPlugin_EyeGazeState;
}
namespace GlobalNamespace {
struct OVRPlugin_EyeGazesState;
}
namespace GlobalNamespace {
struct OVRPlugin_EyeGazesStateInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceExpressionStatus;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceExpressionStatusInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceState;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceState2Internal;
}
namespace GlobalNamespace {
struct OVRPlugin_FaceStateInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_Fovf;
}
namespace GlobalNamespace {
struct OVRPlugin_Frustumf;
}
namespace GlobalNamespace {
struct OVRPlugin_Frustumf2;
}
namespace GlobalNamespace {
struct OVRPlugin_HandState;
}
namespace GlobalNamespace {
struct OVRPlugin_HandStateInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsAmplitudeEnvelopeVibration;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsBuffer;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsDesc;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsPcmVibration;
}
namespace GlobalNamespace {
struct OVRPlugin_HapticsState;
}
namespace GlobalNamespace {
struct OVRPlugin_InsightPassthroughKeyboardHandsIntensity;
}
namespace GlobalNamespace {
struct OVRPlugin_InsightPassthroughStyle;
}
namespace GlobalNamespace {
struct OVRPlugin_InsightPassthroughStyle2;
}
namespace GlobalNamespace {
struct OVRPlugin_KeyboardDescription;
}
namespace GlobalNamespace {
struct OVRPlugin_KeyboardState;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerDesc;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerDescInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_LayerSubmit;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughCapabilities;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughColorLutData;
}
namespace GlobalNamespace {
struct OVRPlugin_PassthroughPreferences;
}
namespace GlobalNamespace {
template <typename T> struct OVRPlugin_PinnedArray_1;
}
namespace GlobalNamespace {
struct OVRPlugin_PolygonalBoundary2DInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_PoseStatef;
}
namespace GlobalNamespace {
struct OVRPlugin_Posef;
}
namespace GlobalNamespace {
struct OVRPlugin_Quatf;
}
namespace GlobalNamespace {
struct OVRPlugin_Rectf;
}
namespace GlobalNamespace {
struct OVRPlugin_Recti;
}
namespace GlobalNamespace {
struct OVRPlugin_RenderModelProperties;
}
namespace GlobalNamespace {
struct OVRPlugin_RenderModelPropertiesInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_RoomLayout;
}
namespace GlobalNamespace {
struct OVRPlugin_RoomLayoutInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_SceneCaptureRequestInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_Size3f;
}
namespace GlobalNamespace {
struct OVRPlugin_Sizef;
}
namespace GlobalNamespace {
struct OVRPlugin_Sizei;
}
namespace GlobalNamespace {
struct OVRPlugin_Skeleton;
}
namespace GlobalNamespace {
struct OVRPlugin_Skeleton2;
}
namespace GlobalNamespace {
struct OVRPlugin_Skeleton2Internal;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceContainerInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceFilterInfoComponents;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceFilterInfoIds;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceLocationf;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceQueryInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceQueryResult;
}
namespace GlobalNamespace {
struct OVRPlugin_SpaceSemanticLabelInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_SpatialAnchorCreateInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_TextureRectMatrixf;
}
namespace GlobalNamespace {
struct OVRPlugin_TriangleMeshInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_Vector2f;
}
namespace GlobalNamespace {
struct OVRPlugin_Vector2i;
}
namespace GlobalNamespace {
struct OVRPlugin_Vector3f;
}
namespace GlobalNamespace {
struct OVRPlugin_Vector4f;
}
namespace GlobalNamespace {
struct OVRPlugin_Vector4s;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardCreateInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardInputInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardLocationInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardModelAnimationState;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardModelAnimationStates;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardModelAnimationStatesInternal;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardModelVisibility;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardSpaceCreateInfo;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardTextureData;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardTextureIds;
}
namespace GlobalNamespace {
struct OVRPlugin_VirtualKeyboardTextureIdsInternal;
}
// Write type traits
MARK_VAL_T(::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType);
MARK_VAL_T(::GlobalNamespace::Media_OVRPlugin_MrcActivationMode);
MARK_VAL_T(::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_BatteryStatus);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_BlendFactor);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_BoneId);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Bool);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_BoundaryType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_CameraAnchorType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_CameraDevice);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_CameraDeviceDepthQuality);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_CameraDeviceDepthSensingMode);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_CameraStatus);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_ColorSpace);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Controller);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_EventType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Eye);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_EyeTextureFormat);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_FaceConstants);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_FaceExpression);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_FaceRegionConfidence);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_FeatureType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Hand);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HandFinger);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HandFingerPinch);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HandStatus);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Handedness);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HapticsConstants);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HapticsLocation);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_InteractionProfile);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_KeyboardDescriptionConstants);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_LayerFlags);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_LayerLayout);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_LayerSharpenType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_LayerSuperSamplingType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_LogLevel);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_MeshConstants);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_MeshType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Node);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_OverlayFlag);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_OverlayShape);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PassthroughCapabilityFields);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PassthroughColorLutChannels);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PassthroughPreferenceFields);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PassthroughPreferenceFlags);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PerfMetrics);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PlatformUI);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_RecenterFlags);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_RenderModelFlags);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Result);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SkeletonConstants);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SkeletonType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceComponentType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceLocationFlags);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceQueryActionType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceQueryFilterType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceQueryType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceStorageLocation);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceStoragePersistenceMode);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Step);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SystemHeadset);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SystemRegion);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_TiledMultiResLevel);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_TrackedKeyboardPresentationStyles);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_TrackedKeyboardQueryFlags);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Tracker);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_TrackingConfidence);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_TrackingOrigin);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardInputStateFlags);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_XrApi);
MARK_VAL_T(::GlobalNamespace::Qpl_OVRPlugin_ResultType);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_GUID);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_Ktx);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_LogCallback2DelegateType);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_Media);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_Mesh);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_0_1_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_0_1_1);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_0_1_2);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_0_1_3);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_0_5_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_0_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_10_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_11_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_12_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_15_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_16_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_17_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_18_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_19_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_1_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_21_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_28_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_29_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_2_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_30_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_31_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_32_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_34_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_35_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_36_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_37_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_38_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_39_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_3_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_40_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_41_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_42_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_43_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_44_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_45_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_46_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_47_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_48_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_49_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_50_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_51_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_52_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_53_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_54_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_55_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_55_1);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_56_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_57_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_58_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_59_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_5_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_60_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_61_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_62_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_63_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_64_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_65_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_66_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_67_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_68_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_69_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_6_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_70_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_71_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_72_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_73_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_74_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_75_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_76_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_78_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_79_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_7_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_81_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_82_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_83_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_84_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_85_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_86_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_87_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_88_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_8_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_OVRP_1_9_0);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_Qpl);
MARK_REF_PTR_T(::GlobalNamespace::OVRPlugin_UnityOpenXR);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_AppPerfFrameStats);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_AppPerfStats);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_BodyJointLocation);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_BodyState);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_BodyStateInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Bone);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_BoneCapsule);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_BoundaryGeometry);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_BoundaryTestResult);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Boundsf);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_CameraExtrinsics);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_CameraIntrinsics);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Colorf);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_ControllerState);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_ControllerState2);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_ControllerState4);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_ControllerState5);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_ControllerState6);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_EventDataBuffer);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_EyeGazeState);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_EyeGazesState);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_EyeGazesStateInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_FaceExpressionStatus);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_FaceState);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_FaceState2Internal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_FaceStateInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Fovf);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Frustumf);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Frustumf2);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HandState);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HandStateInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HapticsAmplitudeEnvelopeVibration);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HapticsBuffer);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HapticsDesc);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HapticsPcmVibration);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_HapticsState);
MARK_VAL_T(
    ::GlobalNamespace::OVRPlugin_InsightPassthroughKeyboardHandsIntensity);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_KeyboardDescription);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_KeyboardState);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_LayerDesc);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_LayerDescInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_LayerSubmit);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PassthroughCapabilities);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PassthroughColorLutData);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PassthroughPreferences);
MARK_GEN_VAL_T(::GlobalNamespace::OVRPlugin_PinnedArray_1);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PolygonalBoundary2DInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_PoseStatef);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Posef);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Quatf);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Rectf);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Recti);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_RenderModelProperties);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_RenderModelPropertiesInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_RoomLayout);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_RoomLayoutInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SceneCaptureRequestInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Size3f);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Sizef);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Sizei);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Skeleton);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Skeleton2);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Skeleton2Internal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceContainerInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceFilterInfoComponents);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceFilterInfoIds);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceLocationf);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceQueryInfo);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceQueryResult);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpaceSemanticLabelInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_SpatialAnchorCreateInfo);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_TextureRectMatrixf);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_TriangleMeshInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Vector2f);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Vector2i);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Vector3f);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Vector4f);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_Vector4s);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardCreateInfo);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardInputInfo);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationInfo);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationState);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationStates);
MARK_VAL_T(
    ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationStatesInternal);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardModelVisibility);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardSpaceCreateInfo);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureData);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIds);
MARK_VAL_T(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIdsInternal);
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/GUID
class CORDL_TYPE OVRPlugin_GUID : public ::System::Object {
public:
  // Declarations
  /// @brief Field a, offset 0x10, size 0x4
  __declspec(property(get = __cordl_internal_get_a,
                      put = __cordl_internal_set_a)) int32_t a;

  /// @brief Field b, offset 0x14, size 0x2
  __declspec(property(get = __cordl_internal_get_b,
                      put = __cordl_internal_set_b)) int16_t b;

  /// @brief Field c, offset 0x16, size 0x2
  __declspec(property(get = __cordl_internal_get_c,
                      put = __cordl_internal_set_c)) int16_t c;

  /// @brief Field d0, offset 0x18, size 0x1
  __declspec(property(get = __cordl_internal_get_d0,
                      put = __cordl_internal_set_d0)) uint8_t d0;

  /// @brief Field d1, offset 0x19, size 0x1
  __declspec(property(get = __cordl_internal_get_d1,
                      put = __cordl_internal_set_d1)) uint8_t d1;

  /// @brief Field d2, offset 0x1a, size 0x1
  __declspec(property(get = __cordl_internal_get_d2,
                      put = __cordl_internal_set_d2)) uint8_t d2;

  /// @brief Field d3, offset 0x1b, size 0x1
  __declspec(property(get = __cordl_internal_get_d3,
                      put = __cordl_internal_set_d3)) uint8_t d3;

  /// @brief Field d4, offset 0x1c, size 0x1
  __declspec(property(get = __cordl_internal_get_d4,
                      put = __cordl_internal_set_d4)) uint8_t d4;

  /// @brief Field d5, offset 0x1d, size 0x1
  __declspec(property(get = __cordl_internal_get_d5,
                      put = __cordl_internal_set_d5)) uint8_t d5;

  /// @brief Field d6, offset 0x1e, size 0x1
  __declspec(property(get = __cordl_internal_get_d6,
                      put = __cordl_internal_set_d6)) uint8_t d6;

  /// @brief Field d7, offset 0x1f, size 0x1
  __declspec(property(get = __cordl_internal_get_d7,
                      put = __cordl_internal_set_d7)) uint8_t d7;

  static inline ::GlobalNamespace::OVRPlugin_GUID *New_ctor();

  constexpr int32_t const &__cordl_internal_get_a() const;

  constexpr int32_t &__cordl_internal_get_a();

  constexpr int16_t const &__cordl_internal_get_b() const;

  constexpr int16_t &__cordl_internal_get_b();

  constexpr int16_t const &__cordl_internal_get_c() const;

  constexpr int16_t &__cordl_internal_get_c();

  constexpr uint8_t const &__cordl_internal_get_d0() const;

  constexpr uint8_t &__cordl_internal_get_d0();

  constexpr uint8_t const &__cordl_internal_get_d1() const;

  constexpr uint8_t &__cordl_internal_get_d1();

  constexpr uint8_t const &__cordl_internal_get_d2() const;

  constexpr uint8_t &__cordl_internal_get_d2();

  constexpr uint8_t const &__cordl_internal_get_d3() const;

  constexpr uint8_t &__cordl_internal_get_d3();

  constexpr uint8_t const &__cordl_internal_get_d4() const;

  constexpr uint8_t &__cordl_internal_get_d4();

  constexpr uint8_t const &__cordl_internal_get_d5() const;

  constexpr uint8_t &__cordl_internal_get_d5();

  constexpr uint8_t const &__cordl_internal_get_d6() const;

  constexpr uint8_t &__cordl_internal_get_d6();

  constexpr uint8_t const &__cordl_internal_get_d7() const;

  constexpr uint8_t &__cordl_internal_get_d7();

  constexpr void __cordl_internal_set_a(int32_t value);

  constexpr void __cordl_internal_set_b(int16_t value);

  constexpr void __cordl_internal_set_c(int16_t value);

  constexpr void __cordl_internal_set_d0(uint8_t value);

  constexpr void __cordl_internal_set_d1(uint8_t value);

  constexpr void __cordl_internal_set_d2(uint8_t value);

  constexpr void __cordl_internal_set_d3(uint8_t value);

  constexpr void __cordl_internal_set_d4(uint8_t value);

  constexpr void __cordl_internal_set_d5(uint8_t value);

  constexpr void __cordl_internal_set_d6(uint8_t value);

  constexpr void __cordl_internal_set_d7(uint8_t value);

  /// @brief Method .ctor, addr 0x3fdefd0, size 0x8, virtual false, abstract:
  /// false, final false
  inline void _ctor();

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_GUID();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_GUID", modifiers:
  // "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_GUID(OVRPlugin_GUID &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_GUID", modifiers:
  // "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_GUID(OVRPlugin_GUID const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8001};

  /// @brief Field a, offset: 0x10, size: 0x4, def value: None
  int32_t ___a;

  /// @brief Field b, offset: 0x14, size: 0x2, def value: None
  int16_t ___b;

  /// @brief Field c, offset: 0x16, size: 0x2, def value: None
  int16_t ___c;

  /// @brief Field d0, offset: 0x18, size: 0x1, def value: None
  uint8_t ___d0;

  /// @brief Field d1, offset: 0x19, size: 0x1, def value: None
  uint8_t ___d1;

  /// @brief Field d2, offset: 0x1a, size: 0x1, def value: None
  uint8_t ___d2;

  /// @brief Field d3, offset: 0x1b, size: 0x1, def value: None
  uint8_t ___d3;

  /// @brief Field d4, offset: 0x1c, size: 0x1, def value: None
  uint8_t ___d4;

  /// @brief Field d5, offset: 0x1d, size: 0x1, def value: None
  uint8_t ___d5;

  /// @brief Field d6, offset: 0x1e, size: 0x1, def value: None
  uint8_t ___d6;

  /// @brief Field d7, offset: 0x1f, size: 0x1, def value: None
  uint8_t ___d7;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_GUID, ___a) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_GUID, ___b) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_GUID, ___c) == 0x16,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_GUID, ___d0) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_GUID, ___d1) == 0x19,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_GUID, ___d2) == 0x1a,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_GUID, ___d3) == 0x1b,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_GUID, ___d4) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_GUID, ___d5) == 0x1d,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_GUID, ___d6) == 0x1e,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_GUID, ___d7) == 0x1f,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_GUID, 0x20>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Bool
struct CORDL_TYPE OVRPlugin_Bool {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_Bool_Unwrapped
  enum struct __OVRPlugin_Bool_Unwrapped : int32_t {
    __E_False = static_cast<int32_t>(0x0),
    __E_True = static_cast<int32_t>(0x1),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_Bool_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_Bool_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Bool();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Bool(int32_t value__) noexcept;

  /// @brief Field False value: I32(0)
  static ::GlobalNamespace::OVRPlugin_Bool const False;

  /// @brief Field True value: I32(1)
  static ::GlobalNamespace::OVRPlugin_Bool const True;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8002};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Bool, value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Bool, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Result
struct CORDL_TYPE OVRPlugin_Result {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_Result_Unwrapped
  enum struct __OVRPlugin_Result_Unwrapped : int32_t {
    __E_Success = static_cast<int32_t>(0x0),
    __E_Success_EventUnavailable = static_cast<int32_t>(0x1),
    __E_Success_Pending = static_cast<int32_t>(0x2),
    __E_Failure = static_cast<int32_t>(0xfffffc18),
    __E_Failure_InvalidParameter = static_cast<int32_t>(0xfffffc17),
    __E_Failure_NotInitialized = static_cast<int32_t>(0xfffffc16),
    __E_Failure_InvalidOperation = static_cast<int32_t>(0xfffffc15),
    __E_Failure_Unsupported = static_cast<int32_t>(0xfffffc14),
    __E_Failure_NotYetImplemented = static_cast<int32_t>(0xfffffc13),
    __E_Failure_OperationFailed = static_cast<int32_t>(0xfffffc12),
    __E_Failure_InsufficientSize = static_cast<int32_t>(0xfffffc11),
    __E_Failure_DataIsInvalid = static_cast<int32_t>(0xfffffc10),
    __E_Failure_DeprecatedOperation = static_cast<int32_t>(0xfffffc0f),
    __E_Failure_ErrorLimitReached = static_cast<int32_t>(0xfffffc0e),
    __E_Failure_ErrorInitializationFailed = static_cast<int32_t>(0xfffffc0d),
    __E_Failure_SpaceCloudStorageDisabled = static_cast<int32_t>(0xfffff830),
    __E_Failure_SpaceMappingInsufficient = static_cast<int32_t>(0xfffff82f),
    __E_Failure_SpaceLocalizationFailed = static_cast<int32_t>(0xfffff82e),
    __E_Failure_SpaceNetworkTimeout = static_cast<int32_t>(0xfffff82d),
    __E_Failure_SpaceNetworkRequestFailed = static_cast<int32_t>(0xfffff82c),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_Result_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_Result_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Result();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Result(int32_t value__) noexcept;

  /// @brief Field Failure value: I32(-1000)
  static ::GlobalNamespace::OVRPlugin_Result const Failure;

  /// @brief Field Failure_DataIsInvalid value: I32(-1008)
  static ::GlobalNamespace::OVRPlugin_Result const Failure_DataIsInvalid;

  /// @brief Field Failure_DeprecatedOperation value: I32(-1009)
  static ::GlobalNamespace::OVRPlugin_Result const Failure_DeprecatedOperation;

  /// @brief Field Failure_ErrorInitializationFailed value: I32(-1011)
  static ::GlobalNamespace::OVRPlugin_Result const
      Failure_ErrorInitializationFailed;

  /// @brief Field Failure_ErrorLimitReached value: I32(-1010)
  static ::GlobalNamespace::OVRPlugin_Result const Failure_ErrorLimitReached;

  /// @brief Field Failure_InsufficientSize value: I32(-1007)
  static ::GlobalNamespace::OVRPlugin_Result const Failure_InsufficientSize;

  /// @brief Field Failure_InvalidOperation value: I32(-1003)
  static ::GlobalNamespace::OVRPlugin_Result const Failure_InvalidOperation;

  /// @brief Field Failure_InvalidParameter value: I32(-1001)
  static ::GlobalNamespace::OVRPlugin_Result const Failure_InvalidParameter;

  /// @brief Field Failure_NotInitialized value: I32(-1002)
  static ::GlobalNamespace::OVRPlugin_Result const Failure_NotInitialized;

  /// @brief Field Failure_NotYetImplemented value: I32(-1005)
  static ::GlobalNamespace::OVRPlugin_Result const Failure_NotYetImplemented;

  /// @brief Field Failure_OperationFailed value: I32(-1006)
  static ::GlobalNamespace::OVRPlugin_Result const Failure_OperationFailed;

  /// @brief Field Failure_SpaceCloudStorageDisabled value: I32(-2000)
  static ::GlobalNamespace::OVRPlugin_Result const
      Failure_SpaceCloudStorageDisabled;

  /// @brief Field Failure_SpaceLocalizationFailed value: I32(-2002)
  static ::GlobalNamespace::OVRPlugin_Result const
      Failure_SpaceLocalizationFailed;

  /// @brief Field Failure_SpaceMappingInsufficient value: I32(-2001)
  static ::GlobalNamespace::OVRPlugin_Result const
      Failure_SpaceMappingInsufficient;

  /// @brief Field Failure_SpaceNetworkRequestFailed value: I32(-2004)
  static ::GlobalNamespace::OVRPlugin_Result const
      Failure_SpaceNetworkRequestFailed;

  /// @brief Field Failure_SpaceNetworkTimeout value: I32(-2003)
  static ::GlobalNamespace::OVRPlugin_Result const Failure_SpaceNetworkTimeout;

  /// @brief Field Failure_Unsupported value: I32(-1004)
  static ::GlobalNamespace::OVRPlugin_Result const Failure_Unsupported;

  /// @brief Field Success value: I32(0)
  static ::GlobalNamespace::OVRPlugin_Result const Success;

  /// @brief Field Success_EventUnavailable value: I32(1)
  static ::GlobalNamespace::OVRPlugin_Result const Success_EventUnavailable;

  /// @brief Field Success_Pending value: I32(2)
  static ::GlobalNamespace::OVRPlugin_Result const Success_Pending;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8003};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Result, value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Result, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/LogLevel
struct CORDL_TYPE OVRPlugin_LogLevel {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_LogLevel_Unwrapped
  enum struct __OVRPlugin_LogLevel_Unwrapped : int32_t {
    __E_Debug = static_cast<int32_t>(0x0),
    __E_Info = static_cast<int32_t>(0x1),
    __E_Error = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_LogLevel_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_LogLevel_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_LogLevel();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_LogLevel(int32_t value__) noexcept;

  /// @brief Field Debug value: I32(0)
  static ::GlobalNamespace::OVRPlugin_LogLevel const Debug;

  /// @brief Field Error value: I32(2)
  static ::GlobalNamespace::OVRPlugin_LogLevel const Error;

  /// @brief Field Info value: I32(1)
  static ::GlobalNamespace::OVRPlugin_LogLevel const Info;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8004};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_LogLevel, value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_LogLevel, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.MulticastDelegate
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/LogCallback2DelegateType
class CORDL_TYPE OVRPlugin_LogCallback2DelegateType
    : public ::System::MulticastDelegate {
public:
  // Declarations
  /// @brief Method BeginInvoke, addr 0x3ff3b08, size 0xe8, virtual true,
  /// abstract: false, final false
  inline ::System::IAsyncResult *
  BeginInvoke(::GlobalNamespace::OVRPlugin_LogLevel logLevel,
              ::System::IntPtr message, int32_t size,
              ::System::AsyncCallback *callback, ::System::Object *object);

  /// @brief Method EndInvoke, addr 0x3ff3bf0, size 0xc, virtual true, abstract:
  /// false, final false
  inline void EndInvoke(::System::IAsyncResult *result);

  /// @brief Method Invoke, addr 0x3ff3af4, size 0x14, virtual true, abstract:
  /// false, final false
  inline void Invoke(::GlobalNamespace::OVRPlugin_LogLevel logLevel,
                     ::System::IntPtr message, int32_t size);

  static inline ::GlobalNamespace::OVRPlugin_LogCallback2DelegateType *
  New_ctor(::System::Object *object, ::System::IntPtr method);

  /// @brief Method .ctor, addr 0x3ff3a68, size 0x8c, virtual false, abstract:
  /// false, final false
  inline void _ctor(::System::Object *object, ::System::IntPtr method);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_LogCallback2DelegateType();

public:
  // Ctor Parameters [CppParam { name: "", ty:
  // "OVRPlugin_LogCallback2DelegateType", modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_LogCallback2DelegateType(OVRPlugin_LogCallback2DelegateType &&) =
      delete;

  // Ctor Parameters [CppParam { name: "", ty:
  // "OVRPlugin_LogCallback2DelegateType", modifiers: "const&", def_value: None
  // }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_LogCallback2DelegateType(
      OVRPlugin_LogCallback2DelegateType const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8005};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_LogCallback2DelegateType, 0x80>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/CameraStatus
struct CORDL_TYPE OVRPlugin_CameraStatus {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_CameraStatus_Unwrapped
  enum struct __OVRPlugin_CameraStatus_Unwrapped : int32_t {
    __E_CameraStatus_None = static_cast<int32_t>(0x0),
    __E_CameraStatus_Connected = static_cast<int32_t>(0x1),
    __E_CameraStatus_Calibrating = static_cast<int32_t>(0x2),
    __E_CameraStatus_CalibrationFailed = static_cast<int32_t>(0x3),
    __E_CameraStatus_Calibrated = static_cast<int32_t>(0x4),
    __E_CameraStatus_ThirdPerson = static_cast<int32_t>(0x5),
    __E_CameraStatus_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_CameraStatus_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_CameraStatus_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_CameraStatus();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_CameraStatus(int32_t value__) noexcept;

  /// @brief Field CameraStatus_Calibrated value: I32(4)
  static ::GlobalNamespace::OVRPlugin_CameraStatus const
      CameraStatus_Calibrated;

  /// @brief Field CameraStatus_Calibrating value: I32(2)
  static ::GlobalNamespace::OVRPlugin_CameraStatus const
      CameraStatus_Calibrating;

  /// @brief Field CameraStatus_CalibrationFailed value: I32(3)
  static ::GlobalNamespace::OVRPlugin_CameraStatus const
      CameraStatus_CalibrationFailed;

  /// @brief Field CameraStatus_Connected value: I32(1)
  static ::GlobalNamespace::OVRPlugin_CameraStatus const CameraStatus_Connected;

  /// @brief Field CameraStatus_EnumSize value: I32(2147483647)
  static ::GlobalNamespace::OVRPlugin_CameraStatus const CameraStatus_EnumSize;

  /// @brief Field CameraStatus_None value: I32(0)
  static ::GlobalNamespace::OVRPlugin_CameraStatus const CameraStatus_None;

  /// @brief Field CameraStatus_ThirdPerson value: I32(5)
  static ::GlobalNamespace::OVRPlugin_CameraStatus const
      CameraStatus_ThirdPerson;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8006};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraStatus, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_CameraStatus, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/CameraAnchorType
struct CORDL_TYPE OVRPlugin_CameraAnchorType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_CameraAnchorType_Unwrapped
  enum struct __OVRPlugin_CameraAnchorType_Unwrapped : int32_t {
    __E_CameraAnchorType_PreDefined = static_cast<int32_t>(0x0),
    __E_CameraAnchorType_Custom = static_cast<int32_t>(0x1),
    __E_CameraAnchorType_Count = static_cast<int32_t>(0x2),
    __E_CameraAnchorType_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_CameraAnchorType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_CameraAnchorType_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_CameraAnchorType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_CameraAnchorType(int32_t value__) noexcept;

  /// @brief Field CameraAnchorType_Count value: I32(2)
  static ::GlobalNamespace::OVRPlugin_CameraAnchorType const
      CameraAnchorType_Count;

  /// @brief Field CameraAnchorType_Custom value: I32(1)
  static ::GlobalNamespace::OVRPlugin_CameraAnchorType const
      CameraAnchorType_Custom;

  /// @brief Field CameraAnchorType_EnumSize value: I32(2147483647)
  static ::GlobalNamespace::OVRPlugin_CameraAnchorType const
      CameraAnchorType_EnumSize;

  /// @brief Field CameraAnchorType_PreDefined value: I32(0)
  static ::GlobalNamespace::OVRPlugin_CameraAnchorType const
      CameraAnchorType_PreDefined;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8007};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraAnchorType,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_CameraAnchorType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/XrApi
struct CORDL_TYPE OVRPlugin_XrApi {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_XrApi_Unwrapped
  enum struct __OVRPlugin_XrApi_Unwrapped : int32_t {
    __E_Unknown = static_cast<int32_t>(0x0),
    __E_CAPI = static_cast<int32_t>(0x1),
    __E_VRAPI = static_cast<int32_t>(0x2),
    __E_OpenXR = static_cast<int32_t>(0x3),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_XrApi_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_XrApi_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_XrApi();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_XrApi(int32_t value__) noexcept;

  /// @brief Field CAPI value: I32(1)
  static ::GlobalNamespace::OVRPlugin_XrApi const CAPI;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::OVRPlugin_XrApi const EnumSize;

  /// @brief Field OpenXR value: I32(3)
  static ::GlobalNamespace::OVRPlugin_XrApi const OpenXR;

  /// @brief Field Unknown value: I32(0)
  static ::GlobalNamespace::OVRPlugin_XrApi const Unknown;

  /// @brief Field VRAPI value: I32(2)
  static ::GlobalNamespace::OVRPlugin_XrApi const VRAPI;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8008};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_XrApi, value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_XrApi, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Eye
struct CORDL_TYPE OVRPlugin_Eye {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_Eye_Unwrapped
  enum struct __OVRPlugin_Eye_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0xffffffff),
    __E_Left = static_cast<int32_t>(0x0),
    __E_Right = static_cast<int32_t>(0x1),
    __E_Count = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_Eye_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_Eye_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Eye();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Eye(int32_t value__) noexcept;

  /// @brief Field Count value: I32(2)
  static ::GlobalNamespace::OVRPlugin_Eye const Count;

  /// @brief Field Left value: I32(0)
  static ::GlobalNamespace::OVRPlugin_Eye const Left;

  /// @brief Field None value: I32(-1)
  static ::GlobalNamespace::OVRPlugin_Eye const None;

  /// @brief Field Right value: I32(1)
  static ::GlobalNamespace::OVRPlugin_Eye const Right;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8009};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Eye, value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Eye, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Tracker
struct CORDL_TYPE OVRPlugin_Tracker {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_Tracker_Unwrapped
  enum struct __OVRPlugin_Tracker_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0xffffffff),
    __E_Zero = static_cast<int32_t>(0x0),
    __E_One = static_cast<int32_t>(0x1),
    __E_Two = static_cast<int32_t>(0x2),
    __E_Three = static_cast<int32_t>(0x3),
    __E_Count = static_cast<int32_t>(0x4),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_Tracker_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_Tracker_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Tracker();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Tracker(int32_t value__) noexcept;

  /// @brief Field Count value: I32(4)
  static ::GlobalNamespace::OVRPlugin_Tracker const Count;

  /// @brief Field None value: I32(-1)
  static ::GlobalNamespace::OVRPlugin_Tracker const None;

  /// @brief Field One value: I32(1)
  static ::GlobalNamespace::OVRPlugin_Tracker const One;

  /// @brief Field Three value: I32(3)
  static ::GlobalNamespace::OVRPlugin_Tracker const Three;

  /// @brief Field Two value: I32(2)
  static ::GlobalNamespace::OVRPlugin_Tracker const Two;

  /// @brief Field Zero value: I32(0)
  static ::GlobalNamespace::OVRPlugin_Tracker const Zero;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8010};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Tracker, value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Tracker, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Node
struct CORDL_TYPE OVRPlugin_Node {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_Node_Unwrapped
  enum struct __OVRPlugin_Node_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0xffffffff),
    __E_EyeLeft = static_cast<int32_t>(0x0),
    __E_EyeRight = static_cast<int32_t>(0x1),
    __E_EyeCenter = static_cast<int32_t>(0x2),
    __E_HandLeft = static_cast<int32_t>(0x3),
    __E_HandRight = static_cast<int32_t>(0x4),
    __E_TrackerZero = static_cast<int32_t>(0x5),
    __E_TrackerOne = static_cast<int32_t>(0x6),
    __E_TrackerTwo = static_cast<int32_t>(0x7),
    __E_TrackerThree = static_cast<int32_t>(0x8),
    __E_Head = static_cast<int32_t>(0x9),
    __E_DeviceObjectZero = static_cast<int32_t>(0xa),
    __E_TrackedKeyboard = static_cast<int32_t>(0xb),
    __E_ControllerLeft = static_cast<int32_t>(0xc),
    __E_ControllerRight = static_cast<int32_t>(0xd),
    __E_Count = static_cast<int32_t>(0xe),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_Node_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_Node_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Node();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Node(int32_t value__) noexcept;

  /// @brief Field ControllerLeft value: I32(12)
  static ::GlobalNamespace::OVRPlugin_Node const ControllerLeft;

  /// @brief Field ControllerRight value: I32(13)
  static ::GlobalNamespace::OVRPlugin_Node const ControllerRight;

  /// @brief Field Count value: I32(14)
  static ::GlobalNamespace::OVRPlugin_Node const Count;

  /// @brief Field DeviceObjectZero value: I32(10)
  static ::GlobalNamespace::OVRPlugin_Node const DeviceObjectZero;

  /// @brief Field EyeCenter value: I32(2)
  static ::GlobalNamespace::OVRPlugin_Node const EyeCenter;

  /// @brief Field EyeLeft value: I32(0)
  static ::GlobalNamespace::OVRPlugin_Node const EyeLeft;

  /// @brief Field EyeRight value: I32(1)
  static ::GlobalNamespace::OVRPlugin_Node const EyeRight;

  /// @brief Field HandLeft value: I32(3)
  static ::GlobalNamespace::OVRPlugin_Node const HandLeft;

  /// @brief Field HandRight value: I32(4)
  static ::GlobalNamespace::OVRPlugin_Node const HandRight;

  /// @brief Field Head value: I32(9)
  static ::GlobalNamespace::OVRPlugin_Node const Head;

  /// @brief Field None value: I32(-1)
  static ::GlobalNamespace::OVRPlugin_Node const None;

  /// @brief Field TrackedKeyboard value: I32(11)
  static ::GlobalNamespace::OVRPlugin_Node const TrackedKeyboard;

  /// @brief Field TrackerOne value: I32(6)
  static ::GlobalNamespace::OVRPlugin_Node const TrackerOne;

  /// @brief Field TrackerThree value: I32(8)
  static ::GlobalNamespace::OVRPlugin_Node const TrackerThree;

  /// @brief Field TrackerTwo value: I32(7)
  static ::GlobalNamespace::OVRPlugin_Node const TrackerTwo;

  /// @brief Field TrackerZero value: I32(5)
  static ::GlobalNamespace::OVRPlugin_Node const TrackerZero;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8011};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Node, value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Node, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Controller
struct CORDL_TYPE OVRPlugin_Controller {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_Controller_Unwrapped
  enum struct __OVRPlugin_Controller_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0x0),
    __E_LTouch = static_cast<int32_t>(0x1),
    __E_RTouch = static_cast<int32_t>(0x2),
    __E_Touch = static_cast<int32_t>(0x3),
    __E_Remote = static_cast<int32_t>(0x4),
    __E_Gamepad = static_cast<int32_t>(0x10),
    __E_LHand = static_cast<int32_t>(0x20),
    __E_RHand = static_cast<int32_t>(0x40),
    __E_Hands = static_cast<int32_t>(0x60),
    __E_Active = static_cast<int32_t>(0x80000000),
    __E_All = static_cast<int32_t>(0xffffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_Controller_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_Controller_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Controller();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Controller(int32_t value__) noexcept;

  /// @brief Field Active value: I32(-2147483648)
  static ::GlobalNamespace::OVRPlugin_Controller const Active;

  /// @brief Field All value: I32(-1)
  static ::GlobalNamespace::OVRPlugin_Controller const All;

  /// @brief Field Gamepad value: I32(16)
  static ::GlobalNamespace::OVRPlugin_Controller const Gamepad;

  /// @brief Field Hands value: I32(96)
  static ::GlobalNamespace::OVRPlugin_Controller const Hands;

  /// @brief Field LHand value: I32(32)
  static ::GlobalNamespace::OVRPlugin_Controller const LHand;

  /// @brief Field LTouch value: I32(1)
  static ::GlobalNamespace::OVRPlugin_Controller const LTouch;

  /// @brief Field None value: I32(0)
  static ::GlobalNamespace::OVRPlugin_Controller const None;

  /// @brief Field RHand value: I32(64)
  static ::GlobalNamespace::OVRPlugin_Controller const RHand;

  /// @brief Field RTouch value: I32(2)
  static ::GlobalNamespace::OVRPlugin_Controller const RTouch;

  /// @brief Field Remote value: I32(4)
  static ::GlobalNamespace::OVRPlugin_Controller const Remote;

  /// @brief Field Touch value: I32(3)
  static ::GlobalNamespace::OVRPlugin_Controller const Touch;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8012};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Controller, value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_Controller, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/InteractionProfile
struct CORDL_TYPE OVRPlugin_InteractionProfile {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_InteractionProfile_Unwrapped
  enum struct __OVRPlugin_InteractionProfile_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0x0),
    __E_Touch = static_cast<int32_t>(0x1),
    __E_TouchPro = static_cast<int32_t>(0x2),
    __E_TouchPlus = static_cast<int32_t>(0x4),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_InteractionProfile_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_InteractionProfile_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_InteractionProfile();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_InteractionProfile(int32_t value__) noexcept;

  /// @brief Field None value: I32(0)
  static ::GlobalNamespace::OVRPlugin_InteractionProfile const None;

  /// @brief Field Touch value: I32(1)
  static ::GlobalNamespace::OVRPlugin_InteractionProfile const Touch;

  /// @brief Field TouchPlus value: I32(4)
  static ::GlobalNamespace::OVRPlugin_InteractionProfile const TouchPlus;

  /// @brief Field TouchPro value: I32(2)
  static ::GlobalNamespace::OVRPlugin_InteractionProfile const TouchPro;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8013};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_InteractionProfile,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_InteractionProfile, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Handedness
struct CORDL_TYPE OVRPlugin_Handedness {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_Handedness_Unwrapped
  enum struct __OVRPlugin_Handedness_Unwrapped : int32_t {
    __E_Unsupported = static_cast<int32_t>(0x0),
    __E_LeftHanded = static_cast<int32_t>(0x1),
    __E_RightHanded = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_Handedness_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_Handedness_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Handedness();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Handedness(int32_t value__) noexcept;

  /// @brief Field LeftHanded value: I32(1)
  static ::GlobalNamespace::OVRPlugin_Handedness const LeftHanded;

  /// @brief Field RightHanded value: I32(2)
  static ::GlobalNamespace::OVRPlugin_Handedness const RightHanded;

  /// @brief Field Unsupported value: I32(0)
  static ::GlobalNamespace::OVRPlugin_Handedness const Unsupported;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8014};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Handedness, value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_Handedness, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/TrackingOrigin
struct CORDL_TYPE OVRPlugin_TrackingOrigin {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_TrackingOrigin_Unwrapped
  enum struct __OVRPlugin_TrackingOrigin_Unwrapped : int32_t {
    __E_EyeLevel = static_cast<int32_t>(0x0),
    __E_FloorLevel = static_cast<int32_t>(0x1),
    __E_Stage = static_cast<int32_t>(0x2),
    __E_View = static_cast<int32_t>(0x4),
    __E_Count = static_cast<int32_t>(0x5),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_TrackingOrigin_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_TrackingOrigin_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_TrackingOrigin();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_TrackingOrigin(int32_t value__) noexcept;

  /// @brief Field Count value: I32(5)
  static ::GlobalNamespace::OVRPlugin_TrackingOrigin const Count;

  /// @brief Field EyeLevel value: I32(0)
  static ::GlobalNamespace::OVRPlugin_TrackingOrigin const EyeLevel;

  /// @brief Field FloorLevel value: I32(1)
  static ::GlobalNamespace::OVRPlugin_TrackingOrigin const FloorLevel;

  /// @brief Field Stage value: I32(2)
  static ::GlobalNamespace::OVRPlugin_TrackingOrigin const Stage;

  /// @brief Field View value: I32(4)
  static ::GlobalNamespace::OVRPlugin_TrackingOrigin const View;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8015};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_TrackingOrigin, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_TrackingOrigin, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/RecenterFlags
struct CORDL_TYPE OVRPlugin_RecenterFlags {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_RecenterFlags_Unwrapped
  enum struct __OVRPlugin_RecenterFlags_Unwrapped : int32_t {
    __E_Default = static_cast<int32_t>(0x0),
    __E_IgnoreAll = static_cast<int32_t>(0x80000000),
    __E_Count = static_cast<int32_t>(0x80000001),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_RecenterFlags_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_RecenterFlags_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_RecenterFlags();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_RecenterFlags(int32_t value__) noexcept;

  /// @brief Field Count value: I32(-2147483647)
  static ::GlobalNamespace::OVRPlugin_RecenterFlags const Count;

  /// @brief Field Default value: I32(0)
  static ::GlobalNamespace::OVRPlugin_RecenterFlags const Default;

  /// @brief Field IgnoreAll value: I32(-2147483648)
  static ::GlobalNamespace::OVRPlugin_RecenterFlags const IgnoreAll;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8016};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_RecenterFlags, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_RecenterFlags, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/BatteryStatus
struct CORDL_TYPE OVRPlugin_BatteryStatus {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_BatteryStatus_Unwrapped
  enum struct __OVRPlugin_BatteryStatus_Unwrapped : int32_t {
    __E_Charging = static_cast<int32_t>(0x0),
    __E_Discharging = static_cast<int32_t>(0x1),
    __E_Full = static_cast<int32_t>(0x2),
    __E_NotCharging = static_cast<int32_t>(0x3),
    __E_Unknown = static_cast<int32_t>(0x4),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_BatteryStatus_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_BatteryStatus_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_BatteryStatus();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_BatteryStatus(int32_t value__) noexcept;

  /// @brief Field Charging value: I32(0)
  static ::GlobalNamespace::OVRPlugin_BatteryStatus const Charging;

  /// @brief Field Discharging value: I32(1)
  static ::GlobalNamespace::OVRPlugin_BatteryStatus const Discharging;

  /// @brief Field Full value: I32(2)
  static ::GlobalNamespace::OVRPlugin_BatteryStatus const Full;

  /// @brief Field NotCharging value: I32(3)
  static ::GlobalNamespace::OVRPlugin_BatteryStatus const NotCharging;

  /// @brief Field Unknown value: I32(4)
  static ::GlobalNamespace::OVRPlugin_BatteryStatus const Unknown;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8017};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_BatteryStatus, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_BatteryStatus, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/EyeTextureFormat
struct CORDL_TYPE OVRPlugin_EyeTextureFormat {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_EyeTextureFormat_Unwrapped
  enum struct __OVRPlugin_EyeTextureFormat_Unwrapped : int32_t {
    __E_Default = static_cast<int32_t>(0x0),
    __E_R8G8B8A8_sRGB = static_cast<int32_t>(0x0),
    __E_R8G8B8A8 = static_cast<int32_t>(0x1),
    __E_R16G16B16A16_FP = static_cast<int32_t>(0x2),
    __E_R11G11B10_FP = static_cast<int32_t>(0x3),
    __E_B8G8R8A8_sRGB = static_cast<int32_t>(0x4),
    __E_B8G8R8A8 = static_cast<int32_t>(0x5),
    __E_R5G6B5 = static_cast<int32_t>(0xb),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_EyeTextureFormat_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_EyeTextureFormat_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_EyeTextureFormat();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_EyeTextureFormat(int32_t value__) noexcept;

  /// @brief Field B8G8R8A8 value: I32(5)
  static ::GlobalNamespace::OVRPlugin_EyeTextureFormat const B8G8R8A8;

  /// @brief Field B8G8R8A8_sRGB value: I32(4)
  static ::GlobalNamespace::OVRPlugin_EyeTextureFormat const B8G8R8A8_sRGB;

  /// @brief Field Default value: I32(0)
  static ::GlobalNamespace::OVRPlugin_EyeTextureFormat const Default;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::OVRPlugin_EyeTextureFormat const EnumSize;

  /// @brief Field R11G11B10_FP value: I32(3)
  static ::GlobalNamespace::OVRPlugin_EyeTextureFormat const R11G11B10_FP;

  /// @brief Field R16G16B16A16_FP value: I32(2)
  static ::GlobalNamespace::OVRPlugin_EyeTextureFormat const R16G16B16A16_FP;

  /// @brief Field R5G6B5 value: I32(11)
  static ::GlobalNamespace::OVRPlugin_EyeTextureFormat const R5G6B5;

  /// @brief Field R8G8B8A8 value: I32(1)
  static ::GlobalNamespace::OVRPlugin_EyeTextureFormat const R8G8B8A8;

  /// @brief Field R8G8B8A8_sRGB value: I32(0)
  static ::GlobalNamespace::OVRPlugin_EyeTextureFormat const R8G8B8A8_sRGB;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8018};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_EyeTextureFormat,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_EyeTextureFormat, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PlatformUI
struct CORDL_TYPE OVRPlugin_PlatformUI {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_PlatformUI_Unwrapped
  enum struct __OVRPlugin_PlatformUI_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0xffffffff),
    __E_ConfirmQuit = static_cast<int32_t>(0x1),
    __E_GlobalMenuTutorial = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_PlatformUI_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_PlatformUI_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PlatformUI();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_PlatformUI(int32_t value__) noexcept;

  /// @brief Field ConfirmQuit value: I32(1)
  static ::GlobalNamespace::OVRPlugin_PlatformUI const ConfirmQuit;

  /// @brief Field GlobalMenuTutorial value: I32(2)
  static ::GlobalNamespace::OVRPlugin_PlatformUI const GlobalMenuTutorial;

  /// @brief Field None value: I32(-1)
  static ::GlobalNamespace::OVRPlugin_PlatformUI const None;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8019};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PlatformUI, value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_PlatformUI, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SystemRegion
struct CORDL_TYPE OVRPlugin_SystemRegion {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_SystemRegion_Unwrapped
  enum struct __OVRPlugin_SystemRegion_Unwrapped : int32_t {
    __E_Unspecified = static_cast<int32_t>(0x0),
    __E_Japan = static_cast<int32_t>(0x1),
    __E_China = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_SystemRegion_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_SystemRegion_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SystemRegion();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SystemRegion(int32_t value__) noexcept;

  /// @brief Field China value: I32(2)
  static ::GlobalNamespace::OVRPlugin_SystemRegion const China;

  /// @brief Field Japan value: I32(1)
  static ::GlobalNamespace::OVRPlugin_SystemRegion const Japan;

  /// @brief Field Unspecified value: I32(0)
  static ::GlobalNamespace::OVRPlugin_SystemRegion const Unspecified;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8020};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SystemRegion, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SystemRegion, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SystemHeadset
struct CORDL_TYPE OVRPlugin_SystemHeadset {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_SystemHeadset_Unwrapped
  enum struct __OVRPlugin_SystemHeadset_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0x0),
    __E_Oculus_Quest = static_cast<int32_t>(0x8),
    __E_Oculus_Quest_2 = static_cast<int32_t>(0x9),
    __E_Meta_Quest_Pro = static_cast<int32_t>(0xa),
    __E_Meta_Quest_3 = static_cast<int32_t>(0xb),
    __E_Placeholder_12 = static_cast<int32_t>(0xc),
    __E_Placeholder_13 = static_cast<int32_t>(0xd),
    __E_Placeholder_14 = static_cast<int32_t>(0xe),
    __E_Rift_DK1 = static_cast<int32_t>(0x1000),
    __E_Rift_DK2 = static_cast<int32_t>(0x1001),
    __E_Rift_CV1 = static_cast<int32_t>(0x1002),
    __E_Rift_CB = static_cast<int32_t>(0x1003),
    __E_Rift_S = static_cast<int32_t>(0x1004),
    __E_Oculus_Link_Quest = static_cast<int32_t>(0x1005),
    __E_Oculus_Link_Quest_2 = static_cast<int32_t>(0x1006),
    __E_Meta_Link_Quest_Pro = static_cast<int32_t>(0x1007),
    __E_Meta_Link_Quest_3 = static_cast<int32_t>(0x1008),
    __E_PC_Placeholder_4105 = static_cast<int32_t>(0x1009),
    __E_PC_Placeholder_4106 = static_cast<int32_t>(0x100a),
    __E_PC_Placeholder_4107 = static_cast<int32_t>(0x100b),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_SystemHeadset_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_SystemHeadset_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SystemHeadset();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SystemHeadset(int32_t value__) noexcept;

  /// @brief Field Meta_Link_Quest_3 value: I32(4104)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Meta_Link_Quest_3;

  /// @brief Field Meta_Link_Quest_Pro value: I32(4103)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Meta_Link_Quest_Pro;

  /// @brief Field Meta_Quest_3 value: I32(11)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Meta_Quest_3;

  /// @brief Field Meta_Quest_Pro value: I32(10)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Meta_Quest_Pro;

  /// @brief Field None value: I32(0)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const None;

  /// @brief Field Oculus_Link_Quest value: I32(4101)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Oculus_Link_Quest;

  /// @brief Field Oculus_Link_Quest_2 value: I32(4102)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Oculus_Link_Quest_2;

  /// @brief Field Oculus_Quest value: I32(8)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Oculus_Quest;

  /// @brief Field Oculus_Quest_2 value: I32(9)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Oculus_Quest_2;

  /// @brief Field PC_Placeholder_4105 value: I32(4105)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const PC_Placeholder_4105;

  /// @brief Field PC_Placeholder_4106 value: I32(4106)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const PC_Placeholder_4106;

  /// @brief Field PC_Placeholder_4107 value: I32(4107)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const PC_Placeholder_4107;

  /// @brief Field Placeholder_12 value: I32(12)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Placeholder_12;

  /// @brief Field Placeholder_13 value: I32(13)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Placeholder_13;

  /// @brief Field Placeholder_14 value: I32(14)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Placeholder_14;

  /// @brief Field Rift_CB value: I32(4099)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Rift_CB;

  /// @brief Field Rift_CV1 value: I32(4098)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Rift_CV1;

  /// @brief Field Rift_DK1 value: I32(4096)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Rift_DK1;

  /// @brief Field Rift_DK2 value: I32(4097)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Rift_DK2;

  /// @brief Field Rift_S value: I32(4100)
  static ::GlobalNamespace::OVRPlugin_SystemHeadset const Rift_S;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8021};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SystemHeadset, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SystemHeadset, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/OverlayShape
struct CORDL_TYPE OVRPlugin_OverlayShape {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_OverlayShape_Unwrapped
  enum struct __OVRPlugin_OverlayShape_Unwrapped : int32_t {
    __E_Quad = static_cast<int32_t>(0x0),
    __E_Cylinder = static_cast<int32_t>(0x1),
    __E_Cubemap = static_cast<int32_t>(0x2),
    __E_OffcenterCubemap = static_cast<int32_t>(0x4),
    __E_Equirect = static_cast<int32_t>(0x5),
    __E_ReconstructionPassthrough = static_cast<int32_t>(0x7),
    __E_SurfaceProjectedPassthrough = static_cast<int32_t>(0x8),
    __E_Fisheye = static_cast<int32_t>(0x9),
    __E_KeyboardHandsPassthrough = static_cast<int32_t>(0xa),
    __E_KeyboardMaskedHandsPassthrough = static_cast<int32_t>(0xb),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_OverlayShape_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_OverlayShape_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OverlayShape();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_OverlayShape(int32_t value__) noexcept;

  /// @brief Field Cubemap value: I32(2)
  static ::GlobalNamespace::OVRPlugin_OverlayShape const Cubemap;

  /// @brief Field Cylinder value: I32(1)
  static ::GlobalNamespace::OVRPlugin_OverlayShape const Cylinder;

  /// @brief Field Equirect value: I32(5)
  static ::GlobalNamespace::OVRPlugin_OverlayShape const Equirect;

  /// @brief Field Fisheye value: I32(9)
  static ::GlobalNamespace::OVRPlugin_OverlayShape const Fisheye;

  /// @brief Field KeyboardHandsPassthrough value: I32(10)
  static ::GlobalNamespace::OVRPlugin_OverlayShape const
      KeyboardHandsPassthrough;

  /// @brief Field KeyboardMaskedHandsPassthrough value: I32(11)
  static ::GlobalNamespace::OVRPlugin_OverlayShape const
      KeyboardMaskedHandsPassthrough;

  /// @brief Field OffcenterCubemap value: I32(4)
  static ::GlobalNamespace::OVRPlugin_OverlayShape const OffcenterCubemap;

  /// @brief Field Quad value: I32(0)
  static ::GlobalNamespace::OVRPlugin_OverlayShape const Quad;

  /// @brief Field ReconstructionPassthrough value: I32(7)
  static ::GlobalNamespace::OVRPlugin_OverlayShape const
      ReconstructionPassthrough;

  /// @brief Field SurfaceProjectedPassthrough value: I32(8)
  static ::GlobalNamespace::OVRPlugin_OverlayShape const
      SurfaceProjectedPassthrough;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8022};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_OverlayShape, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OverlayShape, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/LayerSuperSamplingType
struct CORDL_TYPE OVRPlugin_LayerSuperSamplingType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_LayerSuperSamplingType_Unwrapped
  enum struct __OVRPlugin_LayerSuperSamplingType_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0x0),
    __E_Normal = static_cast<int32_t>(0x1000),
    __E_Quality = static_cast<int32_t>(0x100),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_LayerSuperSamplingType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_LayerSuperSamplingType_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_LayerSuperSamplingType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_LayerSuperSamplingType(int32_t value__) noexcept;

  /// @brief Field None value: I32(0)
  static ::GlobalNamespace::OVRPlugin_LayerSuperSamplingType const None;

  /// @brief Field Normal value: I32(4096)
  static ::GlobalNamespace::OVRPlugin_LayerSuperSamplingType const Normal;

  /// @brief Field Quality value: I32(256)
  static ::GlobalNamespace::OVRPlugin_LayerSuperSamplingType const Quality;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8023};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerSuperSamplingType,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_LayerSuperSamplingType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/LayerSharpenType
struct CORDL_TYPE OVRPlugin_LayerSharpenType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_LayerSharpenType_Unwrapped
  enum struct __OVRPlugin_LayerSharpenType_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0x0),
    __E_Normal = static_cast<int32_t>(0x2000),
    __E_Quality = static_cast<int32_t>(0x10000),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_LayerSharpenType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_LayerSharpenType_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_LayerSharpenType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_LayerSharpenType(int32_t value__) noexcept;

  /// @brief Field None value: I32(0)
  static ::GlobalNamespace::OVRPlugin_LayerSharpenType const None;

  /// @brief Field Normal value: I32(8192)
  static ::GlobalNamespace::OVRPlugin_LayerSharpenType const Normal;

  /// @brief Field Quality value: I32(65536)
  static ::GlobalNamespace::OVRPlugin_LayerSharpenType const Quality;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8024};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerSharpenType,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_LayerSharpenType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Step
struct CORDL_TYPE OVRPlugin_Step {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_Step_Unwrapped
  enum struct __OVRPlugin_Step_Unwrapped : int32_t {
    __E_Render = static_cast<int32_t>(0xffffffff),
    __E_Physics = static_cast<int32_t>(0x0),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_Step_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_Step_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Step();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Step(int32_t value__) noexcept;

  /// @brief Field Physics value: I32(0)
  static ::GlobalNamespace::OVRPlugin_Step const Physics;

  /// @brief Field Render value: I32(-1)
  static ::GlobalNamespace::OVRPlugin_Step const Render;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8025};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Step, value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Step, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/CameraDevice
struct CORDL_TYPE OVRPlugin_CameraDevice {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_CameraDevice_Unwrapped
  enum struct __OVRPlugin_CameraDevice_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0x0),
    __E_WebCamera0 = static_cast<int32_t>(0x64),
    __E_WebCamera1 = static_cast<int32_t>(0x65),
    __E_ZEDCamera = static_cast<int32_t>(0x12c),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_CameraDevice_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_CameraDevice_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_CameraDevice();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_CameraDevice(int32_t value__) noexcept;

  /// @brief Field None value: I32(0)
  static ::GlobalNamespace::OVRPlugin_CameraDevice const None;

  /// @brief Field WebCamera0 value: I32(100)
  static ::GlobalNamespace::OVRPlugin_CameraDevice const WebCamera0;

  /// @brief Field WebCamera1 value: I32(101)
  static ::GlobalNamespace::OVRPlugin_CameraDevice const WebCamera1;

  /// @brief Field ZEDCamera value: I32(300)
  static ::GlobalNamespace::OVRPlugin_CameraDevice const ZEDCamera;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8026};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraDevice, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_CameraDevice, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/CameraDeviceDepthSensingMode
struct CORDL_TYPE OVRPlugin_CameraDeviceDepthSensingMode {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_CameraDeviceDepthSensingMode_Unwrapped
  enum struct __OVRPlugin_CameraDeviceDepthSensingMode_Unwrapped : int32_t {
    __E_Standard = static_cast<int32_t>(0x0),
    __E_Fill = static_cast<int32_t>(0x1),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_CameraDeviceDepthSensingMode_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_CameraDeviceDepthSensingMode_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_CameraDeviceDepthSensingMode();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_CameraDeviceDepthSensingMode(int32_t value__) noexcept;

  /// @brief Field Fill value: I32(1)
  static ::GlobalNamespace::OVRPlugin_CameraDeviceDepthSensingMode const Fill;

  /// @brief Field Standard value: I32(0)
  static ::GlobalNamespace::OVRPlugin_CameraDeviceDepthSensingMode const
      Standard;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8027};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceDepthSensingMode,
             value__) == 0x0,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_CameraDeviceDepthSensingMode, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/CameraDeviceDepthQuality
struct CORDL_TYPE OVRPlugin_CameraDeviceDepthQuality {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_CameraDeviceDepthQuality_Unwrapped
  enum struct __OVRPlugin_CameraDeviceDepthQuality_Unwrapped : int32_t {
    __E_Low = static_cast<int32_t>(0x0),
    __E_Medium = static_cast<int32_t>(0x1),
    __E_High = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_CameraDeviceDepthQuality_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_CameraDeviceDepthQuality_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_CameraDeviceDepthQuality();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_CameraDeviceDepthQuality(int32_t value__) noexcept;

  /// @brief Field High value: I32(2)
  static ::GlobalNamespace::OVRPlugin_CameraDeviceDepthQuality const High;

  /// @brief Field Low value: I32(0)
  static ::GlobalNamespace::OVRPlugin_CameraDeviceDepthQuality const Low;

  /// @brief Field Medium value: I32(1)
  static ::GlobalNamespace::OVRPlugin_CameraDeviceDepthQuality const Medium;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8028};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceDepthQuality,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_CameraDeviceDepthQuality, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/FoveatedRenderingLevel
struct CORDL_TYPE OVRPlugin_FoveatedRenderingLevel {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_FoveatedRenderingLevel_Unwrapped
  enum struct __OVRPlugin_FoveatedRenderingLevel_Unwrapped : int32_t {
    __E_Off = static_cast<int32_t>(0x0),
    __E_Low = static_cast<int32_t>(0x1),
    __E_Medium = static_cast<int32_t>(0x2),
    __E_High = static_cast<int32_t>(0x3),
    __E_HighTop = static_cast<int32_t>(0x4),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_FoveatedRenderingLevel_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_FoveatedRenderingLevel_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_FoveatedRenderingLevel();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_FoveatedRenderingLevel(int32_t value__) noexcept;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel const EnumSize;

  /// @brief Field High value: I32(3)
  static ::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel const High;

  /// @brief Field HighTop value: I32(4)
  static ::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel const HighTop;

  /// @brief Field Low value: I32(1)
  static ::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel const Low;

  /// @brief Field Medium value: I32(2)
  static ::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel const Medium;

  /// @brief Field Off value: I32(0)
  static ::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel const Off;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8029};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/FixedFoveatedRenderingLevel
struct CORDL_TYPE OVRPlugin_FixedFoveatedRenderingLevel {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_FixedFoveatedRenderingLevel_Unwrapped
  enum struct __OVRPlugin_FixedFoveatedRenderingLevel_Unwrapped : int32_t {
    __E_Off = static_cast<int32_t>(0x0),
    __E_Low = static_cast<int32_t>(0x1),
    __E_Medium = static_cast<int32_t>(0x2),
    __E_High = static_cast<int32_t>(0x3),
    __E_HighTop = static_cast<int32_t>(0x4),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_FixedFoveatedRenderingLevel_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_FixedFoveatedRenderingLevel_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_FixedFoveatedRenderingLevel();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_FixedFoveatedRenderingLevel(int32_t value__) noexcept;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel const
      EnumSize;

  /// @brief Field High value: I32(3)
  static ::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel const High;

  /// @brief Field HighTop value: I32(4)
  static ::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel const HighTop;

  /// @brief Field Low value: I32(1)
  static ::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel const Low;

  /// @brief Field Medium value: I32(2)
  static ::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel const Medium;

  /// @brief Field Off value: I32(0)
  static ::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel const Off;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8030};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/TiledMultiResLevel
struct CORDL_TYPE OVRPlugin_TiledMultiResLevel {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_TiledMultiResLevel_Unwrapped
  enum struct __OVRPlugin_TiledMultiResLevel_Unwrapped : int32_t {
    __E_Off = static_cast<int32_t>(0x0),
    __E_LMSLow = static_cast<int32_t>(0x1),
    __E_LMSMedium = static_cast<int32_t>(0x2),
    __E_LMSHigh = static_cast<int32_t>(0x3),
    __E_LMSHighTop = static_cast<int32_t>(0x4),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_TiledMultiResLevel_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_TiledMultiResLevel_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_TiledMultiResLevel();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_TiledMultiResLevel(int32_t value__) noexcept;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::OVRPlugin_TiledMultiResLevel const EnumSize;

  /// @brief Field LMSHigh value: I32(3)
  static ::GlobalNamespace::OVRPlugin_TiledMultiResLevel const LMSHigh;

  /// @brief Field LMSHighTop value: I32(4)
  static ::GlobalNamespace::OVRPlugin_TiledMultiResLevel const LMSHighTop;

  /// @brief Field LMSLow value: I32(1)
  static ::GlobalNamespace::OVRPlugin_TiledMultiResLevel const LMSLow;

  /// @brief Field LMSMedium value: I32(2)
  static ::GlobalNamespace::OVRPlugin_TiledMultiResLevel const LMSMedium;

  /// @brief Field Off value: I32(0)
  static ::GlobalNamespace::OVRPlugin_TiledMultiResLevel const Off;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8031};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_TiledMultiResLevel,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_TiledMultiResLevel, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PerfMetrics
struct CORDL_TYPE OVRPlugin_PerfMetrics {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_PerfMetrics_Unwrapped
  enum struct __OVRPlugin_PerfMetrics_Unwrapped : int32_t {
    __E_App_CpuTime_Float = static_cast<int32_t>(0x0),
    __E_App_GpuTime_Float = static_cast<int32_t>(0x1),
    __E_Compositor_CpuTime_Float = static_cast<int32_t>(0x3),
    __E_Compositor_GpuTime_Float = static_cast<int32_t>(0x4),
    __E_Compositor_DroppedFrameCount_Int = static_cast<int32_t>(0x5),
    __E_System_GpuUtilPercentage_Float = static_cast<int32_t>(0x7),
    __E_System_CpuUtilAveragePercentage_Float = static_cast<int32_t>(0x8),
    __E_System_CpuUtilWorstPercentage_Float = static_cast<int32_t>(0x9),
    __E_Device_CpuClockFrequencyInMHz_Float = static_cast<int32_t>(0xa),
    __E_Device_GpuClockFrequencyInMHz_Float = static_cast<int32_t>(0xb),
    __E_Device_CpuClockLevel_Int = static_cast<int32_t>(0xc),
    __E_Device_GpuClockLevel_Int = static_cast<int32_t>(0xd),
    __E_Compositor_SpaceWarp_Mode_Int = static_cast<int32_t>(0xe),
    __E_Device_CpuCore0UtilPercentage_Float = static_cast<int32_t>(0x20),
    __E_Device_CpuCore1UtilPercentage_Float = static_cast<int32_t>(0x21),
    __E_Device_CpuCore2UtilPercentage_Float = static_cast<int32_t>(0x22),
    __E_Device_CpuCore3UtilPercentage_Float = static_cast<int32_t>(0x23),
    __E_Device_CpuCore4UtilPercentage_Float = static_cast<int32_t>(0x24),
    __E_Device_CpuCore5UtilPercentage_Float = static_cast<int32_t>(0x25),
    __E_Device_CpuCore6UtilPercentage_Float = static_cast<int32_t>(0x26),
    __E_Device_CpuCore7UtilPercentage_Float = static_cast<int32_t>(0x27),
    __E_Count = static_cast<int32_t>(0x28),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_PerfMetrics_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_PerfMetrics_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PerfMetrics();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_PerfMetrics(int32_t value__) noexcept;

  /// @brief Field App_CpuTime_Float value: I32(0)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const App_CpuTime_Float;

  /// @brief Field App_GpuTime_Float value: I32(1)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const App_GpuTime_Float;

  /// @brief Field Compositor_CpuTime_Float value: I32(3)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Compositor_CpuTime_Float;

  /// @brief Field Compositor_DroppedFrameCount_Int value: I32(5)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Compositor_DroppedFrameCount_Int;

  /// @brief Field Compositor_GpuTime_Float value: I32(4)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Compositor_GpuTime_Float;

  /// @brief Field Compositor_SpaceWarp_Mode_Int value: I32(14)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Compositor_SpaceWarp_Mode_Int;

  /// @brief Field Count value: I32(40)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const Count;

  /// @brief Field Device_CpuClockFrequencyInMHz_Float value: I32(10)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_CpuClockFrequencyInMHz_Float;

  /// @brief Field Device_CpuClockLevel_Int value: I32(12)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_CpuClockLevel_Int;

  /// @brief Field Device_CpuCore0UtilPercentage_Float value: I32(32)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_CpuCore0UtilPercentage_Float;

  /// @brief Field Device_CpuCore1UtilPercentage_Float value: I32(33)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_CpuCore1UtilPercentage_Float;

  /// @brief Field Device_CpuCore2UtilPercentage_Float value: I32(34)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_CpuCore2UtilPercentage_Float;

  /// @brief Field Device_CpuCore3UtilPercentage_Float value: I32(35)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_CpuCore3UtilPercentage_Float;

  /// @brief Field Device_CpuCore4UtilPercentage_Float value: I32(36)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_CpuCore4UtilPercentage_Float;

  /// @brief Field Device_CpuCore5UtilPercentage_Float value: I32(37)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_CpuCore5UtilPercentage_Float;

  /// @brief Field Device_CpuCore6UtilPercentage_Float value: I32(38)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_CpuCore6UtilPercentage_Float;

  /// @brief Field Device_CpuCore7UtilPercentage_Float value: I32(39)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_CpuCore7UtilPercentage_Float;

  /// @brief Field Device_GpuClockFrequencyInMHz_Float value: I32(11)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_GpuClockFrequencyInMHz_Float;

  /// @brief Field Device_GpuClockLevel_Int value: I32(13)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      Device_GpuClockLevel_Int;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const EnumSize;

  /// @brief Field System_CpuUtilAveragePercentage_Float value: I32(8)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      System_CpuUtilAveragePercentage_Float;

  /// @brief Field System_CpuUtilWorstPercentage_Float value: I32(9)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      System_CpuUtilWorstPercentage_Float;

  /// @brief Field System_GpuUtilPercentage_Float value: I32(7)
  static ::GlobalNamespace::OVRPlugin_PerfMetrics const
      System_GpuUtilPercentage_Float;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8032};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PerfMetrics, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_PerfMetrics, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/ProcessorPerformanceLevel
struct CORDL_TYPE OVRPlugin_ProcessorPerformanceLevel {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_ProcessorPerformanceLevel_Unwrapped
  enum struct __OVRPlugin_ProcessorPerformanceLevel_Unwrapped : int32_t {
    __E_PowerSavings = static_cast<int32_t>(0x0),
    __E_SustainedLow = static_cast<int32_t>(0x1),
    __E_SustainedHigh = static_cast<int32_t>(0x2),
    __E_Boost = static_cast<int32_t>(0x3),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_ProcessorPerformanceLevel_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_ProcessorPerformanceLevel_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_ProcessorPerformanceLevel();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_ProcessorPerformanceLevel(int32_t value__) noexcept;

  /// @brief Field Boost value: I32(3)
  static ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel const Boost;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel const EnumSize;

  /// @brief Field PowerSavings value: I32(0)
  static ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel const
      PowerSavings;

  /// @brief Field SustainedHigh value: I32(2)
  static ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel const
      SustainedHigh;

  /// @brief Field SustainedLow value: I32(1)
  static ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel const
      SustainedLow;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8033};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/FeatureType
struct CORDL_TYPE OVRPlugin_FeatureType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_FeatureType_Unwrapped
  enum struct __OVRPlugin_FeatureType_Unwrapped : int32_t {
    __E_HandTracking = static_cast<int32_t>(0x0),
    __E_KeyboardTracking = static_cast<int32_t>(0x1),
    __E_EyeTracking = static_cast<int32_t>(0x2),
    __E_FaceTracking = static_cast<int32_t>(0x3),
    __E_BodyTracking = static_cast<int32_t>(0x4),
    __E_Passthrough = static_cast<int32_t>(0x5),
    __E_GazeBasedFoveatedRendering = static_cast<int32_t>(0x6),
    __E_Count = static_cast<int32_t>(0x7),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_FeatureType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_FeatureType_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_FeatureType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_FeatureType(int32_t value__) noexcept;

  /// @brief Field BodyTracking value: I32(4)
  static ::GlobalNamespace::OVRPlugin_FeatureType const BodyTracking;

  /// @brief Field Count value: I32(7)
  static ::GlobalNamespace::OVRPlugin_FeatureType const Count;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::OVRPlugin_FeatureType const EnumSize;

  /// @brief Field EyeTracking value: I32(2)
  static ::GlobalNamespace::OVRPlugin_FeatureType const EyeTracking;

  /// @brief Field FaceTracking value: I32(3)
  static ::GlobalNamespace::OVRPlugin_FeatureType const FaceTracking;

  /// @brief Field GazeBasedFoveatedRendering value: I32(6)
  static ::GlobalNamespace::OVRPlugin_FeatureType const
      GazeBasedFoveatedRendering;

  /// @brief Field HandTracking value: I32(0)
  static ::GlobalNamespace::OVRPlugin_FeatureType const HandTracking;

  /// @brief Field KeyboardTracking value: I32(1)
  static ::GlobalNamespace::OVRPlugin_FeatureType const KeyboardTracking;

  /// @brief Field Passthrough value: I32(5)
  static ::GlobalNamespace::OVRPlugin_FeatureType const Passthrough;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8034};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_FeatureType, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_FeatureType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/CameraDeviceIntrinsicsParameters
struct CORDL_TYPE OVRPlugin_CameraDeviceIntrinsicsParameters {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_CameraDeviceIntrinsicsParameters();

  // Ctor Parameters [CppParam { name: "fx", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "fy", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "cx", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "cy", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "disto0", ty: "double_t", modifiers:
  // "", def_value: None }, CppParam { name: "disto1", ty: "double_t",
  // modifiers: "", def_value: None }, CppParam { name: "disto2", ty:
  // "double_t", modifiers: "", def_value: None }, CppParam { name: "disto3",
  // ty: "double_t", modifiers: "", def_value: None }, CppParam { name:
  // "disto4", ty: "double_t", modifiers: "", def_value: None }, CppParam {
  // name: "v_fov", ty: "float_t", modifiers: "", def_value: None }, CppParam {
  // name: "h_fov", ty: "float_t", modifiers: "", def_value: None }, CppParam {
  // name: "d_fov", ty: "float_t", modifiers: "", def_value: None }, CppParam {
  // name: "w", ty: "int32_t", modifiers: "", def_value: None }, CppParam {
  // name: "h", ty: "int32_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_CameraDeviceIntrinsicsParameters(
      float_t fx, float_t fy, float_t cx, float_t cy, double_t disto0,
      double_t disto1, double_t disto2, double_t disto3, double_t disto4,
      float_t v_fov, float_t h_fov, float_t d_fov, int32_t w,
      int32_t h) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8035};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x50};

  /// @brief Field fx, offset: 0x0, size: 0x4, def value: None
  float_t fx;

  /// @brief Field fy, offset: 0x4, size: 0x4, def value: None
  float_t fy;

  /// @brief Field cx, offset: 0x8, size: 0x4, def value: None
  float_t cx;

  /// @brief Field cy, offset: 0xc, size: 0x4, def value: None
  float_t cy;

  /// @brief Field disto0, offset: 0x10, size: 0x8, def value: None
  double_t disto0;

  /// @brief Field disto1, offset: 0x18, size: 0x8, def value: None
  double_t disto1;

  /// @brief Field disto2, offset: 0x20, size: 0x8, def value: None
  double_t disto2;

  /// @brief Field disto3, offset: 0x28, size: 0x8, def value: None
  double_t disto3;

  /// @brief Field disto4, offset: 0x30, size: 0x8, def value: None
  double_t disto4;

  /// @brief Field v_fov, offset: 0x38, size: 0x4, def value: None
  float_t v_fov;

  /// @brief Field h_fov, offset: 0x3c, size: 0x4, def value: None
  float_t h_fov;

  /// @brief Field d_fov, offset: 0x40, size: 0x4, def value: None
  float_t d_fov;

  /// @brief Field w, offset: 0x44, size: 0x4, def value: None
  int32_t w;

  /// @brief Field h, offset: 0x48, size: 0x4, def value: None
  int32_t h;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             fx) == 0x0,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             fy) == 0x4,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             cx) == 0x8,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             cy) == 0xc,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             disto0) == 0x10,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             disto1) == 0x18,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             disto2) == 0x20,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             disto3) == 0x28,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             disto4) == 0x30,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             v_fov) == 0x38,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             h_fov) == 0x3c,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             d_fov) == 0x40,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             w) == 0x44,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters,
             h) == 0x48,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters, 0x50>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/OverlayFlag
struct CORDL_TYPE OVRPlugin_OverlayFlag {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_OverlayFlag_Unwrapped
  enum struct __OVRPlugin_OverlayFlag_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0x0),
    __E_OnTop = static_cast<int32_t>(0x1),
    __E_HeadLocked = static_cast<int32_t>(0x2),
    __E_NoDepth = static_cast<int32_t>(0x4),
    __E_ExpensiveSuperSample = static_cast<int32_t>(0x8),
    __E_EfficientSuperSample = static_cast<int32_t>(0x10),
    __E_EfficientSharpen = static_cast<int32_t>(0x20),
    __E_BicubicFiltering = static_cast<int32_t>(0x40),
    __E_ExpensiveSharpen = static_cast<int32_t>(0x80),
    __E_SecureContent = static_cast<int32_t>(0x100),
    __E_ShapeFlag_Quad = static_cast<int32_t>(0x0),
    __E_ShapeFlag_Cylinder = static_cast<int32_t>(0x10),
    __E_ShapeFlag_Cubemap = static_cast<int32_t>(0x20),
    __E_ShapeFlag_OffcenterCubemap = static_cast<int32_t>(0x40),
    __E_ShapeFlagRangeMask = static_cast<int32_t>(0xf0),
    __E_Hidden = static_cast<int32_t>(0x200),
    __E_AutoFiltering = static_cast<int32_t>(0x400),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_OverlayFlag_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_OverlayFlag_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OverlayFlag();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_OverlayFlag(int32_t value__) noexcept;

  /// @brief Field AutoFiltering value: I32(1024)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const AutoFiltering;

  /// @brief Field BicubicFiltering value: I32(64)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const BicubicFiltering;

  /// @brief Field EfficientSharpen value: I32(32)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const EfficientSharpen;

  /// @brief Field EfficientSuperSample value: I32(16)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const EfficientSuperSample;

  /// @brief Field ExpensiveSharpen value: I32(128)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const ExpensiveSharpen;

  /// @brief Field ExpensiveSuperSample value: I32(8)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const ExpensiveSuperSample;

  /// @brief Field HeadLocked value: I32(2)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const HeadLocked;

  /// @brief Field Hidden value: I32(512)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const Hidden;

  /// @brief Field NoDepth value: I32(4)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const NoDepth;

  /// @brief Field None value: I32(0)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const None;

  /// @brief Field OnTop value: I32(1)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const OnTop;

  /// @brief Field SecureContent value: I32(256)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const SecureContent;

  /// @brief Field ShapeFlagRangeMask value: I32(240)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const ShapeFlagRangeMask;

  /// @brief Field ShapeFlag_Cubemap value: I32(32)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const ShapeFlag_Cubemap;

  /// @brief Field ShapeFlag_Cylinder value: I32(16)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const ShapeFlag_Cylinder;

  /// @brief Field ShapeFlag_OffcenterCubemap value: I32(64)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const
      ShapeFlag_OffcenterCubemap;

  /// @brief Field ShapeFlag_Quad value: I32(0)
  static ::GlobalNamespace::OVRPlugin_OverlayFlag const ShapeFlag_Quad;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8036};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_OverlayFlag, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OverlayFlag, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Vector2f
struct CORDL_TYPE OVRPlugin_Vector2f {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Vector2f();

  // Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "y", ty: "float_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Vector2f(float_t x, float_t y) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8037};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field x, offset: 0x0, size: 0x4, def value: None
  float_t x;

  /// @brief Field y, offset: 0x4, size: 0x4, def value: None
  float_t y;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector2f, x) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector2f, y) == 0x4,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Vector2f, 0x8>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Vector3f
struct CORDL_TYPE OVRPlugin_Vector3f {
public:
  // Declarations
  /// @brief Field zero, offset 0xffffffff, size 0xc
  __declspec(property(
      get = getStaticF_zero,
      put = setStaticF_zero)) ::GlobalNamespace::OVRPlugin_Vector3f zero;

  /// @brief Method ToString, addr 0x3ff3bfc, size 0xfc, virtual true, abstract:
  /// false, final false
  inline ::StringW ToString();

  static inline ::GlobalNamespace::OVRPlugin_Vector3f getStaticF_zero();

  static inline void
  setStaticF_zero(::GlobalNamespace::OVRPlugin_Vector3f value);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Vector3f();

  // Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "y", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "z", ty: "float_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Vector3f(float_t x, float_t y, float_t z) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8038};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0xc};

  /// @brief Field x, offset: 0x0, size: 0x4, def value: None
  float_t x;

  /// @brief Field y, offset: 0x4, size: 0x4, def value: None
  float_t y;

  /// @brief Field z, offset: 0x8, size: 0x4, def value: None
  float_t z;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector3f, x) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector3f, y) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector3f, z) == 0x8,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Vector3f, 0xc>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Vector4f
struct CORDL_TYPE OVRPlugin_Vector4f {
public:
  // Declarations
  /// @brief Field zero, offset 0xffffffff, size 0x10
  __declspec(property(
      get = getStaticF_zero,
      put = setStaticF_zero)) ::GlobalNamespace::OVRPlugin_Vector4f zero;

  /// @brief Method ToString, addr 0x3ff3d44, size 0x1e4, virtual true,
  /// abstract: false, final false
  inline ::StringW ToString();

  static inline ::GlobalNamespace::OVRPlugin_Vector4f getStaticF_zero();

  static inline void
  setStaticF_zero(::GlobalNamespace::OVRPlugin_Vector4f value);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Vector4f();

  // Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "y", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "z", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "w", ty: "float_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Vector4f(float_t x, float_t y, float_t z,
                               float_t w) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8039};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field x, offset: 0x0, size: 0x4, def value: None
  float_t x;

  /// @brief Field y, offset: 0x4, size: 0x4, def value: None
  float_t y;

  /// @brief Field z, offset: 0x8, size: 0x4, def value: None
  float_t z;

  /// @brief Field w, offset: 0xc, size: 0x4, def value: None
  float_t w;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector4f, x) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector4f, y) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector4f, z) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector4f, w) == 0xc,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_Vector4f, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Vector4s
struct CORDL_TYPE OVRPlugin_Vector4s {
public:
  // Declarations
  /// @brief Field zero, offset 0xffffffff, size 0x8
  __declspec(property(
      get = getStaticF_zero,
      put = setStaticF_zero)) ::GlobalNamespace::OVRPlugin_Vector4s zero;

  /// @brief Method ToString, addr 0x3ff3f70, size 0x1e4, virtual true,
  /// abstract: false, final false
  inline ::StringW ToString();

  static inline ::GlobalNamespace::OVRPlugin_Vector4s getStaticF_zero();

  static inline void
  setStaticF_zero(::GlobalNamespace::OVRPlugin_Vector4s value);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Vector4s();

  // Ctor Parameters [CppParam { name: "x", ty: "int16_t", modifiers: "",
  // def_value: None }, CppParam { name: "y", ty: "int16_t", modifiers: "",
  // def_value: None }, CppParam { name: "z", ty: "int16_t", modifiers: "",
  // def_value: None }, CppParam { name: "w", ty: "int16_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Vector4s(int16_t x, int16_t y, int16_t z,
                               int16_t w) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8040};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field x, offset: 0x0, size: 0x2, def value: None
  int16_t x;

  /// @brief Field y, offset: 0x2, size: 0x2, def value: None
  int16_t y;

  /// @brief Field z, offset: 0x4, size: 0x2, def value: None
  int16_t z;

  /// @brief Field w, offset: 0x6, size: 0x2, def value: None
  int16_t w;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector4s, x) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector4s, y) == 0x2,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector4s, z) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector4s, w) == 0x6,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Vector4s, 0x8>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Quatf
struct CORDL_TYPE OVRPlugin_Quatf {
public:
  // Declarations
  /// @brief Field identity, offset 0xffffffff, size 0x10
  __declspec(property(
      get = getStaticF_identity,
      put = setStaticF_identity)) ::GlobalNamespace::OVRPlugin_Quatf identity;

  /// @brief Method ToString, addr 0x3ff419c, size 0x1e4, virtual true,
  /// abstract: false, final false
  inline ::StringW ToString();

  static inline ::GlobalNamespace::OVRPlugin_Quatf getStaticF_identity();

  static inline void
  setStaticF_identity(::GlobalNamespace::OVRPlugin_Quatf value);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Quatf();

  // Ctor Parameters [CppParam { name: "x", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "y", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "z", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "w", ty: "float_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Quatf(float_t x, float_t y, float_t z,
                            float_t w) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8041};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field x, offset: 0x0, size: 0x4, def value: None
  float_t x;

  /// @brief Field y, offset: 0x4, size: 0x4, def value: None
  float_t y;

  /// @brief Field z, offset: 0x8, size: 0x4, def value: None
  float_t z;

  /// @brief Field w, offset: 0xc, size: 0x4, def value: None
  float_t w;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Quatf, x) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Quatf, y) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Quatf, z) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Quatf, w) == 0xc,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Quatf, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Quatf, OVRPlugin::Vector3f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Posef
struct CORDL_TYPE OVRPlugin_Posef {
public:
  // Declarations
  /// @brief Field identity, offset 0xffffffff, size 0x1c
  __declspec(property(
      get = getStaticF_identity,
      put = setStaticF_identity)) ::GlobalNamespace::OVRPlugin_Posef identity;

  /// @brief Method ToString, addr 0x3ff44a0, size 0xf4, virtual true, abstract:
  /// false, final false
  inline ::StringW ToString();

  static inline ::GlobalNamespace::OVRPlugin_Posef getStaticF_identity();

  static inline void
  setStaticF_identity(::GlobalNamespace::OVRPlugin_Posef value);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Posef();

  // Ctor Parameters [CppParam { name: "Orientation", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "Position", ty: "::GlobalNamespace::OVRPlugin_Vector3f",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_Posef(
      ::GlobalNamespace::OVRPlugin_Quatf Orientation,
      ::GlobalNamespace::OVRPlugin_Vector3f Position) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8042};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x1c};

  /// @brief Field Orientation, offset: 0x0, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf Orientation;

  /// @brief Field Position, offset: 0x10, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Vector3f Position;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Posef, Orientation) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Posef, Position) == 0x10,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Posef, 0x1c>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies UnityEngine.Rect, UnityEngine.Vector4
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/TextureRectMatrixf
struct CORDL_TYPE OVRPlugin_TextureRectMatrixf {
public:
  // Declarations
  /// @brief Field zero, offset 0xffffffff, size 0x40
  __declspec(property(
      get = getStaticF_zero,
      put = setStaticF_zero)) ::GlobalNamespace::OVRPlugin_TextureRectMatrixf
      zero;

  /// @brief Method ToString, addr 0x3ff4660, size 0x1f8, virtual true,
  /// abstract: false, final false
  inline ::StringW ToString();

  static inline ::GlobalNamespace::OVRPlugin_TextureRectMatrixf
  getStaticF_zero();

  static inline void
  setStaticF_zero(::GlobalNamespace::OVRPlugin_TextureRectMatrixf value);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_TextureRectMatrixf();

  // Ctor Parameters [CppParam { name: "leftRect", ty: "::UnityEngine::Rect",
  // modifiers: "", def_value: None }, CppParam { name: "rightRect", ty:
  // "::UnityEngine::Rect", modifiers: "", def_value: None }, CppParam { name:
  // "leftScaleBias", ty: "::UnityEngine::Vector4", modifiers: "", def_value:
  // None }, CppParam { name: "rightScaleBias", ty: "::UnityEngine::Vector4",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_TextureRectMatrixf(
      ::UnityEngine::Rect leftRect, ::UnityEngine::Rect rightRect,
      ::UnityEngine::Vector4 leftScaleBias,
      ::UnityEngine::Vector4 rightScaleBias) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8043};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x40};

  /// @brief Field leftRect, offset: 0x0, size: 0x10, def value: None
  ::UnityEngine::Rect leftRect;

  /// @brief Field rightRect, offset: 0x10, size: 0x10, def value: None
  ::UnityEngine::Rect rightRect;

  /// @brief Field leftScaleBias, offset: 0x20, size: 0x10, def value: None
  ::UnityEngine::Vector4 leftScaleBias;

  /// @brief Field rightScaleBias, offset: 0x30, size: 0x10, def value: None
  ::UnityEngine::Vector4 rightScaleBias;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_TextureRectMatrixf,
                       leftRect) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_TextureRectMatrixf,
                       rightRect) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_TextureRectMatrixf,
                       leftScaleBias) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_TextureRectMatrixf,
                       rightScaleBias) == 0x30,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_TextureRectMatrixf, 0x40>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Posef, OVRPlugin::Vector3f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PoseStatef
struct CORDL_TYPE OVRPlugin_PoseStatef {
public:
  // Declarations
  /// @brief Field identity, offset 0xffffffff, size 0x58
  __declspec(property(
      get = getStaticF_identity,
      put = setStaticF_identity)) ::GlobalNamespace::OVRPlugin_PoseStatef
      identity;

  static inline ::GlobalNamespace::OVRPlugin_PoseStatef getStaticF_identity();

  static inline void
  setStaticF_identity(::GlobalNamespace::OVRPlugin_PoseStatef value);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PoseStatef();

  // Ctor Parameters [CppParam { name: "Pose", ty:
  // "::GlobalNamespace::OVRPlugin_Posef", modifiers: "", def_value: None },
  // CppParam { name: "Velocity", ty: "::GlobalNamespace::OVRPlugin_Vector3f",
  // modifiers: "", def_value: None }, CppParam { name: "Acceleration", ty:
  // "::GlobalNamespace::OVRPlugin_Vector3f", modifiers: "", def_value: None },
  // CppParam { name: "AngularVelocity", ty:
  // "::GlobalNamespace::OVRPlugin_Vector3f", modifiers: "", def_value: None },
  // CppParam { name: "AngularAcceleration", ty:
  // "::GlobalNamespace::OVRPlugin_Vector3f", modifiers: "", def_value: None },
  // CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_PoseStatef(
      ::GlobalNamespace::OVRPlugin_Posef Pose,
      ::GlobalNamespace::OVRPlugin_Vector3f Velocity,
      ::GlobalNamespace::OVRPlugin_Vector3f Acceleration,
      ::GlobalNamespace::OVRPlugin_Vector3f AngularVelocity,
      ::GlobalNamespace::OVRPlugin_Vector3f AngularAcceleration,
      double_t Time) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8044};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x58};

  /// @brief Field Pose, offset: 0x0, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef Pose;

  /// @brief Field Velocity, offset: 0x1c, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Vector3f Velocity;

  /// @brief Field Acceleration, offset: 0x28, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Vector3f Acceleration;

  /// @brief Field AngularVelocity, offset: 0x34, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Vector3f AngularVelocity;

  /// @brief Field AngularAcceleration, offset: 0x40, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Vector3f AngularAcceleration;

  /// @brief Field Time, offset: 0x50, size: 0x8, def value: None
  double_t Time;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PoseStatef, Pose) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_PoseStatef, Velocity) ==
                  0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_PoseStatef, Acceleration) ==
                  0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_PoseStatef,
                       AngularVelocity) == 0x34,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_PoseStatef,
                       AngularAcceleration) == 0x40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_PoseStatef, Time) == 0x50,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_PoseStatef, 0x58>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HapticsLocation
struct CORDL_TYPE OVRPlugin_HapticsLocation {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_HapticsLocation_Unwrapped
  enum struct __OVRPlugin_HapticsLocation_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0x0),
    __E_Hand = static_cast<int32_t>(0x1),
    __E_Thumb = static_cast<int32_t>(0x2),
    __E_Index = static_cast<int32_t>(0x4),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_HapticsLocation_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_HapticsLocation_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HapticsLocation();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_HapticsLocation(int32_t value__) noexcept;

  /// @brief Field Hand value: I32(1)
  static ::GlobalNamespace::OVRPlugin_HapticsLocation const Hand;

  /// @brief Field Index value: I32(4)
  static ::GlobalNamespace::OVRPlugin_HapticsLocation const Index;

  /// @brief Field None value: I32(0)
  static ::GlobalNamespace::OVRPlugin_HapticsLocation const None;

  /// @brief Field Thumb value: I32(2)
  static ::GlobalNamespace::OVRPlugin_HapticsLocation const Thumb;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8045};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsLocation, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_HapticsLocation, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Vector2f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/ControllerState6
struct CORDL_TYPE OVRPlugin_ControllerState6 {
public:
  // Declarations
  /// @brief Method .ctor, addr 0x3ff49c8, size 0xc8, virtual false, abstract:
  /// false, final false
  inline void _ctor(::GlobalNamespace::OVRPlugin_ControllerState5 cs);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_ControllerState6();

  // Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t",
  // modifiers: "", def_value: None }, CppParam { name: "Buttons", ty:
  // "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Touches",
  // ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name:
  // "NearTouches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam {
  // name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value:
  // None }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "RHandTrigger", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "LThumbstick", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "RThumbstick", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "LTouchpad", ty: "::GlobalNamespace::OVRPlugin_Vector2f",
  // modifiers: "", def_value: None }, CppParam { name: "RTouchpad", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "LBatteryPercentRemaining", ty: "uint8_t", modifiers: "",
  // def_value: None }, CppParam { name: "RBatteryPercentRemaining", ty:
  // "uint8_t", modifiers: "", def_value: None }, CppParam { name:
  // "LRecenterCount", ty: "uint8_t", modifiers: "", def_value: None }, CppParam
  // { name: "RRecenterCount", ty: "uint8_t", modifiers: "", def_value: None },
  // CppParam { name: "LThumbRestForce", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "RThumbRestForce", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "LStylusForce", ty:
  // "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "RStylusForce", ty: "float_t", modifiers: "", def_value: None }, CppParam {
  // name: "LIndexTriggerCurl", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "RIndexTriggerCurl", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "LIndexTriggerSlide", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "RIndexTriggerSlide",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "LIndexTriggerForce", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "RIndexTriggerForce", ty: "float_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_ControllerState6(
      uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches,
      uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger,
      float_t LHandTrigger, float_t RHandTrigger,
      ::GlobalNamespace::OVRPlugin_Vector2f LThumbstick,
      ::GlobalNamespace::OVRPlugin_Vector2f RThumbstick,
      ::GlobalNamespace::OVRPlugin_Vector2f LTouchpad,
      ::GlobalNamespace::OVRPlugin_Vector2f RTouchpad,
      uint8_t LBatteryPercentRemaining, uint8_t RBatteryPercentRemaining,
      uint8_t LRecenterCount, uint8_t RRecenterCount, float_t LThumbRestForce,
      float_t RThumbRestForce, float_t LStylusForce, float_t RStylusForce,
      float_t LIndexTriggerCurl, float_t RIndexTriggerCurl,
      float_t LIndexTriggerSlide, float_t RIndexTriggerSlide,
      float_t LIndexTriggerForce, float_t RIndexTriggerForce) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8046};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x6c};

  /// @brief Field ConnectedControllers, offset: 0x0, size: 0x4, def value: None
  uint32_t ConnectedControllers;

  /// @brief Field Buttons, offset: 0x4, size: 0x4, def value: None
  uint32_t Buttons;

  /// @brief Field Touches, offset: 0x8, size: 0x4, def value: None
  uint32_t Touches;

  /// @brief Field NearTouches, offset: 0xc, size: 0x4, def value: None
  uint32_t NearTouches;

  /// @brief Field LIndexTrigger, offset: 0x10, size: 0x4, def value: None
  float_t LIndexTrigger;

  /// @brief Field RIndexTrigger, offset: 0x14, size: 0x4, def value: None
  float_t RIndexTrigger;

  /// @brief Field LHandTrigger, offset: 0x18, size: 0x4, def value: None
  float_t LHandTrigger;

  /// @brief Field RHandTrigger, offset: 0x1c, size: 0x4, def value: None
  float_t RHandTrigger;

  /// @brief Field LThumbstick, offset: 0x20, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f LThumbstick;

  /// @brief Field RThumbstick, offset: 0x28, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f RThumbstick;

  /// @brief Field LTouchpad, offset: 0x30, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f LTouchpad;

  /// @brief Field RTouchpad, offset: 0x38, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f RTouchpad;

  /// @brief Field LBatteryPercentRemaining, offset: 0x40, size: 0x1, def value:
  /// None
  uint8_t LBatteryPercentRemaining;

  /// @brief Field RBatteryPercentRemaining, offset: 0x41, size: 0x1, def value:
  /// None
  uint8_t RBatteryPercentRemaining;

  /// @brief Field LRecenterCount, offset: 0x42, size: 0x1, def value: None
  uint8_t LRecenterCount;

  /// @brief Field RRecenterCount, offset: 0x43, size: 0x1, def value: None
  uint8_t RRecenterCount;

  /// @brief Field LThumbRestForce, offset: 0x44, size: 0x4, def value: None
  float_t LThumbRestForce;

  /// @brief Field RThumbRestForce, offset: 0x48, size: 0x4, def value: None
  float_t RThumbRestForce;

  /// @brief Field LStylusForce, offset: 0x4c, size: 0x4, def value: None
  float_t LStylusForce;

  /// @brief Field RStylusForce, offset: 0x50, size: 0x4, def value: None
  float_t RStylusForce;

  /// @brief Field LIndexTriggerCurl, offset: 0x54, size: 0x4, def value: None
  float_t LIndexTriggerCurl;

  /// @brief Field RIndexTriggerCurl, offset: 0x58, size: 0x4, def value: None
  float_t RIndexTriggerCurl;

  /// @brief Field LIndexTriggerSlide, offset: 0x5c, size: 0x4, def value: None
  float_t LIndexTriggerSlide;

  /// @brief Field RIndexTriggerSlide, offset: 0x60, size: 0x4, def value: None
  float_t RIndexTriggerSlide;

  /// @brief Field LIndexTriggerForce, offset: 0x64, size: 0x4, def value: None
  float_t LIndexTriggerForce;

  /// @brief Field RIndexTriggerForce, offset: 0x68, size: 0x4, def value: None
  float_t RIndexTriggerForce;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       ConnectedControllers) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       Buttons) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       Touches) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       NearTouches) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       LIndexTrigger) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       RIndexTrigger) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       LHandTrigger) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       RHandTrigger) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       LThumbstick) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       RThumbstick) == 0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       LTouchpad) == 0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       RTouchpad) == 0x38,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       LBatteryPercentRemaining) == 0x40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       RBatteryPercentRemaining) == 0x41,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       LRecenterCount) == 0x42,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       RRecenterCount) == 0x43,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       LThumbRestForce) == 0x44,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       RThumbRestForce) == 0x48,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       LStylusForce) == 0x4c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       RStylusForce) == 0x50,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       LIndexTriggerCurl) == 0x54,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       RIndexTriggerCurl) == 0x58,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       LIndexTriggerSlide) == 0x5c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       RIndexTriggerSlide) == 0x60,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       LIndexTriggerForce) == 0x64,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState6,
                       RIndexTriggerForce) == 0x68,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_ControllerState6, 0x6c>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Vector2f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/ControllerState5
struct CORDL_TYPE OVRPlugin_ControllerState5 {
public:
  // Declarations
  /// @brief Method .ctor, addr 0x3ff4a90, size 0x90, virtual false, abstract:
  /// false, final false
  inline void _ctor(::GlobalNamespace::OVRPlugin_ControllerState4 cs);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_ControllerState5();

  // Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t",
  // modifiers: "", def_value: None }, CppParam { name: "Buttons", ty:
  // "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Touches",
  // ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name:
  // "NearTouches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam {
  // name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value:
  // None }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "RHandTrigger", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "LThumbstick", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "RThumbstick", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "LTouchpad", ty: "::GlobalNamespace::OVRPlugin_Vector2f",
  // modifiers: "", def_value: None }, CppParam { name: "RTouchpad", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "LBatteryPercentRemaining", ty: "uint8_t", modifiers: "",
  // def_value: None }, CppParam { name: "RBatteryPercentRemaining", ty:
  // "uint8_t", modifiers: "", def_value: None }, CppParam { name:
  // "LRecenterCount", ty: "uint8_t", modifiers: "", def_value: None }, CppParam
  // { name: "RRecenterCount", ty: "uint8_t", modifiers: "", def_value: None },
  // CppParam { name: "LThumbRestForce", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "RThumbRestForce", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "LStylusForce", ty:
  // "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "RStylusForce", ty: "float_t", modifiers: "", def_value: None }, CppParam {
  // name: "LIndexTriggerCurl", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "RIndexTriggerCurl", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "LIndexTriggerSlide", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "RIndexTriggerSlide",
  // ty: "float_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_ControllerState5(
      uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches,
      uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger,
      float_t LHandTrigger, float_t RHandTrigger,
      ::GlobalNamespace::OVRPlugin_Vector2f LThumbstick,
      ::GlobalNamespace::OVRPlugin_Vector2f RThumbstick,
      ::GlobalNamespace::OVRPlugin_Vector2f LTouchpad,
      ::GlobalNamespace::OVRPlugin_Vector2f RTouchpad,
      uint8_t LBatteryPercentRemaining, uint8_t RBatteryPercentRemaining,
      uint8_t LRecenterCount, uint8_t RRecenterCount, float_t LThumbRestForce,
      float_t RThumbRestForce, float_t LStylusForce, float_t RStylusForce,
      float_t LIndexTriggerCurl, float_t RIndexTriggerCurl,
      float_t LIndexTriggerSlide, float_t RIndexTriggerSlide) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8047};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x64};

  /// @brief Field ConnectedControllers, offset: 0x0, size: 0x4, def value: None
  uint32_t ConnectedControllers;

  /// @brief Field Buttons, offset: 0x4, size: 0x4, def value: None
  uint32_t Buttons;

  /// @brief Field Touches, offset: 0x8, size: 0x4, def value: None
  uint32_t Touches;

  /// @brief Field NearTouches, offset: 0xc, size: 0x4, def value: None
  uint32_t NearTouches;

  /// @brief Field LIndexTrigger, offset: 0x10, size: 0x4, def value: None
  float_t LIndexTrigger;

  /// @brief Field RIndexTrigger, offset: 0x14, size: 0x4, def value: None
  float_t RIndexTrigger;

  /// @brief Field LHandTrigger, offset: 0x18, size: 0x4, def value: None
  float_t LHandTrigger;

  /// @brief Field RHandTrigger, offset: 0x1c, size: 0x4, def value: None
  float_t RHandTrigger;

  /// @brief Field LThumbstick, offset: 0x20, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f LThumbstick;

  /// @brief Field RThumbstick, offset: 0x28, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f RThumbstick;

  /// @brief Field LTouchpad, offset: 0x30, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f LTouchpad;

  /// @brief Field RTouchpad, offset: 0x38, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f RTouchpad;

  /// @brief Field LBatteryPercentRemaining, offset: 0x40, size: 0x1, def value:
  /// None
  uint8_t LBatteryPercentRemaining;

  /// @brief Field RBatteryPercentRemaining, offset: 0x41, size: 0x1, def value:
  /// None
  uint8_t RBatteryPercentRemaining;

  /// @brief Field LRecenterCount, offset: 0x42, size: 0x1, def value: None
  uint8_t LRecenterCount;

  /// @brief Field RRecenterCount, offset: 0x43, size: 0x1, def value: None
  uint8_t RRecenterCount;

  /// @brief Field LThumbRestForce, offset: 0x44, size: 0x4, def value: None
  float_t LThumbRestForce;

  /// @brief Field RThumbRestForce, offset: 0x48, size: 0x4, def value: None
  float_t RThumbRestForce;

  /// @brief Field LStylusForce, offset: 0x4c, size: 0x4, def value: None
  float_t LStylusForce;

  /// @brief Field RStylusForce, offset: 0x50, size: 0x4, def value: None
  float_t RStylusForce;

  /// @brief Field LIndexTriggerCurl, offset: 0x54, size: 0x4, def value: None
  float_t LIndexTriggerCurl;

  /// @brief Field RIndexTriggerCurl, offset: 0x58, size: 0x4, def value: None
  float_t RIndexTriggerCurl;

  /// @brief Field LIndexTriggerSlide, offset: 0x5c, size: 0x4, def value: None
  float_t LIndexTriggerSlide;

  /// @brief Field RIndexTriggerSlide, offset: 0x60, size: 0x4, def value: None
  float_t RIndexTriggerSlide;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       ConnectedControllers) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       Buttons) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       Touches) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       NearTouches) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       LIndexTrigger) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       RIndexTrigger) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       LHandTrigger) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       RHandTrigger) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       LThumbstick) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       RThumbstick) == 0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       LTouchpad) == 0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       RTouchpad) == 0x38,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       LBatteryPercentRemaining) == 0x40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       RBatteryPercentRemaining) == 0x41,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       LRecenterCount) == 0x42,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       RRecenterCount) == 0x43,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       LThumbRestForce) == 0x44,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       RThumbRestForce) == 0x48,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       LStylusForce) == 0x4c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       RStylusForce) == 0x50,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       LIndexTriggerCurl) == 0x54,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       RIndexTriggerCurl) == 0x58,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       LIndexTriggerSlide) == 0x5c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState5,
                       RIndexTriggerSlide) == 0x60,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_ControllerState5, 0x64>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Vector2f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/ControllerState4
struct CORDL_TYPE OVRPlugin_ControllerState4 {
public:
  // Declarations
  /// @brief Method .ctor, addr 0x3ff4b20, size 0x6c, virtual false, abstract:
  /// false, final false
  inline void _ctor(::GlobalNamespace::OVRPlugin_ControllerState2 cs);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_ControllerState4();

  // Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t",
  // modifiers: "", def_value: None }, CppParam { name: "Buttons", ty:
  // "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Touches",
  // ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name:
  // "NearTouches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam {
  // name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value:
  // None }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "RHandTrigger", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "LThumbstick", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "RThumbstick", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "LTouchpad", ty: "::GlobalNamespace::OVRPlugin_Vector2f",
  // modifiers: "", def_value: None }, CppParam { name: "RTouchpad", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "LBatteryPercentRemaining", ty: "uint8_t", modifiers: "",
  // def_value: None }, CppParam { name: "RBatteryPercentRemaining", ty:
  // "uint8_t", modifiers: "", def_value: None }, CppParam { name:
  // "LRecenterCount", ty: "uint8_t", modifiers: "", def_value: None }, CppParam
  // { name: "RRecenterCount", ty: "uint8_t", modifiers: "", def_value: None },
  // CppParam { name: "Reserved_27", ty: "uint8_t", modifiers: "", def_value:
  // None }, CppParam { name: "Reserved_26", ty: "uint8_t", modifiers: "",
  // def_value: None }, CppParam { name: "Reserved_25", ty: "uint8_t",
  // modifiers: "", def_value: None }, CppParam { name: "Reserved_24", ty:
  // "uint8_t", modifiers: "", def_value: None }, CppParam { name:
  // "Reserved_23", ty: "uint8_t", modifiers: "", def_value: None }, CppParam {
  // name: "Reserved_22", ty: "uint8_t", modifiers: "", def_value: None },
  // CppParam { name: "Reserved_21", ty: "uint8_t", modifiers: "", def_value:
  // None }, CppParam { name: "Reserved_20", ty: "uint8_t", modifiers: "",
  // def_value: None }, CppParam { name: "Reserved_19", ty: "uint8_t",
  // modifiers: "", def_value: None }, CppParam { name: "Reserved_18", ty:
  // "uint8_t", modifiers: "", def_value: None }, CppParam { name:
  // "Reserved_17", ty: "uint8_t", modifiers: "", def_value: None }, CppParam {
  // name: "Reserved_16", ty: "uint8_t", modifiers: "", def_value: None },
  // CppParam { name: "Reserved_15", ty: "uint8_t", modifiers: "", def_value:
  // None }, CppParam { name: "Reserved_14", ty: "uint8_t", modifiers: "",
  // def_value: None }, CppParam { name: "Reserved_13", ty: "uint8_t",
  // modifiers: "", def_value: None }, CppParam { name: "Reserved_12", ty:
  // "uint8_t", modifiers: "", def_value: None }, CppParam { name:
  // "Reserved_11", ty: "uint8_t", modifiers: "", def_value: None }, CppParam {
  // name: "Reserved_10", ty: "uint8_t", modifiers: "", def_value: None },
  // CppParam { name: "Reserved_09", ty: "uint8_t", modifiers: "", def_value:
  // None }, CppParam { name: "Reserved_08", ty: "uint8_t", modifiers: "",
  // def_value: None }, CppParam { name: "Reserved_07", ty: "uint8_t",
  // modifiers: "", def_value: None }, CppParam { name: "Reserved_06", ty:
  // "uint8_t", modifiers: "", def_value: None }, CppParam { name:
  // "Reserved_05", ty: "uint8_t", modifiers: "", def_value: None }, CppParam {
  // name: "Reserved_04", ty: "uint8_t", modifiers: "", def_value: None },
  // CppParam { name: "Reserved_03", ty: "uint8_t", modifiers: "", def_value:
  // None }, CppParam { name: "Reserved_02", ty: "uint8_t", modifiers: "",
  // def_value: None }, CppParam { name: "Reserved_01", ty: "uint8_t",
  // modifiers: "", def_value: None }, CppParam { name: "Reserved_00", ty:
  // "uint8_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_ControllerState4(
      uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches,
      uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger,
      float_t LHandTrigger, float_t RHandTrigger,
      ::GlobalNamespace::OVRPlugin_Vector2f LThumbstick,
      ::GlobalNamespace::OVRPlugin_Vector2f RThumbstick,
      ::GlobalNamespace::OVRPlugin_Vector2f LTouchpad,
      ::GlobalNamespace::OVRPlugin_Vector2f RTouchpad,
      uint8_t LBatteryPercentRemaining, uint8_t RBatteryPercentRemaining,
      uint8_t LRecenterCount, uint8_t RRecenterCount, uint8_t Reserved_27,
      uint8_t Reserved_26, uint8_t Reserved_25, uint8_t Reserved_24,
      uint8_t Reserved_23, uint8_t Reserved_22, uint8_t Reserved_21,
      uint8_t Reserved_20, uint8_t Reserved_19, uint8_t Reserved_18,
      uint8_t Reserved_17, uint8_t Reserved_16, uint8_t Reserved_15,
      uint8_t Reserved_14, uint8_t Reserved_13, uint8_t Reserved_12,
      uint8_t Reserved_11, uint8_t Reserved_10, uint8_t Reserved_09,
      uint8_t Reserved_08, uint8_t Reserved_07, uint8_t Reserved_06,
      uint8_t Reserved_05, uint8_t Reserved_04, uint8_t Reserved_03,
      uint8_t Reserved_02, uint8_t Reserved_01, uint8_t Reserved_00) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8048};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x60};

  /// @brief Field ConnectedControllers, offset: 0x0, size: 0x4, def value: None
  uint32_t ConnectedControllers;

  /// @brief Field Buttons, offset: 0x4, size: 0x4, def value: None
  uint32_t Buttons;

  /// @brief Field Touches, offset: 0x8, size: 0x4, def value: None
  uint32_t Touches;

  /// @brief Field NearTouches, offset: 0xc, size: 0x4, def value: None
  uint32_t NearTouches;

  /// @brief Field LIndexTrigger, offset: 0x10, size: 0x4, def value: None
  float_t LIndexTrigger;

  /// @brief Field RIndexTrigger, offset: 0x14, size: 0x4, def value: None
  float_t RIndexTrigger;

  /// @brief Field LHandTrigger, offset: 0x18, size: 0x4, def value: None
  float_t LHandTrigger;

  /// @brief Field RHandTrigger, offset: 0x1c, size: 0x4, def value: None
  float_t RHandTrigger;

  /// @brief Field LThumbstick, offset: 0x20, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f LThumbstick;

  /// @brief Field RThumbstick, offset: 0x28, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f RThumbstick;

  /// @brief Field LTouchpad, offset: 0x30, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f LTouchpad;

  /// @brief Field RTouchpad, offset: 0x38, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f RTouchpad;

  /// @brief Field LBatteryPercentRemaining, offset: 0x40, size: 0x1, def value:
  /// None
  uint8_t LBatteryPercentRemaining;

  /// @brief Field RBatteryPercentRemaining, offset: 0x41, size: 0x1, def value:
  /// None
  uint8_t RBatteryPercentRemaining;

  /// @brief Field LRecenterCount, offset: 0x42, size: 0x1, def value: None
  uint8_t LRecenterCount;

  /// @brief Field RRecenterCount, offset: 0x43, size: 0x1, def value: None
  uint8_t RRecenterCount;

  /// @brief Field Reserved_27, offset: 0x44, size: 0x1, def value: None
  uint8_t Reserved_27;

  /// @brief Field Reserved_26, offset: 0x45, size: 0x1, def value: None
  uint8_t Reserved_26;

  /// @brief Field Reserved_25, offset: 0x46, size: 0x1, def value: None
  uint8_t Reserved_25;

  /// @brief Field Reserved_24, offset: 0x47, size: 0x1, def value: None
  uint8_t Reserved_24;

  /// @brief Field Reserved_23, offset: 0x48, size: 0x1, def value: None
  uint8_t Reserved_23;

  /// @brief Field Reserved_22, offset: 0x49, size: 0x1, def value: None
  uint8_t Reserved_22;

  /// @brief Field Reserved_21, offset: 0x4a, size: 0x1, def value: None
  uint8_t Reserved_21;

  /// @brief Field Reserved_20, offset: 0x4b, size: 0x1, def value: None
  uint8_t Reserved_20;

  /// @brief Field Reserved_19, offset: 0x4c, size: 0x1, def value: None
  uint8_t Reserved_19;

  /// @brief Field Reserved_18, offset: 0x4d, size: 0x1, def value: None
  uint8_t Reserved_18;

  /// @brief Field Reserved_17, offset: 0x4e, size: 0x1, def value: None
  uint8_t Reserved_17;

  /// @brief Field Reserved_16, offset: 0x4f, size: 0x1, def value: None
  uint8_t Reserved_16;

  /// @brief Field Reserved_15, offset: 0x50, size: 0x1, def value: None
  uint8_t Reserved_15;

  /// @brief Field Reserved_14, offset: 0x51, size: 0x1, def value: None
  uint8_t Reserved_14;

  /// @brief Field Reserved_13, offset: 0x52, size: 0x1, def value: None
  uint8_t Reserved_13;

  /// @brief Field Reserved_12, offset: 0x53, size: 0x1, def value: None
  uint8_t Reserved_12;

  /// @brief Field Reserved_11, offset: 0x54, size: 0x1, def value: None
  uint8_t Reserved_11;

  /// @brief Field Reserved_10, offset: 0x55, size: 0x1, def value: None
  uint8_t Reserved_10;

  /// @brief Field Reserved_09, offset: 0x56, size: 0x1, def value: None
  uint8_t Reserved_09;

  /// @brief Field Reserved_08, offset: 0x57, size: 0x1, def value: None
  uint8_t Reserved_08;

  /// @brief Field Reserved_07, offset: 0x58, size: 0x1, def value: None
  uint8_t Reserved_07;

  /// @brief Field Reserved_06, offset: 0x59, size: 0x1, def value: None
  uint8_t Reserved_06;

  /// @brief Field Reserved_05, offset: 0x5a, size: 0x1, def value: None
  uint8_t Reserved_05;

  /// @brief Field Reserved_04, offset: 0x5b, size: 0x1, def value: None
  uint8_t Reserved_04;

  /// @brief Field Reserved_03, offset: 0x5c, size: 0x1, def value: None
  uint8_t Reserved_03;

  /// @brief Field Reserved_02, offset: 0x5d, size: 0x1, def value: None
  uint8_t Reserved_02;

  /// @brief Field Reserved_01, offset: 0x5e, size: 0x1, def value: None
  uint8_t Reserved_01;

  /// @brief Field Reserved_00, offset: 0x5f, size: 0x1, def value: None
  uint8_t Reserved_00;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       ConnectedControllers) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Buttons) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Touches) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       NearTouches) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       LIndexTrigger) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       RIndexTrigger) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       LHandTrigger) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       RHandTrigger) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       LThumbstick) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       RThumbstick) == 0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       LTouchpad) == 0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       RTouchpad) == 0x38,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       LBatteryPercentRemaining) == 0x40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       RBatteryPercentRemaining) == 0x41,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       LRecenterCount) == 0x42,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       RRecenterCount) == 0x43,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_27) == 0x44,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_26) == 0x45,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_25) == 0x46,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_24) == 0x47,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_23) == 0x48,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_22) == 0x49,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_21) == 0x4a,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_20) == 0x4b,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_19) == 0x4c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_18) == 0x4d,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_17) == 0x4e,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_16) == 0x4f,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_15) == 0x50,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_14) == 0x51,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_13) == 0x52,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_12) == 0x53,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_11) == 0x54,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_10) == 0x55,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_09) == 0x56,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_08) == 0x57,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_07) == 0x58,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_06) == 0x59,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_05) == 0x5a,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_04) == 0x5b,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_03) == 0x5c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_02) == 0x5d,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_01) == 0x5e,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState4,
                       Reserved_00) == 0x5f,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_ControllerState4, 0x60>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Vector2f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/ControllerState2
struct CORDL_TYPE OVRPlugin_ControllerState2 {
public:
  // Declarations
  /// @brief Method .ctor, addr 0x3ff4b8c, size 0x58, virtual false, abstract:
  /// false, final false
  inline void _ctor(::GlobalNamespace::OVRPlugin_ControllerState cs);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_ControllerState2();

  // Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t",
  // modifiers: "", def_value: None }, CppParam { name: "Buttons", ty:
  // "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Touches",
  // ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name:
  // "NearTouches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam {
  // name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value:
  // None }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "RHandTrigger", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "LThumbstick", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "RThumbstick", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "LTouchpad", ty: "::GlobalNamespace::OVRPlugin_Vector2f",
  // modifiers: "", def_value: None }, CppParam { name: "RTouchpad", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None }]
  constexpr OVRPlugin_ControllerState2(
      uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches,
      uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger,
      float_t LHandTrigger, float_t RHandTrigger,
      ::GlobalNamespace::OVRPlugin_Vector2f LThumbstick,
      ::GlobalNamespace::OVRPlugin_Vector2f RThumbstick,
      ::GlobalNamespace::OVRPlugin_Vector2f LTouchpad,
      ::GlobalNamespace::OVRPlugin_Vector2f RTouchpad) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8049};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x40};

  /// @brief Field ConnectedControllers, offset: 0x0, size: 0x4, def value: None
  uint32_t ConnectedControllers;

  /// @brief Field Buttons, offset: 0x4, size: 0x4, def value: None
  uint32_t Buttons;

  /// @brief Field Touches, offset: 0x8, size: 0x4, def value: None
  uint32_t Touches;

  /// @brief Field NearTouches, offset: 0xc, size: 0x4, def value: None
  uint32_t NearTouches;

  /// @brief Field LIndexTrigger, offset: 0x10, size: 0x4, def value: None
  float_t LIndexTrigger;

  /// @brief Field RIndexTrigger, offset: 0x14, size: 0x4, def value: None
  float_t RIndexTrigger;

  /// @brief Field LHandTrigger, offset: 0x18, size: 0x4, def value: None
  float_t LHandTrigger;

  /// @brief Field RHandTrigger, offset: 0x1c, size: 0x4, def value: None
  float_t RHandTrigger;

  /// @brief Field LThumbstick, offset: 0x20, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f LThumbstick;

  /// @brief Field RThumbstick, offset: 0x28, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f RThumbstick;

  /// @brief Field LTouchpad, offset: 0x30, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f LTouchpad;

  /// @brief Field RTouchpad, offset: 0x38, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f RTouchpad;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       ConnectedControllers) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       Buttons) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       Touches) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       NearTouches) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       LIndexTrigger) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       RIndexTrigger) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       LHandTrigger) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       RHandTrigger) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       LThumbstick) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       RThumbstick) == 0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       LTouchpad) == 0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState2,
                       RTouchpad) == 0x38,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_ControllerState2, 0x40>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Vector2f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/ControllerState
struct CORDL_TYPE OVRPlugin_ControllerState {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_ControllerState();

  // Ctor Parameters [CppParam { name: "ConnectedControllers", ty: "uint32_t",
  // modifiers: "", def_value: None }, CppParam { name: "Buttons", ty:
  // "uint32_t", modifiers: "", def_value: None }, CppParam { name: "Touches",
  // ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name:
  // "NearTouches", ty: "uint32_t", modifiers: "", def_value: None }, CppParam {
  // name: "LIndexTrigger", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "RIndexTrigger", ty: "float_t", modifiers: "", def_value:
  // None }, CppParam { name: "LHandTrigger", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "RHandTrigger", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "LThumbstick", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "RThumbstick", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None }]
  constexpr OVRPlugin_ControllerState(
      uint32_t ConnectedControllers, uint32_t Buttons, uint32_t Touches,
      uint32_t NearTouches, float_t LIndexTrigger, float_t RIndexTrigger,
      float_t LHandTrigger, float_t RHandTrigger,
      ::GlobalNamespace::OVRPlugin_Vector2f LThumbstick,
      ::GlobalNamespace::OVRPlugin_Vector2f RThumbstick) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8050};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x30};

  /// @brief Field ConnectedControllers, offset: 0x0, size: 0x4, def value: None
  uint32_t ConnectedControllers;

  /// @brief Field Buttons, offset: 0x4, size: 0x4, def value: None
  uint32_t Buttons;

  /// @brief Field Touches, offset: 0x8, size: 0x4, def value: None
  uint32_t Touches;

  /// @brief Field NearTouches, offset: 0xc, size: 0x4, def value: None
  uint32_t NearTouches;

  /// @brief Field LIndexTrigger, offset: 0x10, size: 0x4, def value: None
  float_t LIndexTrigger;

  /// @brief Field RIndexTrigger, offset: 0x14, size: 0x4, def value: None
  float_t RIndexTrigger;

  /// @brief Field LHandTrigger, offset: 0x18, size: 0x4, def value: None
  float_t LHandTrigger;

  /// @brief Field RHandTrigger, offset: 0x1c, size: 0x4, def value: None
  float_t RHandTrigger;

  /// @brief Field LThumbstick, offset: 0x20, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f LThumbstick;

  /// @brief Field RThumbstick, offset: 0x28, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f RThumbstick;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState,
                       ConnectedControllers) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState, Buttons) ==
                  0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState, Touches) ==
                  0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState,
                       NearTouches) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState,
                       LIndexTrigger) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState,
                       RIndexTrigger) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState,
                       LHandTrigger) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState,
                       RHandTrigger) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState,
                       LThumbstick) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_ControllerState,
                       RThumbstick) == 0x28,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_ControllerState, 0x30>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HapticsBuffer
struct CORDL_TYPE OVRPlugin_HapticsBuffer {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HapticsBuffer();

  // Ctor Parameters [CppParam { name: "Samples", ty: "::System::IntPtr",
  // modifiers: "", def_value: None }, CppParam { name: "SamplesCount", ty:
  // "int32_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_HapticsBuffer(::System::IntPtr Samples,
                                    int32_t SamplesCount) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8051};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field Samples, offset: 0x0, size: 0x8, def value: None
  ::System::IntPtr Samples;

  /// @brief Field SamplesCount, offset: 0x8, size: 0x4, def value: None
  int32_t SamplesCount;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsBuffer, Samples) ==
                  0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsBuffer,
                       SamplesCount) == 0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_HapticsBuffer, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HapticsState
struct CORDL_TYPE OVRPlugin_HapticsState {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HapticsState();

  // Ctor Parameters [CppParam { name: "SamplesAvailable", ty: "int32_t",
  // modifiers: "", def_value: None }, CppParam { name: "SamplesQueued", ty:
  // "int32_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_HapticsState(int32_t SamplesAvailable,
                                   int32_t SamplesQueued) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8052};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field SamplesAvailable, offset: 0x0, size: 0x4, def value: None
  int32_t SamplesAvailable;

  /// @brief Field SamplesQueued, offset: 0x4, size: 0x4, def value: None
  int32_t SamplesQueued;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsState,
                       SamplesAvailable) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsState,
                       SamplesQueued) == 0x4,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_HapticsState, 0x8>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HapticsDesc
struct CORDL_TYPE OVRPlugin_HapticsDesc {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HapticsDesc();

  // Ctor Parameters [CppParam { name: "SampleRateHz", ty: "int32_t", modifiers:
  // "", def_value: None }, CppParam { name: "SampleSizeInBytes", ty: "int32_t",
  // modifiers: "", def_value: None }, CppParam { name:
  // "MinimumSafeSamplesQueued", ty: "int32_t", modifiers: "", def_value: None
  // }, CppParam { name: "MinimumBufferSamplesCount", ty: "int32_t", modifiers:
  // "", def_value: None }, CppParam { name: "OptimalBufferSamplesCount", ty:
  // "int32_t", modifiers: "", def_value: None }, CppParam { name:
  // "MaximumBufferSamplesCount", ty: "int32_t", modifiers: "", def_value: None
  // }]
  constexpr OVRPlugin_HapticsDesc(int32_t SampleRateHz,
                                  int32_t SampleSizeInBytes,
                                  int32_t MinimumSafeSamplesQueued,
                                  int32_t MinimumBufferSamplesCount,
                                  int32_t OptimalBufferSamplesCount,
                                  int32_t MaximumBufferSamplesCount) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8053};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x18};

  /// @brief Field SampleRateHz, offset: 0x0, size: 0x4, def value: None
  int32_t SampleRateHz;

  /// @brief Field SampleSizeInBytes, offset: 0x4, size: 0x4, def value: None
  int32_t SampleSizeInBytes;

  /// @brief Field MinimumSafeSamplesQueued, offset: 0x8, size: 0x4, def value:
  /// None
  int32_t MinimumSafeSamplesQueued;

  /// @brief Field MinimumBufferSamplesCount, offset: 0xc, size: 0x4, def value:
  /// None
  int32_t MinimumBufferSamplesCount;

  /// @brief Field OptimalBufferSamplesCount, offset: 0x10, size: 0x4, def
  /// value: None
  int32_t OptimalBufferSamplesCount;

  /// @brief Field MaximumBufferSamplesCount, offset: 0x14, size: 0x4, def
  /// value: None
  int32_t MaximumBufferSamplesCount;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsDesc,
                       SampleRateHz) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsDesc,
                       SampleSizeInBytes) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsDesc,
                       MinimumSafeSamplesQueued) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsDesc,
                       MinimumBufferSamplesCount) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsDesc,
                       OptimalBufferSamplesCount) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsDesc,
                       MaximumBufferSamplesCount) == 0x14,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_HapticsDesc, 0x18>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HapticsAmplitudeEnvelopeVibration
struct CORDL_TYPE OVRPlugin_HapticsAmplitudeEnvelopeVibration {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HapticsAmplitudeEnvelopeVibration();

  // Ctor Parameters [CppParam { name: "Duration", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "AmplitudeCount", ty: "uint32_t",
  // modifiers: "", def_value: None }, CppParam { name: "Amplitudes", ty:
  // "::System::IntPtr", modifiers: "", def_value: None }]
  constexpr OVRPlugin_HapticsAmplitudeEnvelopeVibration(
      float_t Duration, uint32_t AmplitudeCount,
      ::System::IntPtr Amplitudes) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8054};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field Duration, offset: 0x0, size: 0x4, def value: None
  float_t Duration;

  /// @brief Field AmplitudeCount, offset: 0x4, size: 0x4, def value: None
  uint32_t AmplitudeCount;

  /// @brief Field Amplitudes, offset: 0x8, size: 0x8, def value: None
  ::System::IntPtr Amplitudes;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_HapticsAmplitudeEnvelopeVibration,
             Duration) == 0x0,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_HapticsAmplitudeEnvelopeVibration,
             AmplitudeCount) == 0x4,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_HapticsAmplitudeEnvelopeVibration,
             Amplitudes) == 0x8,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_HapticsAmplitudeEnvelopeVibration, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Bool, System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HapticsPcmVibration
struct CORDL_TYPE OVRPlugin_HapticsPcmVibration {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HapticsPcmVibration();

  // Ctor Parameters [CppParam { name: "BufferSize", ty: "uint32_t", modifiers:
  // "", def_value: None }, CppParam { name: "Buffer", ty: "::System::IntPtr",
  // modifiers: "", def_value: None }, CppParam { name: "SampleRateHz", ty:
  // "float_t", modifiers: "", def_value: None }, CppParam { name: "Append", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None },
  // CppParam { name: "SamplesConsumed", ty: "::System::IntPtr", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_HapticsPcmVibration(
      uint32_t BufferSize, ::System::IntPtr Buffer, float_t SampleRateHz,
      ::GlobalNamespace::OVRPlugin_Bool Append,
      ::System::IntPtr SamplesConsumed) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8055};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x20};

  /// @brief Field BufferSize, offset: 0x0, size: 0x4, def value: None
  uint32_t BufferSize;

  /// @brief Field Buffer, offset: 0x8, size: 0x8, def value: None
  ::System::IntPtr Buffer;

  /// @brief Field SampleRateHz, offset: 0x10, size: 0x4, def value: None
  float_t SampleRateHz;

  /// @brief Field Append, offset: 0x14, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool Append;

  /// @brief Field SamplesConsumed, offset: 0x18, size: 0x8, def value: None
  ::System::IntPtr SamplesConsumed;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsPcmVibration,
                       BufferSize) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsPcmVibration,
                       Buffer) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsPcmVibration,
                       SampleRateHz) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsPcmVibration,
                       Append) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsPcmVibration,
                       SamplesConsumed) == 0x18,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_HapticsPcmVibration, 0x20>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HapticsConstants
struct CORDL_TYPE OVRPlugin_HapticsConstants {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_HapticsConstants_Unwrapped
  enum struct __OVRPlugin_HapticsConstants_Unwrapped : int32_t {
    __E_MaxSamples = static_cast<int32_t>(0xfa0),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_HapticsConstants_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_HapticsConstants_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HapticsConstants();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_HapticsConstants(int32_t value__) noexcept;

  /// @brief Field MaxSamples value: I32(4000)
  static ::GlobalNamespace::OVRPlugin_HapticsConstants const MaxSamples;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8056};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_HapticsConstants,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_HapticsConstants, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/AppPerfFrameStats
struct CORDL_TYPE OVRPlugin_AppPerfFrameStats {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_AppPerfFrameStats();

  // Ctor Parameters [CppParam { name: "HmdVsyncIndex", ty: "int32_t",
  // modifiers: "", def_value: None }, CppParam { name: "AppFrameIndex", ty:
  // "int32_t", modifiers: "", def_value: None }, CppParam { name:
  // "AppDroppedFrameCount", ty: "int32_t", modifiers: "", def_value: None },
  // CppParam { name: "AppMotionToPhotonLatency", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "AppQueueAheadTime", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "AppCpuElapsedTime", ty:
  // "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "AppGpuElapsedTime", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "CompositorFrameIndex", ty: "int32_t", modifiers: "",
  // def_value: None }, CppParam { name: "CompositorDroppedFrameCount", ty:
  // "int32_t", modifiers: "", def_value: None }, CppParam { name:
  // "CompositorLatency", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "CompositorCpuElapsedTime", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "CompositorGpuElapsedTime", ty:
  // "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "CompositorCpuStartToGpuEndElapsedTime", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "CompositorGpuEndToVsyncElapsedTime",
  // ty: "float_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_AppPerfFrameStats(
      int32_t HmdVsyncIndex, int32_t AppFrameIndex,
      int32_t AppDroppedFrameCount, float_t AppMotionToPhotonLatency,
      float_t AppQueueAheadTime, float_t AppCpuElapsedTime,
      float_t AppGpuElapsedTime, int32_t CompositorFrameIndex,
      int32_t CompositorDroppedFrameCount, float_t CompositorLatency,
      float_t CompositorCpuElapsedTime, float_t CompositorGpuElapsedTime,
      float_t CompositorCpuStartToGpuEndElapsedTime,
      float_t CompositorGpuEndToVsyncElapsedTime) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8057};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x38};

  /// @brief Field HmdVsyncIndex, offset: 0x0, size: 0x4, def value: None
  int32_t HmdVsyncIndex;

  /// @brief Field AppFrameIndex, offset: 0x4, size: 0x4, def value: None
  int32_t AppFrameIndex;

  /// @brief Field AppDroppedFrameCount, offset: 0x8, size: 0x4, def value: None
  int32_t AppDroppedFrameCount;

  /// @brief Field AppMotionToPhotonLatency, offset: 0xc, size: 0x4, def value:
  /// None
  float_t AppMotionToPhotonLatency;

  /// @brief Field AppQueueAheadTime, offset: 0x10, size: 0x4, def value: None
  float_t AppQueueAheadTime;

  /// @brief Field AppCpuElapsedTime, offset: 0x14, size: 0x4, def value: None
  float_t AppCpuElapsedTime;

  /// @brief Field AppGpuElapsedTime, offset: 0x18, size: 0x4, def value: None
  float_t AppGpuElapsedTime;

  /// @brief Field CompositorFrameIndex, offset: 0x1c, size: 0x4, def value:
  /// None
  int32_t CompositorFrameIndex;

  /// @brief Field CompositorDroppedFrameCount, offset: 0x20, size: 0x4, def
  /// value: None
  int32_t CompositorDroppedFrameCount;

  /// @brief Field CompositorLatency, offset: 0x24, size: 0x4, def value: None
  float_t CompositorLatency;

  /// @brief Field CompositorCpuElapsedTime, offset: 0x28, size: 0x4, def value:
  /// None
  float_t CompositorCpuElapsedTime;

  /// @brief Field CompositorGpuElapsedTime, offset: 0x2c, size: 0x4, def value:
  /// None
  float_t CompositorGpuElapsedTime;

  /// @brief Field CompositorCpuStartToGpuEndElapsedTime, offset: 0x30, size:
  /// 0x4, def value: None
  float_t CompositorCpuStartToGpuEndElapsedTime;

  /// @brief Field CompositorGpuEndToVsyncElapsedTime, offset: 0x34, size: 0x4,
  /// def value: None
  float_t CompositorGpuEndToVsyncElapsedTime;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       HmdVsyncIndex) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       AppFrameIndex) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       AppDroppedFrameCount) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       AppMotionToPhotonLatency) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       AppQueueAheadTime) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       AppCpuElapsedTime) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       AppGpuElapsedTime) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       CompositorFrameIndex) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       CompositorDroppedFrameCount) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       CompositorLatency) == 0x24,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       CompositorCpuElapsedTime) == 0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       CompositorGpuElapsedTime) == 0x2c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       CompositorCpuStartToGpuEndElapsedTime) == 0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
                       CompositorGpuEndToVsyncElapsedTime) == 0x34,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_AppPerfFrameStats, 0x38>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Bool
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/AppPerfStats
struct CORDL_TYPE OVRPlugin_AppPerfStats {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_AppPerfStats();

  // Ctor Parameters [CppParam { name: "FrameStats", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_AppPerfFrameStats,::Array<::GlobalNamespace::OVRPlugin_AppPerfFrameStats>*>",
  // modifiers: "", def_value: None }, CppParam { name: "FrameStatsCount", ty:
  // "int32_t", modifiers: "", def_value: None }, CppParam { name:
  // "AnyFrameStatsDropped", ty: "::GlobalNamespace::OVRPlugin_Bool", modifiers:
  // "", def_value: None }, CppParam { name: "AdaptiveGpuPerformanceScale", ty:
  // "float_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_AppPerfStats(
      ::ArrayW<::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
               ::Array<::GlobalNamespace::OVRPlugin_AppPerfFrameStats> *>
          FrameStats,
      int32_t FrameStatsCount,
      ::GlobalNamespace::OVRPlugin_Bool AnyFrameStatsDropped,
      float_t AdaptiveGpuPerformanceScale) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8058};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x18};

  /// @brief Field FrameStats, offset: 0x0, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_AppPerfFrameStats,
           ::Array<::GlobalNamespace::OVRPlugin_AppPerfFrameStats> *>
      FrameStats;

  /// @brief Field FrameStatsCount, offset: 0x8, size: 0x4, def value: None
  int32_t FrameStatsCount;

  /// @brief Field AnyFrameStatsDropped, offset: 0xc, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool AnyFrameStatsDropped;

  /// @brief Field AdaptiveGpuPerformanceScale, offset: 0x10, size: 0x4, def
  /// value: None
  float_t AdaptiveGpuPerformanceScale;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfStats, FrameStats) ==
                  0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfStats,
                       FrameStatsCount) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfStats,
                       AnyFrameStatsDropped) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_AppPerfStats,
                       AdaptiveGpuPerformanceScale) == 0x10,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_AppPerfStats, 0x18>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.IEquatable`1<T>
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Sizei
struct CORDL_TYPE OVRPlugin_Sizei {
public:
  // Declarations
  /// @brief Field zero, offset 0xffffffff, size 0x8
  __declspec(property(
      get = getStaticF_zero,
      put = setStaticF_zero)) ::GlobalNamespace::OVRPlugin_Sizei zero;

  /// @brief Convert operator to
  /// "::System::IEquatable_1<::GlobalNamespace::OVRPlugin_Sizei>"
  constexpr
  operator ::System::IEquatable_1<::GlobalNamespace::OVRPlugin_Sizei> *();

  /// @brief Method Equals, addr 0x3ff4c0c, size 0x9c, virtual true, abstract:
  /// false, final false
  inline bool Equals(::System::Object *obj);

  /// @brief Method Equals, addr 0x3ff4be4, size 0x28, virtual true, abstract:
  /// false, final true
  inline bool Equals(::GlobalNamespace::OVRPlugin_Sizei other);

  /// @brief Method GetHashCode, addr 0x3ff4ca8, size 0x14, virtual true,
  /// abstract: false, final false
  inline int32_t GetHashCode();

  static inline ::GlobalNamespace::OVRPlugin_Sizei getStaticF_zero();

  /// @brief Convert to
  /// "::System::IEquatable_1<::GlobalNamespace::OVRPlugin_Sizei>"
  constexpr ::System::IEquatable_1<::GlobalNamespace::OVRPlugin_Sizei> *
  i___System__IEquatable_1___GlobalNamespace__OVRPlugin_Sizei_();

  static inline void setStaticF_zero(::GlobalNamespace::OVRPlugin_Sizei value);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Sizei();

  // Ctor Parameters [CppParam { name: "w", ty: "int32_t", modifiers: "",
  // def_value: None }, CppParam { name: "h", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Sizei(int32_t w, int32_t h) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8059};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field w, offset: 0x0, size: 0x4, def value: None
  int32_t w;

  /// @brief Field h, offset: 0x4, size: 0x4, def value: None
  int32_t h;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Sizei, w) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Sizei, h) == 0x4,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Sizei, 0x8>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Sizef
struct CORDL_TYPE OVRPlugin_Sizef {
public:
  // Declarations
  /// @brief Field zero, offset 0xffffffff, size 0x8
  __declspec(property(
      get = getStaticF_zero,
      put = setStaticF_zero)) ::GlobalNamespace::OVRPlugin_Sizef zero;

  static inline ::GlobalNamespace::OVRPlugin_Sizef getStaticF_zero();

  static inline void setStaticF_zero(::GlobalNamespace::OVRPlugin_Sizef value);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Sizef();

  // Ctor Parameters [CppParam { name: "w", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "h", ty: "float_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Sizef(float_t w, float_t h) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8060};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field w, offset: 0x0, size: 0x4, def value: None
  float_t w;

  /// @brief Field h, offset: 0x4, size: 0x4, def value: None
  float_t h;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Sizef, w) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Sizef, h) == 0x4,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Sizef, 0x8>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Size3f
struct CORDL_TYPE OVRPlugin_Size3f {
public:
  // Declarations
  /// @brief Field zero, offset 0xffffffff, size 0xc
  __declspec(property(
      get = getStaticF_zero,
      put = setStaticF_zero)) ::GlobalNamespace::OVRPlugin_Size3f zero;

  static inline ::GlobalNamespace::OVRPlugin_Size3f getStaticF_zero();

  static inline void setStaticF_zero(::GlobalNamespace::OVRPlugin_Size3f value);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Size3f();

  // Ctor Parameters [CppParam { name: "w", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "h", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "d", ty: "float_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Size3f(float_t w, float_t h, float_t d) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8061};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0xc};

  /// @brief Field w, offset: 0x0, size: 0x4, def value: None
  float_t w;

  /// @brief Field h, offset: 0x4, size: 0x4, def value: None
  float_t h;

  /// @brief Field d, offset: 0x8, size: 0x4, def value: None
  float_t d;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Size3f, w) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Size3f, h) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Size3f, d) == 0x8,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Size3f, 0xc>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Vector2i
struct CORDL_TYPE OVRPlugin_Vector2i {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Vector2i();

  // Ctor Parameters [CppParam { name: "x", ty: "int32_t", modifiers: "",
  // def_value: None }, CppParam { name: "y", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Vector2i(int32_t x, int32_t y) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8062};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field x, offset: 0x0, size: 0x4, def value: None
  int32_t x;

  /// @brief Field y, offset: 0x4, size: 0x4, def value: None
  int32_t y;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector2i, x) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Vector2i, y) == 0x4,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Vector2i, 0x8>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Sizei, OVRPlugin::Vector2i
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Recti
struct CORDL_TYPE OVRPlugin_Recti {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Recti();

  // Ctor Parameters [CppParam { name: "Pos", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2i", modifiers: "", def_value: None },
  // CppParam { name: "Size", ty: "::GlobalNamespace::OVRPlugin_Sizei",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_Recti(::GlobalNamespace::OVRPlugin_Vector2i Pos,
                            ::GlobalNamespace::OVRPlugin_Sizei Size) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8063};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field Pos, offset: 0x0, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2i Pos;

  /// @brief Field Size, offset: 0x8, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Sizei Size;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Recti, Pos) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Recti, Size) == 0x8,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Recti, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Sizef, OVRPlugin::Vector2f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Rectf
struct CORDL_TYPE OVRPlugin_Rectf {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Rectf();

  // Ctor Parameters [CppParam { name: "Pos", ty:
  // "::GlobalNamespace::OVRPlugin_Vector2f", modifiers: "", def_value: None },
  // CppParam { name: "Size", ty: "::GlobalNamespace::OVRPlugin_Sizef",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_Rectf(::GlobalNamespace::OVRPlugin_Vector2f Pos,
                            ::GlobalNamespace::OVRPlugin_Sizef Size) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8064};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field Pos, offset: 0x0, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Vector2f Pos;

  /// @brief Field Size, offset: 0x8, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Sizef Size;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Rectf, Pos) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Rectf, Size) == 0x8,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Rectf, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Size3f, OVRPlugin::Vector3f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Boundsf
struct CORDL_TYPE OVRPlugin_Boundsf {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Boundsf();

  // Ctor Parameters [CppParam { name: "Pos", ty:
  // "::GlobalNamespace::OVRPlugin_Vector3f", modifiers: "", def_value: None },
  // CppParam { name: "Size", ty: "::GlobalNamespace::OVRPlugin_Size3f",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_Boundsf(
      ::GlobalNamespace::OVRPlugin_Vector3f Pos,
      ::GlobalNamespace::OVRPlugin_Size3f Size) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8065};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x18};

  /// @brief Field Pos, offset: 0x0, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Vector3f Pos;

  /// @brief Field Size, offset: 0xc, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Size3f Size;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Boundsf, Pos) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Boundsf, Size) == 0xc,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Boundsf, 0x18>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Frustumf
struct CORDL_TYPE OVRPlugin_Frustumf {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Frustumf();

  // Ctor Parameters [CppParam { name: "zNear", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "zFar", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "fovX", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "fovY", ty: "float_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Frustumf(float_t zNear, float_t zFar, float_t fovX,
                               float_t fovY) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8066};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field zNear, offset: 0x0, size: 0x4, def value: None
  float_t zNear;

  /// @brief Field zFar, offset: 0x4, size: 0x4, def value: None
  float_t zFar;

  /// @brief Field fovX, offset: 0x8, size: 0x4, def value: None
  float_t fovX;

  /// @brief Field fovY, offset: 0xc, size: 0x4, def value: None
  float_t fovY;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Frustumf, zNear) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Frustumf, zFar) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Frustumf, fovX) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Frustumf, fovY) == 0xc,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_Frustumf, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Fovf
struct CORDL_TYPE OVRPlugin_Fovf {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Fovf();

  // Ctor Parameters [CppParam { name: "UpTan", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "DownTan", ty: "float_t", modifiers:
  // "", def_value: None }, CppParam { name: "LeftTan", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "RightTan", ty:
  // "float_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_Fovf(float_t UpTan, float_t DownTan, float_t LeftTan,
                           float_t RightTan) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8072};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field UpTan, offset: 0x0, size: 0x4, def value: None
  float_t UpTan;

  /// @brief Field DownTan, offset: 0x4, size: 0x4, def value: None
  float_t DownTan;

  /// @brief Field LeftTan, offset: 0x8, size: 0x4, def value: None
  float_t LeftTan;

  /// @brief Field RightTan, offset: 0xc, size: 0x4, def value: None
  float_t RightTan;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Fovf, UpTan) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Fovf, DownTan) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Fovf, LeftTan) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Fovf, RightTan) == 0xc,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Fovf, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Fovf
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Frustumf2
struct CORDL_TYPE OVRPlugin_Frustumf2 {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Frustumf2();

  // Ctor Parameters [CppParam { name: "zNear", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "zFar", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "Fov", ty:
  // "::GlobalNamespace::OVRPlugin_Fovf", modifiers: "", def_value: None }]
  constexpr OVRPlugin_Frustumf2(float_t zNear, float_t zFar,
                                ::GlobalNamespace::OVRPlugin_Fovf Fov) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8067};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x18};

  /// @brief Field zNear, offset: 0x0, size: 0x4, def value: None
  float_t zNear;

  /// @brief Field zFar, offset: 0x4, size: 0x4, def value: None
  float_t zFar;

  /// @brief Field Fov, offset: 0x8, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Fovf Fov;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Frustumf2, zNear) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Frustumf2, zFar) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Frustumf2, Fov) == 0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_Frustumf2, 0x18>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/BoundaryType
struct CORDL_TYPE OVRPlugin_BoundaryType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_BoundaryType_Unwrapped
  enum struct __OVRPlugin_BoundaryType_Unwrapped : int32_t {
    __E_OuterBoundary = static_cast<int32_t>(0x1),
    __E_PlayArea = static_cast<int32_t>(0x100),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_BoundaryType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_BoundaryType_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_BoundaryType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_BoundaryType(int32_t value__) noexcept;

  /// @brief Field OuterBoundary value: I32(1)
  static ::GlobalNamespace::OVRPlugin_BoundaryType const OuterBoundary;

  /// @brief Field PlayArea value: I32(256)
  static ::GlobalNamespace::OVRPlugin_BoundaryType const PlayArea;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8068};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoundaryType, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_BoundaryType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Bool, OVRPlugin::Vector3f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/BoundaryTestResult
struct CORDL_TYPE OVRPlugin_BoundaryTestResult {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_BoundaryTestResult();

  // Ctor Parameters [CppParam { name: "IsTriggering", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None },
  // CppParam { name: "ClosestDistance", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ClosestPoint", ty:
  // "::GlobalNamespace::OVRPlugin_Vector3f", modifiers: "", def_value: None },
  // CppParam { name: "ClosestPointNormal", ty:
  // "::GlobalNamespace::OVRPlugin_Vector3f", modifiers: "", def_value: None }]
  constexpr OVRPlugin_BoundaryTestResult(
      ::GlobalNamespace::OVRPlugin_Bool IsTriggering, float_t ClosestDistance,
      ::GlobalNamespace::OVRPlugin_Vector3f ClosestPoint,
      ::GlobalNamespace::OVRPlugin_Vector3f ClosestPointNormal) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8069};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x20};

  /// @brief Field IsTriggering, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool IsTriggering;

  /// @brief Field ClosestDistance, offset: 0x4, size: 0x4, def value: None
  float_t ClosestDistance;

  /// @brief Field ClosestPoint, offset: 0x8, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Vector3f ClosestPoint;

  /// @brief Field ClosestPointNormal, offset: 0x14, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Vector3f ClosestPointNormal;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoundaryTestResult,
                       IsTriggering) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoundaryTestResult,
                       ClosestDistance) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoundaryTestResult,
                       ClosestPoint) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoundaryTestResult,
                       ClosestPointNormal) == 0x14,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_BoundaryTestResult, 0x20>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::BoundaryType
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/BoundaryGeometry
struct CORDL_TYPE OVRPlugin_BoundaryGeometry {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_BoundaryGeometry();

  // Ctor Parameters [CppParam { name: "BoundaryType", ty:
  // "::GlobalNamespace::OVRPlugin_BoundaryType", modifiers: "", def_value: None
  // }, CppParam { name: "Points", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,::Array<::GlobalNamespace::OVRPlugin_Vector3f>*>",
  // modifiers: "", def_value: None }, CppParam { name: "PointsCount", ty:
  // "int32_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_BoundaryGeometry(
      ::GlobalNamespace::OVRPlugin_BoundaryType BoundaryType,
      ::ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
               ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *>
          Points,
      int32_t PointsCount) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8070};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x18};

  /// @brief Field BoundaryType, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_BoundaryType BoundaryType;

  /// @brief Field Points, offset: 0x8, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
           ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *>
      Points;

  /// @brief Field PointsCount, offset: 0x10, size: 0x4, def value: None
  int32_t PointsCount;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoundaryGeometry,
                       BoundaryType) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoundaryGeometry, Points) ==
                  0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoundaryGeometry,
                       PointsCount) == 0x10,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_BoundaryGeometry, 0x18>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Colorf
struct CORDL_TYPE OVRPlugin_Colorf {
public:
  // Declarations
  /// @brief Method ToString, addr 0x3ff4d98, size 0x1e4, virtual true,
  /// abstract: false, final false
  inline ::StringW ToString();

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Colorf();

  // Ctor Parameters [CppParam { name: "r", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "g", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "b", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "a", ty: "float_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Colorf(float_t r, float_t g, float_t b,
                             float_t a) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8071};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field r, offset: 0x0, size: 0x4, def value: None
  float_t r;

  /// @brief Field g, offset: 0x4, size: 0x4, def value: None
  float_t g;

  /// @brief Field b, offset: 0x8, size: 0x4, def value: None
  float_t b;

  /// @brief Field a, offset: 0xc, size: 0x4, def value: None
  float_t a;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Colorf, r) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Colorf, g) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Colorf, b) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Colorf, a) == 0xc,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Colorf, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Bool, OVRPlugin::Fovf, OVRPlugin::Sizei
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/CameraIntrinsics
struct CORDL_TYPE OVRPlugin_CameraIntrinsics {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_CameraIntrinsics();

  // Ctor Parameters [CppParam { name: "IsValid", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None },
  // CppParam { name: "LastChangedTimeSeconds", ty: "double_t", modifiers: "",
  // def_value: None }, CppParam { name: "FOVPort", ty:
  // "::GlobalNamespace::OVRPlugin_Fovf", modifiers: "", def_value: None },
  // CppParam { name: "VirtualNearPlaneDistanceMeters", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name:
  // "VirtualFarPlaneDistanceMeters", ty: "float_t", modifiers: "", def_value:
  // None }, CppParam { name: "ImageSensorPixelResolution", ty:
  // "::GlobalNamespace::OVRPlugin_Sizei", modifiers: "", def_value: None }]
  constexpr OVRPlugin_CameraIntrinsics(
      ::GlobalNamespace::OVRPlugin_Bool IsValid,
      double_t LastChangedTimeSeconds,
      ::GlobalNamespace::OVRPlugin_Fovf FOVPort,
      float_t VirtualNearPlaneDistanceMeters,
      float_t VirtualFarPlaneDistanceMeters,
      ::GlobalNamespace::OVRPlugin_Sizei ImageSensorPixelResolution) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8073};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x30};

  /// @brief Field IsValid, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool IsValid;

  /// @brief Field LastChangedTimeSeconds, offset: 0x8, size: 0x8, def value:
  /// None
  double_t LastChangedTimeSeconds;

  /// @brief Field FOVPort, offset: 0x10, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Fovf FOVPort;

  /// @brief Field VirtualNearPlaneDistanceMeters, offset: 0x20, size: 0x4, def
  /// value: None
  float_t VirtualNearPlaneDistanceMeters;

  /// @brief Field VirtualFarPlaneDistanceMeters, offset: 0x24, size: 0x4, def
  /// value: None
  float_t VirtualFarPlaneDistanceMeters;

  /// @brief Field ImageSensorPixelResolution, offset: 0x28, size: 0x8, def
  /// value: None
  ::GlobalNamespace::OVRPlugin_Sizei ImageSensorPixelResolution;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraIntrinsics,
                       IsValid) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraIntrinsics,
                       LastChangedTimeSeconds) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraIntrinsics,
                       FOVPort) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraIntrinsics,
                       VirtualNearPlaneDistanceMeters) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraIntrinsics,
                       VirtualFarPlaneDistanceMeters) == 0x24,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraIntrinsics,
                       ImageSensorPixelResolution) == 0x28,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_CameraIntrinsics, 0x30>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Bool, OVRPlugin::CameraStatus, OVRPlugin::Node,
// OVRPlugin::Posef
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/CameraExtrinsics
struct CORDL_TYPE OVRPlugin_CameraExtrinsics {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_CameraExtrinsics();

  // Ctor Parameters [CppParam { name: "IsValid", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None },
  // CppParam { name: "LastChangedTimeSeconds", ty: "double_t", modifiers: "",
  // def_value: None }, CppParam { name: "CameraStatusData", ty:
  // "::GlobalNamespace::OVRPlugin_CameraStatus", modifiers: "", def_value: None
  // }, CppParam { name: "AttachedToNode", ty:
  // "::GlobalNamespace::OVRPlugin_Node", modifiers: "", def_value: None },
  // CppParam { name: "RelativePose", ty: "::GlobalNamespace::OVRPlugin_Posef",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_CameraExtrinsics(
      ::GlobalNamespace::OVRPlugin_Bool IsValid,
      double_t LastChangedTimeSeconds,
      ::GlobalNamespace::OVRPlugin_CameraStatus CameraStatusData,
      ::GlobalNamespace::OVRPlugin_Node AttachedToNode,
      ::GlobalNamespace::OVRPlugin_Posef RelativePose) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8074};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x38};

  /// @brief Field IsValid, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool IsValid;

  /// @brief Field LastChangedTimeSeconds, offset: 0x8, size: 0x8, def value:
  /// None
  double_t LastChangedTimeSeconds;

  /// @brief Field CameraStatusData, offset: 0x10, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_CameraStatus CameraStatusData;

  /// @brief Field AttachedToNode, offset: 0x14, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Node AttachedToNode;

  /// @brief Field RelativePose, offset: 0x18, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef RelativePose;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraExtrinsics,
                       IsValid) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraExtrinsics,
                       LastChangedTimeSeconds) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraExtrinsics,
                       CameraStatusData) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraExtrinsics,
                       AttachedToNode) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_CameraExtrinsics,
                       RelativePose) == 0x18,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_CameraExtrinsics, 0x38>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/LayerLayout
struct CORDL_TYPE OVRPlugin_LayerLayout {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_LayerLayout_Unwrapped
  enum struct __OVRPlugin_LayerLayout_Unwrapped : int32_t {
    __E_Stereo = static_cast<int32_t>(0x0),
    __E_Mono = static_cast<int32_t>(0x1),
    __E_DoubleWide = static_cast<int32_t>(0x2),
    __E_Array = static_cast<int32_t>(0x3),
    __E_EnumSize = static_cast<int32_t>(0xf),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_LayerLayout_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_LayerLayout_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_LayerLayout();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_LayerLayout(int32_t value__) noexcept;

  /// @brief Field Array value: I32(3)
  static ::GlobalNamespace::OVRPlugin_LayerLayout const Array;

  /// @brief Field DoubleWide value: I32(2)
  static ::GlobalNamespace::OVRPlugin_LayerLayout const DoubleWide;

  /// @brief Field EnumSize value: I32(15)
  static ::GlobalNamespace::OVRPlugin_LayerLayout const EnumSize;

  /// @brief Field Mono value: I32(1)
  static ::GlobalNamespace::OVRPlugin_LayerLayout const Mono;

  /// @brief Field Stereo value: I32(0)
  static ::GlobalNamespace::OVRPlugin_LayerLayout const Stereo;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8075};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerLayout, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_LayerLayout, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/LayerFlags
struct CORDL_TYPE OVRPlugin_LayerFlags {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_LayerFlags_Unwrapped
  enum struct __OVRPlugin_LayerFlags_Unwrapped : int32_t {
    __E_Static = static_cast<int32_t>(0x1),
    __E_LoadingScreen = static_cast<int32_t>(0x2),
    __E_SymmetricFov = static_cast<int32_t>(0x4),
    __E_TextureOriginAtBottomLeft = static_cast<int32_t>(0x8),
    __E_ChromaticAberrationCorrection = static_cast<int32_t>(0x10),
    __E_NoAllocation = static_cast<int32_t>(0x20),
    __E_ProtectedContent = static_cast<int32_t>(0x40),
    __E_AndroidSurfaceSwapChain = static_cast<int32_t>(0x80),
    __E_BicubicFiltering = static_cast<int32_t>(0x4000),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_LayerFlags_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_LayerFlags_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_LayerFlags();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_LayerFlags(int32_t value__) noexcept;

  /// @brief Field AndroidSurfaceSwapChain value: I32(128)
  static ::GlobalNamespace::OVRPlugin_LayerFlags const AndroidSurfaceSwapChain;

  /// @brief Field BicubicFiltering value: I32(16384)
  static ::GlobalNamespace::OVRPlugin_LayerFlags const BicubicFiltering;

  /// @brief Field ChromaticAberrationCorrection value: I32(16)
  static ::GlobalNamespace::OVRPlugin_LayerFlags const
      ChromaticAberrationCorrection;

  /// @brief Field LoadingScreen value: I32(2)
  static ::GlobalNamespace::OVRPlugin_LayerFlags const LoadingScreen;

  /// @brief Field NoAllocation value: I32(32)
  static ::GlobalNamespace::OVRPlugin_LayerFlags const NoAllocation;

  /// @brief Field ProtectedContent value: I32(64)
  static ::GlobalNamespace::OVRPlugin_LayerFlags const ProtectedContent;

  /// @brief Field Static value: I32(1)
  static ::GlobalNamespace::OVRPlugin_LayerFlags const Static;

  /// @brief Field SymmetricFov value: I32(4)
  static ::GlobalNamespace::OVRPlugin_LayerFlags const SymmetricFov;

  /// @brief Field TextureOriginAtBottomLeft value: I32(8)
  static ::GlobalNamespace::OVRPlugin_LayerFlags const
      TextureOriginAtBottomLeft;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8076};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerFlags, value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_LayerFlags, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::EyeTextureFormat, OVRPlugin::LayerLayout,
// OVRPlugin::OverlayShape, OVRPlugin::Sizei
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/LayerDesc
struct CORDL_TYPE OVRPlugin_LayerDesc {
public:
  // Declarations
  /// @brief Method ToString, addr 0x3ff4f7c, size 0x250, virtual true,
  /// abstract: false, final false
  inline ::StringW ToString();

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_LayerDesc();

  // Ctor Parameters [CppParam { name: "Shape", ty:
  // "::GlobalNamespace::OVRPlugin_OverlayShape", modifiers: "", def_value: None
  // }, CppParam { name: "Layout", ty:
  // "::GlobalNamespace::OVRPlugin_LayerLayout", modifiers: "", def_value: None
  // }, CppParam { name: "TextureSize", ty:
  // "::GlobalNamespace::OVRPlugin_Sizei", modifiers: "", def_value: None },
  // CppParam { name: "MipLevels", ty: "int32_t", modifiers: "", def_value: None
  // }, CppParam { name: "SampleCount", ty: "int32_t", modifiers: "", def_value:
  // None }, CppParam { name: "Format", ty:
  // "::GlobalNamespace::OVRPlugin_EyeTextureFormat", modifiers: "", def_value:
  // None }, CppParam { name: "LayerFlags", ty: "int32_t", modifiers: "",
  // def_value: None }, CppParam { name: "Fov", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_Fovf,::Array<::GlobalNamespace::OVRPlugin_Fovf>*>",
  // modifiers: "", def_value: None }, CppParam { name: "VisibleRect", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_Rectf,::Array<::GlobalNamespace::OVRPlugin_Rectf>*>",
  // modifiers: "", def_value: None }, CppParam { name: "MaxViewportSize", ty:
  // "::GlobalNamespace::OVRPlugin_Sizei", modifiers: "", def_value: None },
  // CppParam { name: "DepthFormat", ty:
  // "::GlobalNamespace::OVRPlugin_EyeTextureFormat", modifiers: "", def_value:
  // None }, CppParam { name: "MotionVectorFormat", ty:
  // "::GlobalNamespace::OVRPlugin_EyeTextureFormat", modifiers: "", def_value:
  // None }, CppParam { name: "MotionVectorDepthFormat", ty:
  // "::GlobalNamespace::OVRPlugin_EyeTextureFormat", modifiers: "", def_value:
  // None }, CppParam { name: "MotionVectorTextureSize", ty:
  // "::GlobalNamespace::OVRPlugin_Sizei", modifiers: "", def_value: None }]
  constexpr OVRPlugin_LayerDesc(
      ::GlobalNamespace::OVRPlugin_OverlayShape Shape,
      ::GlobalNamespace::OVRPlugin_LayerLayout Layout,
      ::GlobalNamespace::OVRPlugin_Sizei TextureSize, int32_t MipLevels,
      int32_t SampleCount, ::GlobalNamespace::OVRPlugin_EyeTextureFormat Format,
      int32_t LayerFlags,
      ::ArrayW<::GlobalNamespace::OVRPlugin_Fovf,
               ::Array<::GlobalNamespace::OVRPlugin_Fovf> *>
          Fov,
      ::ArrayW<::GlobalNamespace::OVRPlugin_Rectf,
               ::Array<::GlobalNamespace::OVRPlugin_Rectf> *>
          VisibleRect,
      ::GlobalNamespace::OVRPlugin_Sizei MaxViewportSize,
      ::GlobalNamespace::OVRPlugin_EyeTextureFormat DepthFormat,
      ::GlobalNamespace::OVRPlugin_EyeTextureFormat MotionVectorFormat,
      ::GlobalNamespace::OVRPlugin_EyeTextureFormat MotionVectorDepthFormat,
      ::GlobalNamespace::OVRPlugin_Sizei MotionVectorTextureSize) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8077};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x50};

  /// @brief Field Shape, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_OverlayShape Shape;

  /// @brief Field Layout, offset: 0x4, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_LayerLayout Layout;

  /// @brief Field TextureSize, offset: 0x8, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Sizei TextureSize;

  /// @brief Field MipLevels, offset: 0x10, size: 0x4, def value: None
  int32_t MipLevels;

  /// @brief Field SampleCount, offset: 0x14, size: 0x4, def value: None
  int32_t SampleCount;

  /// @brief Field Format, offset: 0x18, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_EyeTextureFormat Format;

  /// @brief Field LayerFlags, offset: 0x1c, size: 0x4, def value: None
  int32_t LayerFlags;

  /// @brief Field Fov, offset: 0x20, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Fovf,
           ::Array<::GlobalNamespace::OVRPlugin_Fovf> *>
      Fov;

  /// @brief Field VisibleRect, offset: 0x28, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Rectf,
           ::Array<::GlobalNamespace::OVRPlugin_Rectf> *>
      VisibleRect;

  /// @brief Field MaxViewportSize, offset: 0x30, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Sizei MaxViewportSize;

  /// @brief Field DepthFormat, offset: 0x38, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_EyeTextureFormat DepthFormat;

  /// @brief Field MotionVectorFormat, offset: 0x3c, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_EyeTextureFormat MotionVectorFormat;

  /// @brief Field MotionVectorDepthFormat, offset: 0x40, size: 0x4, def value:
  /// None
  ::GlobalNamespace::OVRPlugin_EyeTextureFormat MotionVectorDepthFormat;

  /// @brief Field MotionVectorTextureSize, offset: 0x44, size: 0x8, def value:
  /// None
  ::GlobalNamespace::OVRPlugin_Sizei MotionVectorTextureSize;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc, Shape) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc, Layout) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc, TextureSize) ==
                  0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc, MipLevels) ==
                  0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc, SampleCount) ==
                  0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc, Format) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc, LayerFlags) ==
                  0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc, Fov) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc, VisibleRect) ==
                  0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc,
                       MaxViewportSize) == 0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc, DepthFormat) ==
                  0x38,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc,
                       MotionVectorFormat) == 0x3c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc,
                       MotionVectorDepthFormat) == 0x40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDesc,
                       MotionVectorTextureSize) == 0x44,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_LayerDesc, 0x50>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::EyeTextureFormat, OVRPlugin::Fovf,
// OVRPlugin::LayerLayout, OVRPlugin::OverlayShape, OVRPlugin::Rectf,
// OVRPlugin::Sizei
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/LayerDescInternal
struct CORDL_TYPE OVRPlugin_LayerDescInternal {
public:
  // Declarations
  /// @brief Method ToLayerDesc, addr 0x3ff52a8, size 0x14c, virtual false,
  /// abstract: false, final false
  inline ::GlobalNamespace::OVRPlugin_LayerDesc ToLayerDesc();

  /// @brief Method .ctor, addr 0x3ff51cc, size 0xdc, virtual false, abstract:
  /// false, final false
  inline void _ctor(::GlobalNamespace::OVRPlugin_LayerDesc layerDesc);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_LayerDescInternal();

  // Ctor Parameters [CppParam { name: "Shape", ty:
  // "::GlobalNamespace::OVRPlugin_OverlayShape", modifiers: "", def_value: None
  // }, CppParam { name: "Layout", ty:
  // "::GlobalNamespace::OVRPlugin_LayerLayout", modifiers: "", def_value: None
  // }, CppParam { name: "TextureSize", ty:
  // "::GlobalNamespace::OVRPlugin_Sizei", modifiers: "", def_value: None },
  // CppParam { name: "MipLevels", ty: "int32_t", modifiers: "", def_value: None
  // }, CppParam { name: "SampleCount", ty: "int32_t", modifiers: "", def_value:
  // None }, CppParam { name: "Format", ty:
  // "::GlobalNamespace::OVRPlugin_EyeTextureFormat", modifiers: "", def_value:
  // None }, CppParam { name: "LayerFlags", ty: "int32_t", modifiers: "",
  // def_value: None }, CppParam { name: "Fov0", ty:
  // "::GlobalNamespace::OVRPlugin_Fovf", modifiers: "", def_value: None },
  // CppParam { name: "Fov1", ty: "::GlobalNamespace::OVRPlugin_Fovf",
  // modifiers: "", def_value: None }, CppParam { name: "VisibleRect0", ty:
  // "::GlobalNamespace::OVRPlugin_Rectf", modifiers: "", def_value: None },
  // CppParam { name: "VisibleRect1", ty: "::GlobalNamespace::OVRPlugin_Rectf",
  // modifiers: "", def_value: None }, CppParam { name: "MaxViewportSize", ty:
  // "::GlobalNamespace::OVRPlugin_Sizei", modifiers: "", def_value: None },
  // CppParam { name: "DepthFormat", ty:
  // "::GlobalNamespace::OVRPlugin_EyeTextureFormat", modifiers: "", def_value:
  // None }, CppParam { name: "MotionVectorFormat", ty:
  // "::GlobalNamespace::OVRPlugin_EyeTextureFormat", modifiers: "", def_value:
  // None }, CppParam { name: "MotionVectorDepthFormat", ty:
  // "::GlobalNamespace::OVRPlugin_EyeTextureFormat", modifiers: "", def_value:
  // None }, CppParam { name: "MotionVectorTextureSize", ty:
  // "::GlobalNamespace::OVRPlugin_Sizei", modifiers: "", def_value: None }]
  constexpr OVRPlugin_LayerDescInternal(
      ::GlobalNamespace::OVRPlugin_OverlayShape Shape,
      ::GlobalNamespace::OVRPlugin_LayerLayout Layout,
      ::GlobalNamespace::OVRPlugin_Sizei TextureSize, int32_t MipLevels,
      int32_t SampleCount, ::GlobalNamespace::OVRPlugin_EyeTextureFormat Format,
      int32_t LayerFlags, ::GlobalNamespace::OVRPlugin_Fovf Fov0,
      ::GlobalNamespace::OVRPlugin_Fovf Fov1,
      ::GlobalNamespace::OVRPlugin_Rectf VisibleRect0,
      ::GlobalNamespace::OVRPlugin_Rectf VisibleRect1,
      ::GlobalNamespace::OVRPlugin_Sizei MaxViewportSize,
      ::GlobalNamespace::OVRPlugin_EyeTextureFormat DepthFormat,
      ::GlobalNamespace::OVRPlugin_EyeTextureFormat MotionVectorFormat,
      ::GlobalNamespace::OVRPlugin_EyeTextureFormat MotionVectorDepthFormat,
      ::GlobalNamespace::OVRPlugin_Sizei MotionVectorTextureSize) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8078};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x7c};

  /// @brief Field Shape, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_OverlayShape Shape;

  /// @brief Field Layout, offset: 0x4, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_LayerLayout Layout;

  /// @brief Field TextureSize, offset: 0x8, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Sizei TextureSize;

  /// @brief Field MipLevels, offset: 0x10, size: 0x4, def value: None
  int32_t MipLevels;

  /// @brief Field SampleCount, offset: 0x14, size: 0x4, def value: None
  int32_t SampleCount;

  /// @brief Field Format, offset: 0x18, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_EyeTextureFormat Format;

  /// @brief Field LayerFlags, offset: 0x1c, size: 0x4, def value: None
  int32_t LayerFlags;

  /// @brief Field Fov0, offset: 0x20, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Fovf Fov0;

  /// @brief Field Fov1, offset: 0x30, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Fovf Fov1;

  /// @brief Field VisibleRect0, offset: 0x40, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Rectf VisibleRect0;

  /// @brief Field VisibleRect1, offset: 0x50, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Rectf VisibleRect1;

  /// @brief Field MaxViewportSize, offset: 0x60, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_Sizei MaxViewportSize;

  /// @brief Field DepthFormat, offset: 0x68, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_EyeTextureFormat DepthFormat;

  /// @brief Field MotionVectorFormat, offset: 0x6c, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_EyeTextureFormat MotionVectorFormat;

  /// @brief Field MotionVectorDepthFormat, offset: 0x70, size: 0x4, def value:
  /// None
  ::GlobalNamespace::OVRPlugin_EyeTextureFormat MotionVectorDepthFormat;

  /// @brief Field MotionVectorTextureSize, offset: 0x74, size: 0x8, def value:
  /// None
  ::GlobalNamespace::OVRPlugin_Sizei MotionVectorTextureSize;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal, Shape) ==
                  0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       Layout) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       TextureSize) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       MipLevels) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       SampleCount) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       Format) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       LayerFlags) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal, Fov0) ==
                  0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal, Fov1) ==
                  0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       VisibleRect0) == 0x40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       VisibleRect1) == 0x50,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       MaxViewportSize) == 0x60,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       DepthFormat) == 0x68,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       MotionVectorFormat) == 0x6c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       MotionVectorDepthFormat) == 0x70,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerDescInternal,
                       MotionVectorTextureSize) == 0x74,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_LayerDescInternal, 0x7c>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/BlendFactor
struct CORDL_TYPE OVRPlugin_BlendFactor {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_BlendFactor_Unwrapped
  enum struct __OVRPlugin_BlendFactor_Unwrapped : int32_t {
    __E_Zero = static_cast<int32_t>(0x0),
    __E_One = static_cast<int32_t>(0x1),
    __E_SrcAlpha = static_cast<int32_t>(0x2),
    __E_OneMinusSrcAlpha = static_cast<int32_t>(0x3),
    __E_DstAlpha = static_cast<int32_t>(0x4),
    __E_OneMinusDstAlpha = static_cast<int32_t>(0x5),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_BlendFactor_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_BlendFactor_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_BlendFactor();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_BlendFactor(int32_t value__) noexcept;

  /// @brief Field DstAlpha value: I32(4)
  static ::GlobalNamespace::OVRPlugin_BlendFactor const DstAlpha;

  /// @brief Field One value: I32(1)
  static ::GlobalNamespace::OVRPlugin_BlendFactor const One;

  /// @brief Field OneMinusDstAlpha value: I32(5)
  static ::GlobalNamespace::OVRPlugin_BlendFactor const OneMinusDstAlpha;

  /// @brief Field OneMinusSrcAlpha value: I32(3)
  static ::GlobalNamespace::OVRPlugin_BlendFactor const OneMinusSrcAlpha;

  /// @brief Field SrcAlpha value: I32(2)
  static ::GlobalNamespace::OVRPlugin_BlendFactor const SrcAlpha;

  /// @brief Field Zero value: I32(0)
  static ::GlobalNamespace::OVRPlugin_BlendFactor const Zero;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8079};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_BlendFactor, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_BlendFactor, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Posef
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/LayerSubmit
struct CORDL_TYPE OVRPlugin_LayerSubmit {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_LayerSubmit();

  // Ctor Parameters [CppParam { name: "LayerId", ty: "int32_t", modifiers: "",
  // def_value: None }, CppParam { name: "TextureStage", ty: "int32_t",
  // modifiers: "", def_value: None }, CppParam { name: "ViewportRect", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_Recti,::Array<::GlobalNamespace::OVRPlugin_Recti>*>",
  // modifiers: "", def_value: None }, CppParam { name: "Pose", ty:
  // "::GlobalNamespace::OVRPlugin_Posef", modifiers: "", def_value: None },
  // CppParam { name: "LayerSubmitFlags", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_LayerSubmit(
      int32_t LayerId, int32_t TextureStage,
      ::ArrayW<::GlobalNamespace::OVRPlugin_Recti,
               ::Array<::GlobalNamespace::OVRPlugin_Recti> *>
          ViewportRect,
      ::GlobalNamespace::OVRPlugin_Posef Pose,
      int32_t LayerSubmitFlags) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8080};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x30};

  /// @brief Field LayerId, offset: 0x0, size: 0x4, def value: None
  int32_t LayerId;

  /// @brief Field TextureStage, offset: 0x4, size: 0x4, def value: None
  int32_t TextureStage;

  /// @brief Field ViewportRect, offset: 0x8, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Recti,
           ::Array<::GlobalNamespace::OVRPlugin_Recti> *>
      ViewportRect;

  /// @brief Field Pose, offset: 0x10, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef Pose;

  /// @brief Field LayerSubmitFlags, offset: 0x2c, size: 0x4, def value: None
  int32_t LayerSubmitFlags;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerSubmit, LayerId) ==
                  0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerSubmit,
                       TextureStage) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerSubmit,
                       ViewportRect) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerSubmit, Pose) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_LayerSubmit,
                       LayerSubmitFlags) == 0x2c,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_LayerSubmit, 0x30>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/TrackingConfidence
struct CORDL_TYPE OVRPlugin_TrackingConfidence {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_TrackingConfidence_Unwrapped
  enum struct __OVRPlugin_TrackingConfidence_Unwrapped : int32_t {
    __E_Low = static_cast<int32_t>(0x0),
    __E_High = static_cast<int32_t>(0x3f800000),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_TrackingConfidence_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_TrackingConfidence_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_TrackingConfidence();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_TrackingConfidence(int32_t value__) noexcept;

  /// @brief Field High value: I32(1065353216)
  static ::GlobalNamespace::OVRPlugin_TrackingConfidence const High;

  /// @brief Field Low value: I32(0)
  static ::GlobalNamespace::OVRPlugin_TrackingConfidence const Low;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8081};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_TrackingConfidence,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_TrackingConfidence, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Hand
struct CORDL_TYPE OVRPlugin_Hand {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_Hand_Unwrapped
  enum struct __OVRPlugin_Hand_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0xffffffff),
    __E_HandLeft = static_cast<int32_t>(0x0),
    __E_HandRight = static_cast<int32_t>(0x1),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_Hand_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_Hand_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Hand();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_Hand(int32_t value__) noexcept;

  /// @brief Field HandLeft value: I32(0)
  static ::GlobalNamespace::OVRPlugin_Hand const HandLeft;

  /// @brief Field HandRight value: I32(1)
  static ::GlobalNamespace::OVRPlugin_Hand const HandRight;

  /// @brief Field None value: I32(-1)
  static ::GlobalNamespace::OVRPlugin_Hand const None;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8082};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Hand, value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Hand, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HandStatus
struct CORDL_TYPE OVRPlugin_HandStatus {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_HandStatus_Unwrapped
  enum struct __OVRPlugin_HandStatus_Unwrapped : int32_t {
    __E_HandTracked = static_cast<int32_t>(0x1),
    __E_InputStateValid = static_cast<int32_t>(0x2),
    __E_SystemGestureInProgress = static_cast<int32_t>(0x40),
    __E_DominantHand = static_cast<int32_t>(0x80),
    __E_MenuPressed = static_cast<int32_t>(0x100),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_HandStatus_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_HandStatus_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HandStatus();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_HandStatus(int32_t value__) noexcept;

  /// @brief Field DominantHand value: I32(128)
  static ::GlobalNamespace::OVRPlugin_HandStatus const DominantHand;

  /// @brief Field HandTracked value: I32(1)
  static ::GlobalNamespace::OVRPlugin_HandStatus const HandTracked;

  /// @brief Field InputStateValid value: I32(2)
  static ::GlobalNamespace::OVRPlugin_HandStatus const InputStateValid;

  /// @brief Field MenuPressed value: I32(256)
  static ::GlobalNamespace::OVRPlugin_HandStatus const MenuPressed;

  /// @brief Field SystemGestureInProgress value: I32(64)
  static ::GlobalNamespace::OVRPlugin_HandStatus const SystemGestureInProgress;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8083};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStatus, value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_HandStatus, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/BoneId
struct CORDL_TYPE OVRPlugin_BoneId {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_BoneId_Unwrapped
  enum struct __OVRPlugin_BoneId_Unwrapped : int32_t {
    __E_Invalid = static_cast<int32_t>(0xffffffff),
    __E_Hand_Start = static_cast<int32_t>(0x0),
    __E_Hand_WristRoot = static_cast<int32_t>(0x0),
    __E_Hand_ForearmStub = static_cast<int32_t>(0x1),
    __E_Hand_Thumb0 = static_cast<int32_t>(0x2),
    __E_Hand_Thumb1 = static_cast<int32_t>(0x3),
    __E_Hand_Thumb2 = static_cast<int32_t>(0x4),
    __E_Hand_Thumb3 = static_cast<int32_t>(0x5),
    __E_Hand_Index1 = static_cast<int32_t>(0x6),
    __E_Hand_Index2 = static_cast<int32_t>(0x7),
    __E_Hand_Index3 = static_cast<int32_t>(0x8),
    __E_Hand_Middle1 = static_cast<int32_t>(0x9),
    __E_Hand_Middle2 = static_cast<int32_t>(0xa),
    __E_Hand_Middle3 = static_cast<int32_t>(0xb),
    __E_Hand_Ring1 = static_cast<int32_t>(0xc),
    __E_Hand_Ring2 = static_cast<int32_t>(0xd),
    __E_Hand_Ring3 = static_cast<int32_t>(0xe),
    __E_Hand_Pinky0 = static_cast<int32_t>(0xf),
    __E_Hand_Pinky1 = static_cast<int32_t>(0x10),
    __E_Hand_Pinky2 = static_cast<int32_t>(0x11),
    __E_Hand_Pinky3 = static_cast<int32_t>(0x12),
    __E_Hand_MaxSkinnable = static_cast<int32_t>(0x13),
    __E_Hand_ThumbTip = static_cast<int32_t>(0x13),
    __E_Hand_IndexTip = static_cast<int32_t>(0x14),
    __E_Hand_MiddleTip = static_cast<int32_t>(0x15),
    __E_Hand_RingTip = static_cast<int32_t>(0x16),
    __E_Hand_PinkyTip = static_cast<int32_t>(0x17),
    __E_Hand_End = static_cast<int32_t>(0x18),
    __E_Body_Start = static_cast<int32_t>(0x0),
    __E_Body_Root = static_cast<int32_t>(0x0),
    __E_Body_Hips = static_cast<int32_t>(0x1),
    __E_Body_SpineLower = static_cast<int32_t>(0x2),
    __E_Body_SpineMiddle = static_cast<int32_t>(0x3),
    __E_Body_SpineUpper = static_cast<int32_t>(0x4),
    __E_Body_Chest = static_cast<int32_t>(0x5),
    __E_Body_Neck = static_cast<int32_t>(0x6),
    __E_Body_Head = static_cast<int32_t>(0x7),
    __E_Body_LeftShoulder = static_cast<int32_t>(0x8),
    __E_Body_LeftScapula = static_cast<int32_t>(0x9),
    __E_Body_LeftArmUpper = static_cast<int32_t>(0xa),
    __E_Body_LeftArmLower = static_cast<int32_t>(0xb),
    __E_Body_LeftHandWristTwist = static_cast<int32_t>(0xc),
    __E_Body_RightShoulder = static_cast<int32_t>(0xd),
    __E_Body_RightScapula = static_cast<int32_t>(0xe),
    __E_Body_RightArmUpper = static_cast<int32_t>(0xf),
    __E_Body_RightArmLower = static_cast<int32_t>(0x10),
    __E_Body_RightHandWristTwist = static_cast<int32_t>(0x11),
    __E_Body_LeftHandPalm = static_cast<int32_t>(0x12),
    __E_Body_LeftHandWrist = static_cast<int32_t>(0x13),
    __E_Body_LeftHandThumbMetacarpal = static_cast<int32_t>(0x14),
    __E_Body_LeftHandThumbProximal = static_cast<int32_t>(0x15),
    __E_Body_LeftHandThumbDistal = static_cast<int32_t>(0x16),
    __E_Body_LeftHandThumbTip = static_cast<int32_t>(0x17),
    __E_Body_LeftHandIndexMetacarpal = static_cast<int32_t>(0x18),
    __E_Body_LeftHandIndexProximal = static_cast<int32_t>(0x19),
    __E_Body_LeftHandIndexIntermediate = static_cast<int32_t>(0x1a),
    __E_Body_LeftHandIndexDistal = static_cast<int32_t>(0x1b),
    __E_Body_LeftHandIndexTip = static_cast<int32_t>(0x1c),
    __E_Body_LeftHandMiddleMetacarpal = static_cast<int32_t>(0x1d),
    __E_Body_LeftHandMiddleProximal = static_cast<int32_t>(0x1e),
    __E_Body_LeftHandMiddleIntermediate = static_cast<int32_t>(0x1f),
    __E_Body_LeftHandMiddleDistal = static_cast<int32_t>(0x20),
    __E_Body_LeftHandMiddleTip = static_cast<int32_t>(0x21),
    __E_Body_LeftHandRingMetacarpal = static_cast<int32_t>(0x22),
    __E_Body_LeftHandRingProximal = static_cast<int32_t>(0x23),
    __E_Body_LeftHandRingIntermediate = static_cast<int32_t>(0x24),
    __E_Body_LeftHandRingDistal = static_cast<int32_t>(0x25),
    __E_Body_LeftHandRingTip = static_cast<int32_t>(0x26),
    __E_Body_LeftHandLittleMetacarpal = static_cast<int32_t>(0x27),
    __E_Body_LeftHandLittleProximal = static_cast<int32_t>(0x28),
    __E_Body_LeftHandLittleIntermediate = static_cast<int32_t>(0x29),
    __E_Body_LeftHandLittleDistal = static_cast<int32_t>(0x2a),
    __E_Body_LeftHandLittleTip = static_cast<int32_t>(0x2b),
    __E_Body_RightHandPalm = static_cast<int32_t>(0x2c),
    __E_Body_RightHandWrist = static_cast<int32_t>(0x2d),
    __E_Body_RightHandThumbMetacarpal = static_cast<int32_t>(0x2e),
    __E_Body_RightHandThumbProximal = static_cast<int32_t>(0x2f),
    __E_Body_RightHandThumbDistal = static_cast<int32_t>(0x30),
    __E_Body_RightHandThumbTip = static_cast<int32_t>(0x31),
    __E_Body_RightHandIndexMetacarpal = static_cast<int32_t>(0x32),
    __E_Body_RightHandIndexProximal = static_cast<int32_t>(0x33),
    __E_Body_RightHandIndexIntermediate = static_cast<int32_t>(0x34),
    __E_Body_RightHandIndexDistal = static_cast<int32_t>(0x35),
    __E_Body_RightHandIndexTip = static_cast<int32_t>(0x36),
    __E_Body_RightHandMiddleMetacarpal = static_cast<int32_t>(0x37),
    __E_Body_RightHandMiddleProximal = static_cast<int32_t>(0x38),
    __E_Body_RightHandMiddleIntermediate = static_cast<int32_t>(0x39),
    __E_Body_RightHandMiddleDistal = static_cast<int32_t>(0x3a),
    __E_Body_RightHandMiddleTip = static_cast<int32_t>(0x3b),
    __E_Body_RightHandRingMetacarpal = static_cast<int32_t>(0x3c),
    __E_Body_RightHandRingProximal = static_cast<int32_t>(0x3d),
    __E_Body_RightHandRingIntermediate = static_cast<int32_t>(0x3e),
    __E_Body_RightHandRingDistal = static_cast<int32_t>(0x3f),
    __E_Body_RightHandRingTip = static_cast<int32_t>(0x40),
    __E_Body_RightHandLittleMetacarpal = static_cast<int32_t>(0x41),
    __E_Body_RightHandLittleProximal = static_cast<int32_t>(0x42),
    __E_Body_RightHandLittleIntermediate = static_cast<int32_t>(0x43),
    __E_Body_RightHandLittleDistal = static_cast<int32_t>(0x44),
    __E_Body_RightHandLittleTip = static_cast<int32_t>(0x45),
    __E_Body_End = static_cast<int32_t>(0x46),
    __E_Max = static_cast<int32_t>(0x46),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_BoneId_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_BoneId_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_BoneId();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_BoneId(int32_t value__) noexcept;

  /// @brief Field Body_Chest value: I32(5)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_Chest;

  /// @brief Field Body_End value: I32(70)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_End;

  /// @brief Field Body_Head value: I32(7)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_Head;

  /// @brief Field Body_Hips value: I32(1)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_Hips;

  /// @brief Field Body_LeftArmLower value: I32(11)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftArmLower;

  /// @brief Field Body_LeftArmUpper value: I32(10)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftArmUpper;

  /// @brief Field Body_LeftHandIndexDistal value: I32(27)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandIndexDistal;

  /// @brief Field Body_LeftHandIndexIntermediate value: I32(26)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_LeftHandIndexIntermediate;

  /// @brief Field Body_LeftHandIndexMetacarpal value: I32(24)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandIndexMetacarpal;

  /// @brief Field Body_LeftHandIndexProximal value: I32(25)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandIndexProximal;

  /// @brief Field Body_LeftHandIndexTip value: I32(28)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandIndexTip;

  /// @brief Field Body_LeftHandLittleDistal value: I32(42)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandLittleDistal;

  /// @brief Field Body_LeftHandLittleIntermediate value: I32(41)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_LeftHandLittleIntermediate;

  /// @brief Field Body_LeftHandLittleMetacarpal value: I32(39)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_LeftHandLittleMetacarpal;

  /// @brief Field Body_LeftHandLittleProximal value: I32(40)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandLittleProximal;

  /// @brief Field Body_LeftHandLittleTip value: I32(43)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandLittleTip;

  /// @brief Field Body_LeftHandMiddleDistal value: I32(32)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandMiddleDistal;

  /// @brief Field Body_LeftHandMiddleIntermediate value: I32(31)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_LeftHandMiddleIntermediate;

  /// @brief Field Body_LeftHandMiddleMetacarpal value: I32(29)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_LeftHandMiddleMetacarpal;

  /// @brief Field Body_LeftHandMiddleProximal value: I32(30)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandMiddleProximal;

  /// @brief Field Body_LeftHandMiddleTip value: I32(33)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandMiddleTip;

  /// @brief Field Body_LeftHandPalm value: I32(18)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandPalm;

  /// @brief Field Body_LeftHandRingDistal value: I32(37)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandRingDistal;

  /// @brief Field Body_LeftHandRingIntermediate value: I32(36)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_LeftHandRingIntermediate;

  /// @brief Field Body_LeftHandRingMetacarpal value: I32(34)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandRingMetacarpal;

  /// @brief Field Body_LeftHandRingProximal value: I32(35)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandRingProximal;

  /// @brief Field Body_LeftHandRingTip value: I32(38)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandRingTip;

  /// @brief Field Body_LeftHandThumbDistal value: I32(22)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandThumbDistal;

  /// @brief Field Body_LeftHandThumbMetacarpal value: I32(20)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandThumbMetacarpal;

  /// @brief Field Body_LeftHandThumbProximal value: I32(21)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandThumbProximal;

  /// @brief Field Body_LeftHandThumbTip value: I32(23)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandThumbTip;

  /// @brief Field Body_LeftHandWrist value: I32(19)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandWrist;

  /// @brief Field Body_LeftHandWristTwist value: I32(12)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftHandWristTwist;

  /// @brief Field Body_LeftScapula value: I32(9)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftScapula;

  /// @brief Field Body_LeftShoulder value: I32(8)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_LeftShoulder;

  /// @brief Field Body_Neck value: I32(6)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_Neck;

  /// @brief Field Body_RightArmLower value: I32(16)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightArmLower;

  /// @brief Field Body_RightArmUpper value: I32(15)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightArmUpper;

  /// @brief Field Body_RightHandIndexDistal value: I32(53)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandIndexDistal;

  /// @brief Field Body_RightHandIndexIntermediate value: I32(52)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_RightHandIndexIntermediate;

  /// @brief Field Body_RightHandIndexMetacarpal value: I32(50)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_RightHandIndexMetacarpal;

  /// @brief Field Body_RightHandIndexProximal value: I32(51)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandIndexProximal;

  /// @brief Field Body_RightHandIndexTip value: I32(54)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandIndexTip;

  /// @brief Field Body_RightHandLittleDistal value: I32(68)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandLittleDistal;

  /// @brief Field Body_RightHandLittleIntermediate value: I32(67)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_RightHandLittleIntermediate;

  /// @brief Field Body_RightHandLittleMetacarpal value: I32(65)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_RightHandLittleMetacarpal;

  /// @brief Field Body_RightHandLittleProximal value: I32(66)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandLittleProximal;

  /// @brief Field Body_RightHandLittleTip value: I32(69)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandLittleTip;

  /// @brief Field Body_RightHandMiddleDistal value: I32(58)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandMiddleDistal;

  /// @brief Field Body_RightHandMiddleIntermediate value: I32(57)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_RightHandMiddleIntermediate;

  /// @brief Field Body_RightHandMiddleMetacarpal value: I32(55)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_RightHandMiddleMetacarpal;

  /// @brief Field Body_RightHandMiddleProximal value: I32(56)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandMiddleProximal;

  /// @brief Field Body_RightHandMiddleTip value: I32(59)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandMiddleTip;

  /// @brief Field Body_RightHandPalm value: I32(44)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandPalm;

  /// @brief Field Body_RightHandRingDistal value: I32(63)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandRingDistal;

  /// @brief Field Body_RightHandRingIntermediate value: I32(62)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_RightHandRingIntermediate;

  /// @brief Field Body_RightHandRingMetacarpal value: I32(60)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandRingMetacarpal;

  /// @brief Field Body_RightHandRingProximal value: I32(61)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandRingProximal;

  /// @brief Field Body_RightHandRingTip value: I32(64)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandRingTip;

  /// @brief Field Body_RightHandThumbDistal value: I32(48)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandThumbDistal;

  /// @brief Field Body_RightHandThumbMetacarpal value: I32(46)
  static ::GlobalNamespace::OVRPlugin_BoneId const
      Body_RightHandThumbMetacarpal;

  /// @brief Field Body_RightHandThumbProximal value: I32(47)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandThumbProximal;

  /// @brief Field Body_RightHandThumbTip value: I32(49)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandThumbTip;

  /// @brief Field Body_RightHandWrist value: I32(45)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandWrist;

  /// @brief Field Body_RightHandWristTwist value: I32(17)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightHandWristTwist;

  /// @brief Field Body_RightScapula value: I32(14)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightScapula;

  /// @brief Field Body_RightShoulder value: I32(13)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_RightShoulder;

  /// @brief Field Body_Root value: I32(0)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_Root;

  /// @brief Field Body_SpineLower value: I32(2)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_SpineLower;

  /// @brief Field Body_SpineMiddle value: I32(3)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_SpineMiddle;

  /// @brief Field Body_SpineUpper value: I32(4)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_SpineUpper;

  /// @brief Field Body_Start value: I32(0)
  static ::GlobalNamespace::OVRPlugin_BoneId const Body_Start;

  /// @brief Field Hand_End value: I32(24)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_End;

  /// @brief Field Hand_ForearmStub value: I32(1)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_ForearmStub;

  /// @brief Field Hand_Index1 value: I32(6)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Index1;

  /// @brief Field Hand_Index2 value: I32(7)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Index2;

  /// @brief Field Hand_Index3 value: I32(8)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Index3;

  /// @brief Field Hand_IndexTip value: I32(20)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_IndexTip;

  /// @brief Field Hand_MaxSkinnable value: I32(19)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_MaxSkinnable;

  /// @brief Field Hand_Middle1 value: I32(9)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Middle1;

  /// @brief Field Hand_Middle2 value: I32(10)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Middle2;

  /// @brief Field Hand_Middle3 value: I32(11)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Middle3;

  /// @brief Field Hand_MiddleTip value: I32(21)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_MiddleTip;

  /// @brief Field Hand_Pinky0 value: I32(15)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Pinky0;

  /// @brief Field Hand_Pinky1 value: I32(16)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Pinky1;

  /// @brief Field Hand_Pinky2 value: I32(17)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Pinky2;

  /// @brief Field Hand_Pinky3 value: I32(18)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Pinky3;

  /// @brief Field Hand_PinkyTip value: I32(23)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_PinkyTip;

  /// @brief Field Hand_Ring1 value: I32(12)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Ring1;

  /// @brief Field Hand_Ring2 value: I32(13)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Ring2;

  /// @brief Field Hand_Ring3 value: I32(14)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Ring3;

  /// @brief Field Hand_RingTip value: I32(22)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_RingTip;

  /// @brief Field Hand_Start value: I32(0)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Start;

  /// @brief Field Hand_Thumb0 value: I32(2)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Thumb0;

  /// @brief Field Hand_Thumb1 value: I32(3)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Thumb1;

  /// @brief Field Hand_Thumb2 value: I32(4)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Thumb2;

  /// @brief Field Hand_Thumb3 value: I32(5)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_Thumb3;

  /// @brief Field Hand_ThumbTip value: I32(19)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_ThumbTip;

  /// @brief Field Hand_WristRoot value: I32(0)
  static ::GlobalNamespace::OVRPlugin_BoneId const Hand_WristRoot;

  /// @brief Field Invalid value: I32(-1)
  static ::GlobalNamespace::OVRPlugin_BoneId const Invalid;

  /// @brief Field Max value: I32(70)
  static ::GlobalNamespace::OVRPlugin_BoneId const Max;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8084};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoneId, value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_BoneId, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HandFinger
struct CORDL_TYPE OVRPlugin_HandFinger {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_HandFinger_Unwrapped
  enum struct __OVRPlugin_HandFinger_Unwrapped : int32_t {
    __E_Thumb = static_cast<int32_t>(0x0),
    __E_Index = static_cast<int32_t>(0x1),
    __E_Middle = static_cast<int32_t>(0x2),
    __E_Ring = static_cast<int32_t>(0x3),
    __E_Pinky = static_cast<int32_t>(0x4),
    __E_Max = static_cast<int32_t>(0x5),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_HandFinger_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_HandFinger_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HandFinger();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_HandFinger(int32_t value__) noexcept;

  /// @brief Field Index value: I32(1)
  static ::GlobalNamespace::OVRPlugin_HandFinger const Index;

  /// @brief Field Max value: I32(5)
  static ::GlobalNamespace::OVRPlugin_HandFinger const Max;

  /// @brief Field Middle value: I32(2)
  static ::GlobalNamespace::OVRPlugin_HandFinger const Middle;

  /// @brief Field Pinky value: I32(4)
  static ::GlobalNamespace::OVRPlugin_HandFinger const Pinky;

  /// @brief Field Ring value: I32(3)
  static ::GlobalNamespace::OVRPlugin_HandFinger const Ring;

  /// @brief Field Thumb value: I32(0)
  static ::GlobalNamespace::OVRPlugin_HandFinger const Thumb;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8085};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandFinger, value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_HandFinger, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HandFingerPinch
struct CORDL_TYPE OVRPlugin_HandFingerPinch {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_HandFingerPinch_Unwrapped
  enum struct __OVRPlugin_HandFingerPinch_Unwrapped : int32_t {
    __E_Thumb = static_cast<int32_t>(0x1),
    __E_Index = static_cast<int32_t>(0x2),
    __E_Middle = static_cast<int32_t>(0x4),
    __E_Ring = static_cast<int32_t>(0x8),
    __E_Pinky = static_cast<int32_t>(0x10),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_HandFingerPinch_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_HandFingerPinch_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HandFingerPinch();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_HandFingerPinch(int32_t value__) noexcept;

  /// @brief Field Index value: I32(2)
  static ::GlobalNamespace::OVRPlugin_HandFingerPinch const Index;

  /// @brief Field Middle value: I32(4)
  static ::GlobalNamespace::OVRPlugin_HandFingerPinch const Middle;

  /// @brief Field Pinky value: I32(16)
  static ::GlobalNamespace::OVRPlugin_HandFingerPinch const Pinky;

  /// @brief Field Ring value: I32(8)
  static ::GlobalNamespace::OVRPlugin_HandFingerPinch const Ring;

  /// @brief Field Thumb value: I32(1)
  static ::GlobalNamespace::OVRPlugin_HandFingerPinch const Thumb;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8086};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandFingerPinch, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_HandFingerPinch, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::HandFingerPinch, OVRPlugin::HandStatus,
// OVRPlugin::Posef, OVRPlugin::TrackingConfidence
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HandState
struct CORDL_TYPE OVRPlugin_HandState {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HandState();

  // Ctor Parameters [CppParam { name: "Status", ty:
  // "::GlobalNamespace::OVRPlugin_HandStatus", modifiers: "", def_value: None
  // }, CppParam { name: "RootPose", ty: "::GlobalNamespace::OVRPlugin_Posef",
  // modifiers: "", def_value: None }, CppParam { name: "BoneRotations", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_Quatf,::Array<::GlobalNamespace::OVRPlugin_Quatf>*>",
  // modifiers: "", def_value: None }, CppParam { name: "Pinches", ty:
  // "::GlobalNamespace::OVRPlugin_HandFingerPinch", modifiers: "", def_value:
  // None }, CppParam { name: "PinchStrength", ty:
  // "::ArrayW<float_t,::Array<float_t>*>", modifiers: "", def_value: None },
  // CppParam { name: "PointerPose", ty: "::GlobalNamespace::OVRPlugin_Posef",
  // modifiers: "", def_value: None }, CppParam { name: "HandScale", ty:
  // "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "HandConfidence", ty: "::GlobalNamespace::OVRPlugin_TrackingConfidence",
  // modifiers: "", def_value: None }, CppParam { name: "FingerConfidences", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_TrackingConfidence,::Array<::GlobalNamespace::OVRPlugin_TrackingConfidence>*>",
  // modifiers: "", def_value: None }, CppParam { name: "RequestedTimeStamp",
  // ty: "double_t", modifiers: "", def_value: None }, CppParam { name:
  // "SampleTimeStamp", ty: "double_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_HandState(
      ::GlobalNamespace::OVRPlugin_HandStatus Status,
      ::GlobalNamespace::OVRPlugin_Posef RootPose,
      ::ArrayW<::GlobalNamespace::OVRPlugin_Quatf,
               ::Array<::GlobalNamespace::OVRPlugin_Quatf> *>
          BoneRotations,
      ::GlobalNamespace::OVRPlugin_HandFingerPinch Pinches,
      ::ArrayW<float_t, ::Array<float_t> *> PinchStrength,
      ::GlobalNamespace::OVRPlugin_Posef PointerPose, float_t HandScale,
      ::GlobalNamespace::OVRPlugin_TrackingConfidence HandConfidence,
      ::ArrayW<::GlobalNamespace::OVRPlugin_TrackingConfidence,
               ::Array<::GlobalNamespace::OVRPlugin_TrackingConfidence> *>
          FingerConfidences,
      double_t RequestedTimeStamp, double_t SampleTimeStamp) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8087};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x78};

  /// @brief Field Status, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_HandStatus Status;

  /// @brief Field RootPose, offset: 0x4, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef RootPose;

  /// @brief Field BoneRotations, offset: 0x20, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Quatf,
           ::Array<::GlobalNamespace::OVRPlugin_Quatf> *>
      BoneRotations;

  /// @brief Field Pinches, offset: 0x28, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_HandFingerPinch Pinches;

  /// @brief Field PinchStrength, offset: 0x30, size: 0x8, def value: None
  ::ArrayW<float_t, ::Array<float_t> *> PinchStrength;

  /// @brief Field PointerPose, offset: 0x38, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef PointerPose;

  /// @brief Field HandScale, offset: 0x54, size: 0x4, def value: None
  float_t HandScale;

  /// @brief Field HandConfidence, offset: 0x58, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_TrackingConfidence HandConfidence;

  /// @brief Field FingerConfidences, offset: 0x60, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_TrackingConfidence,
           ::Array<::GlobalNamespace::OVRPlugin_TrackingConfidence> *>
      FingerConfidences;

  /// @brief Field RequestedTimeStamp, offset: 0x68, size: 0x8, def value: None
  double_t RequestedTimeStamp;

  /// @brief Field SampleTimeStamp, offset: 0x70, size: 0x8, def value: None
  double_t SampleTimeStamp;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandState, Status) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandState, RootPose) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandState, BoneRotations) ==
                  0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandState, Pinches) == 0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandState, PinchStrength) ==
                  0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandState, PointerPose) ==
                  0x38,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandState, HandScale) ==
                  0x54,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandState,
                       HandConfidence) == 0x58,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandState,
                       FingerConfidences) == 0x60,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandState,
                       RequestedTimeStamp) == 0x68,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandState,
                       SampleTimeStamp) == 0x70,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_HandState, 0x78>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::HandFingerPinch, OVRPlugin::HandStatus,
// OVRPlugin::Posef, OVRPlugin::Quatf, OVRPlugin::TrackingConfidence
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/HandStateInternal
struct CORDL_TYPE OVRPlugin_HandStateInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_HandStateInternal();

  // Ctor Parameters [CppParam { name: "Status", ty:
  // "::GlobalNamespace::OVRPlugin_HandStatus", modifiers: "", def_value: None
  // }, CppParam { name: "RootPose", ty: "::GlobalNamespace::OVRPlugin_Posef",
  // modifiers: "", def_value: None }, CppParam { name: "BoneRotations_0", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_1", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_2", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_3", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_4", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_5", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_6", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_7", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_8", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_9", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_10", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_11", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_12", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_13", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_14", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_15", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_16", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_17", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_18", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_19", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_20", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_21", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_22", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "BoneRotations_23", ty:
  // "::GlobalNamespace::OVRPlugin_Quatf", modifiers: "", def_value: None },
  // CppParam { name: "Pinches", ty:
  // "::GlobalNamespace::OVRPlugin_HandFingerPinch", modifiers: "", def_value:
  // None }, CppParam { name: "PinchStrength_0", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "PinchStrength_1", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "PinchStrength_2", ty:
  // "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "PinchStrength_3", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "PinchStrength_4", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "PointerPose", ty:
  // "::GlobalNamespace::OVRPlugin_Posef", modifiers: "", def_value: None },
  // CppParam { name: "HandScale", ty: "float_t", modifiers: "", def_value: None
  // }, CppParam { name: "HandConfidence", ty:
  // "::GlobalNamespace::OVRPlugin_TrackingConfidence", modifiers: "",
  // def_value: None }, CppParam { name: "FingerConfidences_0", ty:
  // "::GlobalNamespace::OVRPlugin_TrackingConfidence", modifiers: "",
  // def_value: None }, CppParam { name: "FingerConfidences_1", ty:
  // "::GlobalNamespace::OVRPlugin_TrackingConfidence", modifiers: "",
  // def_value: None }, CppParam { name: "FingerConfidences_2", ty:
  // "::GlobalNamespace::OVRPlugin_TrackingConfidence", modifiers: "",
  // def_value: None }, CppParam { name: "FingerConfidences_3", ty:
  // "::GlobalNamespace::OVRPlugin_TrackingConfidence", modifiers: "",
  // def_value: None }, CppParam { name: "FingerConfidences_4", ty:
  // "::GlobalNamespace::OVRPlugin_TrackingConfidence", modifiers: "",
  // def_value: None }, CppParam { name: "RequestedTimeStamp", ty: "double_t",
  // modifiers: "", def_value: None }, CppParam { name: "SampleTimeStamp", ty:
  // "double_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_HandStateInternal(
      ::GlobalNamespace::OVRPlugin_HandStatus Status,
      ::GlobalNamespace::OVRPlugin_Posef RootPose,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_0,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_1,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_2,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_3,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_4,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_5,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_6,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_7,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_8,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_9,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_10,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_11,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_12,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_13,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_14,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_15,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_16,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_17,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_18,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_19,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_20,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_21,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_22,
      ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_23,
      ::GlobalNamespace::OVRPlugin_HandFingerPinch Pinches,
      float_t PinchStrength_0, float_t PinchStrength_1, float_t PinchStrength_2,
      float_t PinchStrength_3, float_t PinchStrength_4,
      ::GlobalNamespace::OVRPlugin_Posef PointerPose, float_t HandScale,
      ::GlobalNamespace::OVRPlugin_TrackingConfidence HandConfidence,
      ::GlobalNamespace::OVRPlugin_TrackingConfidence FingerConfidences_0,
      ::GlobalNamespace::OVRPlugin_TrackingConfidence FingerConfidences_1,
      ::GlobalNamespace::OVRPlugin_TrackingConfidence FingerConfidences_2,
      ::GlobalNamespace::OVRPlugin_TrackingConfidence FingerConfidences_3,
      ::GlobalNamespace::OVRPlugin_TrackingConfidence FingerConfidences_4,
      double_t RequestedTimeStamp, double_t SampleTimeStamp) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8088};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x200};

  /// @brief Field Status, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_HandStatus Status;

  /// @brief Field RootPose, offset: 0x4, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef RootPose;

  /// @brief Field BoneRotations_0, offset: 0x20, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_0;

  /// @brief Field BoneRotations_1, offset: 0x30, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_1;

  /// @brief Field BoneRotations_2, offset: 0x40, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_2;

  /// @brief Field BoneRotations_3, offset: 0x50, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_3;

  /// @brief Field BoneRotations_4, offset: 0x60, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_4;

  /// @brief Field BoneRotations_5, offset: 0x70, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_5;

  /// @brief Field BoneRotations_6, offset: 0x80, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_6;

  /// @brief Field BoneRotations_7, offset: 0x90, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_7;

  /// @brief Field BoneRotations_8, offset: 0xa0, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_8;

  /// @brief Field BoneRotations_9, offset: 0xb0, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_9;

  /// @brief Field BoneRotations_10, offset: 0xc0, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_10;

  /// @brief Field BoneRotations_11, offset: 0xd0, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_11;

  /// @brief Field BoneRotations_12, offset: 0xe0, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_12;

  /// @brief Field BoneRotations_13, offset: 0xf0, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_13;

  /// @brief Field BoneRotations_14, offset: 0x100, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_14;

  /// @brief Field BoneRotations_15, offset: 0x110, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_15;

  /// @brief Field BoneRotations_16, offset: 0x120, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_16;

  /// @brief Field BoneRotations_17, offset: 0x130, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_17;

  /// @brief Field BoneRotations_18, offset: 0x140, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_18;

  /// @brief Field BoneRotations_19, offset: 0x150, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_19;

  /// @brief Field BoneRotations_20, offset: 0x160, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_20;

  /// @brief Field BoneRotations_21, offset: 0x170, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_21;

  /// @brief Field BoneRotations_22, offset: 0x180, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_22;

  /// @brief Field BoneRotations_23, offset: 0x190, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Quatf BoneRotations_23;

  /// @brief Field Pinches, offset: 0x1a0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_HandFingerPinch Pinches;

  /// @brief Field PinchStrength_0, offset: 0x1a4, size: 0x4, def value: None
  float_t PinchStrength_0;

  /// @brief Field PinchStrength_1, offset: 0x1a8, size: 0x4, def value: None
  float_t PinchStrength_1;

  /// @brief Field PinchStrength_2, offset: 0x1ac, size: 0x4, def value: None
  float_t PinchStrength_2;

  /// @brief Field PinchStrength_3, offset: 0x1b0, size: 0x4, def value: None
  float_t PinchStrength_3;

  /// @brief Field PinchStrength_4, offset: 0x1b4, size: 0x4, def value: None
  float_t PinchStrength_4;

  /// @brief Field PointerPose, offset: 0x1b8, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef PointerPose;

  /// @brief Field HandScale, offset: 0x1d4, size: 0x4, def value: None
  float_t HandScale;

  /// @brief Field HandConfidence, offset: 0x1d8, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_TrackingConfidence HandConfidence;

  /// @brief Field FingerConfidences_0, offset: 0x1dc, size: 0x4, def value:
  /// None
  ::GlobalNamespace::OVRPlugin_TrackingConfidence FingerConfidences_0;

  /// @brief Field FingerConfidences_1, offset: 0x1e0, size: 0x4, def value:
  /// None
  ::GlobalNamespace::OVRPlugin_TrackingConfidence FingerConfidences_1;

  /// @brief Field FingerConfidences_2, offset: 0x1e4, size: 0x4, def value:
  /// None
  ::GlobalNamespace::OVRPlugin_TrackingConfidence FingerConfidences_2;

  /// @brief Field FingerConfidences_3, offset: 0x1e8, size: 0x4, def value:
  /// None
  ::GlobalNamespace::OVRPlugin_TrackingConfidence FingerConfidences_3;

  /// @brief Field FingerConfidences_4, offset: 0x1ec, size: 0x4, def value:
  /// None
  ::GlobalNamespace::OVRPlugin_TrackingConfidence FingerConfidences_4;

  /// @brief Field RequestedTimeStamp, offset: 0x1f0, size: 0x8, def value: None
  double_t RequestedTimeStamp;

  /// @brief Field SampleTimeStamp, offset: 0x1f8, size: 0x8, def value: None
  double_t SampleTimeStamp;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       Status) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       RootPose) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_0) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_1) == 0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_2) == 0x40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_3) == 0x50,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_4) == 0x60,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_5) == 0x70,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_6) == 0x80,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_7) == 0x90,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_8) == 0xa0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_9) == 0xb0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_10) == 0xc0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_11) == 0xd0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_12) == 0xe0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_13) == 0xf0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_14) == 0x100,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_15) == 0x110,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_16) == 0x120,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_17) == 0x130,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_18) == 0x140,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_19) == 0x150,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_20) == 0x160,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_21) == 0x170,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_22) == 0x180,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       BoneRotations_23) == 0x190,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       Pinches) == 0x1a0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       PinchStrength_0) == 0x1a4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       PinchStrength_1) == 0x1a8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       PinchStrength_2) == 0x1ac,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       PinchStrength_3) == 0x1b0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       PinchStrength_4) == 0x1b4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       PointerPose) == 0x1b8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       HandScale) == 0x1d4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       HandConfidence) == 0x1d8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       FingerConfidences_0) == 0x1dc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       FingerConfidences_1) == 0x1e0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       FingerConfidences_2) == 0x1e4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       FingerConfidences_3) == 0x1e8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       FingerConfidences_4) == 0x1ec,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       RequestedTimeStamp) == 0x1f0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_HandStateInternal,
                       SampleTimeStamp) == 0x1f8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_HandStateInternal, 0x200>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Vector3f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/BoneCapsule
struct CORDL_TYPE OVRPlugin_BoneCapsule {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_BoneCapsule();

  // Ctor Parameters [CppParam { name: "BoneIndex", ty: "int16_t", modifiers:
  // "", def_value: None }, CppParam { name: "StartPoint", ty:
  // "::GlobalNamespace::OVRPlugin_Vector3f", modifiers: "", def_value: None },
  // CppParam { name: "EndPoint", ty: "::GlobalNamespace::OVRPlugin_Vector3f",
  // modifiers: "", def_value: None }, CppParam { name: "Radius", ty: "float_t",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_BoneCapsule(
      int16_t BoneIndex, ::GlobalNamespace::OVRPlugin_Vector3f StartPoint,
      ::GlobalNamespace::OVRPlugin_Vector3f EndPoint, float_t Radius) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8089};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x20};

  /// @brief Field BoneIndex, offset: 0x0, size: 0x2, def value: None
  int16_t BoneIndex;

  /// @brief Field StartPoint, offset: 0x4, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Vector3f StartPoint;

  /// @brief Field EndPoint, offset: 0x10, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Vector3f EndPoint;

  /// @brief Field Radius, offset: 0x1c, size: 0x4, def value: None
  float_t Radius;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoneCapsule, BoneIndex) ==
                  0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoneCapsule, StartPoint) ==
                  0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoneCapsule, EndPoint) ==
                  0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BoneCapsule, Radius) ==
                  0x1c,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_BoneCapsule, 0x20>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::BoneId, OVRPlugin::Posef
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Bone
struct CORDL_TYPE OVRPlugin_Bone {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Bone();

  // Ctor Parameters [CppParam { name: "Id", ty:
  // "::GlobalNamespace::OVRPlugin_BoneId", modifiers: "", def_value: None },
  // CppParam { name: "ParentBoneIndex", ty: "int16_t", modifiers: "",
  // def_value: None }, CppParam { name: "Pose", ty:
  // "::GlobalNamespace::OVRPlugin_Posef", modifiers: "", def_value: None }]
  constexpr OVRPlugin_Bone(::GlobalNamespace::OVRPlugin_BoneId Id,
                           int16_t ParentBoneIndex,
                           ::GlobalNamespace::OVRPlugin_Posef Pose) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8090};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x24};

  /// @brief Field Id, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_BoneId Id;

  /// @brief Field ParentBoneIndex, offset: 0x4, size: 0x2, def value: None
  int16_t ParentBoneIndex;

  /// @brief Field Pose, offset: 0x8, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef Pose;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Bone, Id) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Bone, ParentBoneIndex) ==
                  0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Bone, Pose) == 0x8,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Bone, 0x24>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SkeletonConstants
struct CORDL_TYPE OVRPlugin_SkeletonConstants {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_SkeletonConstants_Unwrapped
  enum struct __OVRPlugin_SkeletonConstants_Unwrapped : int32_t {
    __E_MaxHandBones = static_cast<int32_t>(0x18),
    __E_MaxBodyBones = static_cast<int32_t>(0x46),
    __E_MaxBones = static_cast<int32_t>(0x46),
    __E_MaxBoneCapsules = static_cast<int32_t>(0x13),
    __E_MaxNumMicrogestures = static_cast<int32_t>(0x5),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_SkeletonConstants_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_SkeletonConstants_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SkeletonConstants();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SkeletonConstants(int32_t value__) noexcept;

  /// @brief Field MaxBodyBones value: I32(70)
  static ::GlobalNamespace::OVRPlugin_SkeletonConstants const MaxBodyBones;

  /// @brief Field MaxBoneCapsules value: I32(19)
  static ::GlobalNamespace::OVRPlugin_SkeletonConstants const MaxBoneCapsules;

  /// @brief Field MaxBones value: I32(70)
  static ::GlobalNamespace::OVRPlugin_SkeletonConstants const MaxBones;

  /// @brief Field MaxHandBones value: I32(24)
  static ::GlobalNamespace::OVRPlugin_SkeletonConstants const MaxHandBones;

  /// @brief Field MaxNumMicrogestures value: I32(5)
  static ::GlobalNamespace::OVRPlugin_SkeletonConstants const
      MaxNumMicrogestures;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8091};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SkeletonConstants,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SkeletonConstants, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SkeletonType
struct CORDL_TYPE OVRPlugin_SkeletonType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_SkeletonType_Unwrapped
  enum struct __OVRPlugin_SkeletonType_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0xffffffff),
    __E_HandLeft = static_cast<int32_t>(0x0),
    __E_HandRight = static_cast<int32_t>(0x1),
    __E_Body = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_SkeletonType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_SkeletonType_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SkeletonType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SkeletonType(int32_t value__) noexcept;

  /// @brief Field Body value: I32(2)
  static ::GlobalNamespace::OVRPlugin_SkeletonType const Body;

  /// @brief Field HandLeft value: I32(0)
  static ::GlobalNamespace::OVRPlugin_SkeletonType const HandLeft;

  /// @brief Field HandRight value: I32(1)
  static ::GlobalNamespace::OVRPlugin_SkeletonType const HandRight;

  /// @brief Field None value: I32(-1)
  static ::GlobalNamespace::OVRPlugin_SkeletonType const None;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8092};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SkeletonType, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SkeletonType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::SkeletonType
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Skeleton
struct CORDL_TYPE OVRPlugin_Skeleton {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Skeleton();

  // Ctor Parameters [CppParam { name: "Type", ty:
  // "::GlobalNamespace::OVRPlugin_SkeletonType", modifiers: "", def_value: None
  // }, CppParam { name: "NumBones", ty: "uint32_t", modifiers: "", def_value:
  // None }, CppParam { name: "NumBoneCapsules", ty: "uint32_t", modifiers: "",
  // def_value: None }, CppParam { name: "Bones", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_Bone,::Array<::GlobalNamespace::OVRPlugin_Bone>*>",
  // modifiers: "", def_value: None }, CppParam { name: "BoneCapsules", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_BoneCapsule,::Array<::GlobalNamespace::OVRPlugin_BoneCapsule>*>",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_Skeleton(
      ::GlobalNamespace::OVRPlugin_SkeletonType Type, uint32_t NumBones,
      uint32_t NumBoneCapsules,
      ::ArrayW<::GlobalNamespace::OVRPlugin_Bone,
               ::Array<::GlobalNamespace::OVRPlugin_Bone> *>
          Bones,
      ::ArrayW<::GlobalNamespace::OVRPlugin_BoneCapsule,
               ::Array<::GlobalNamespace::OVRPlugin_BoneCapsule> *>
          BoneCapsules) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8093};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x20};

  /// @brief Field Type, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_SkeletonType Type;

  /// @brief Field NumBones, offset: 0x4, size: 0x4, def value: None
  uint32_t NumBones;

  /// @brief Field NumBoneCapsules, offset: 0x8, size: 0x4, def value: None
  uint32_t NumBoneCapsules;

  /// @brief Field Bones, offset: 0x10, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Bone,
           ::Array<::GlobalNamespace::OVRPlugin_Bone> *>
      Bones;

  /// @brief Field BoneCapsules, offset: 0x18, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_BoneCapsule,
           ::Array<::GlobalNamespace::OVRPlugin_BoneCapsule> *>
      BoneCapsules;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton, Type) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton, NumBones) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton,
                       NumBoneCapsules) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton, Bones) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton, BoneCapsules) ==
                  0x18,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_Skeleton, 0x20>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::SkeletonType
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Skeleton2
struct CORDL_TYPE OVRPlugin_Skeleton2 {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Skeleton2();

  // Ctor Parameters [CppParam { name: "Type", ty:
  // "::GlobalNamespace::OVRPlugin_SkeletonType", modifiers: "", def_value: None
  // }, CppParam { name: "NumBones", ty: "uint32_t", modifiers: "", def_value:
  // None }, CppParam { name: "NumBoneCapsules", ty: "uint32_t", modifiers: "",
  // def_value: None }, CppParam { name: "Bones", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_Bone,::Array<::GlobalNamespace::OVRPlugin_Bone>*>",
  // modifiers: "", def_value: None }, CppParam { name: "BoneCapsules", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_BoneCapsule,::Array<::GlobalNamespace::OVRPlugin_BoneCapsule>*>",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_Skeleton2(
      ::GlobalNamespace::OVRPlugin_SkeletonType Type, uint32_t NumBones,
      uint32_t NumBoneCapsules,
      ::ArrayW<::GlobalNamespace::OVRPlugin_Bone,
               ::Array<::GlobalNamespace::OVRPlugin_Bone> *>
          Bones,
      ::ArrayW<::GlobalNamespace::OVRPlugin_BoneCapsule,
               ::Array<::GlobalNamespace::OVRPlugin_BoneCapsule> *>
          BoneCapsules) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8094};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x20};

  /// @brief Field Type, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_SkeletonType Type;

  /// @brief Field NumBones, offset: 0x4, size: 0x4, def value: None
  uint32_t NumBones;

  /// @brief Field NumBoneCapsules, offset: 0x8, size: 0x4, def value: None
  uint32_t NumBoneCapsules;

  /// @brief Field Bones, offset: 0x10, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Bone,
           ::Array<::GlobalNamespace::OVRPlugin_Bone> *>
      Bones;

  /// @brief Field BoneCapsules, offset: 0x18, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_BoneCapsule,
           ::Array<::GlobalNamespace::OVRPlugin_BoneCapsule> *>
      BoneCapsules;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2, Type) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2, NumBones) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2,
                       NumBoneCapsules) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2, Bones) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2, BoneCapsules) ==
                  0x18,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_Skeleton2, 0x20>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Bone, OVRPlugin::BoneCapsule, OVRPlugin::SkeletonType
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Skeleton2Internal
struct CORDL_TYPE OVRPlugin_Skeleton2Internal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Skeleton2Internal();

  // Ctor Parameters [CppParam { name: "Type", ty:
  // "::GlobalNamespace::OVRPlugin_SkeletonType", modifiers: "", def_value: None
  // }, CppParam { name: "NumBones", ty: "uint32_t", modifiers: "", def_value:
  // None }, CppParam { name: "NumBoneCapsules", ty: "uint32_t", modifiers: "",
  // def_value: None }, CppParam { name: "Bones_0", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_1", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_2", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_3", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_4", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_5", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_6", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_7", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_8", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_9", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_10", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_11", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_12", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_13", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_14", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_15", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_16", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_17", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_18", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_19", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_20", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_21", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_22", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_23", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_24", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_25", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_26", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_27", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_28", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_29", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_30", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_31", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_32", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_33", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_34", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_35", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_36", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_37", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_38", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_39", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_40", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_41", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_42", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_43", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_44", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_45", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_46", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_47", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_48", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_49", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_50", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_51", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_52", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_53", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_54", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_55", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_56", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_57", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_58", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_59", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_60", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_61", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_62", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_63", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_64", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_65", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_66", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_67", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "Bones_68", ty:
  // "::GlobalNamespace::OVRPlugin_Bone", modifiers: "", def_value: None },
  // CppParam { name: "Bones_69", ty: "::GlobalNamespace::OVRPlugin_Bone",
  // modifiers: "", def_value: None }, CppParam { name: "BoneCapsules_0", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_1", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_2", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_3", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_4", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_5", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_6", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_7", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_8", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_9", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_10", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_11", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_12", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_13", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_14", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_15", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_16", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_17", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }, CppParam { name: "BoneCapsules_18", ty:
  // "::GlobalNamespace::OVRPlugin_BoneCapsule", modifiers: "", def_value: None
  // }]
  constexpr OVRPlugin_Skeleton2Internal(
      ::GlobalNamespace::OVRPlugin_SkeletonType Type, uint32_t NumBones,
      uint32_t NumBoneCapsules, ::GlobalNamespace::OVRPlugin_Bone Bones_0,
      ::GlobalNamespace::OVRPlugin_Bone Bones_1,
      ::GlobalNamespace::OVRPlugin_Bone Bones_2,
      ::GlobalNamespace::OVRPlugin_Bone Bones_3,
      ::GlobalNamespace::OVRPlugin_Bone Bones_4,
      ::GlobalNamespace::OVRPlugin_Bone Bones_5,
      ::GlobalNamespace::OVRPlugin_Bone Bones_6,
      ::GlobalNamespace::OVRPlugin_Bone Bones_7,
      ::GlobalNamespace::OVRPlugin_Bone Bones_8,
      ::GlobalNamespace::OVRPlugin_Bone Bones_9,
      ::GlobalNamespace::OVRPlugin_Bone Bones_10,
      ::GlobalNamespace::OVRPlugin_Bone Bones_11,
      ::GlobalNamespace::OVRPlugin_Bone Bones_12,
      ::GlobalNamespace::OVRPlugin_Bone Bones_13,
      ::GlobalNamespace::OVRPlugin_Bone Bones_14,
      ::GlobalNamespace::OVRPlugin_Bone Bones_15,
      ::GlobalNamespace::OVRPlugin_Bone Bones_16,
      ::GlobalNamespace::OVRPlugin_Bone Bones_17,
      ::GlobalNamespace::OVRPlugin_Bone Bones_18,
      ::GlobalNamespace::OVRPlugin_Bone Bones_19,
      ::GlobalNamespace::OVRPlugin_Bone Bones_20,
      ::GlobalNamespace::OVRPlugin_Bone Bones_21,
      ::GlobalNamespace::OVRPlugin_Bone Bones_22,
      ::GlobalNamespace::OVRPlugin_Bone Bones_23,
      ::GlobalNamespace::OVRPlugin_Bone Bones_24,
      ::GlobalNamespace::OVRPlugin_Bone Bones_25,
      ::GlobalNamespace::OVRPlugin_Bone Bones_26,
      ::GlobalNamespace::OVRPlugin_Bone Bones_27,
      ::GlobalNamespace::OVRPlugin_Bone Bones_28,
      ::GlobalNamespace::OVRPlugin_Bone Bones_29,
      ::GlobalNamespace::OVRPlugin_Bone Bones_30,
      ::GlobalNamespace::OVRPlugin_Bone Bones_31,
      ::GlobalNamespace::OVRPlugin_Bone Bones_32,
      ::GlobalNamespace::OVRPlugin_Bone Bones_33,
      ::GlobalNamespace::OVRPlugin_Bone Bones_34,
      ::GlobalNamespace::OVRPlugin_Bone Bones_35,
      ::GlobalNamespace::OVRPlugin_Bone Bones_36,
      ::GlobalNamespace::OVRPlugin_Bone Bones_37,
      ::GlobalNamespace::OVRPlugin_Bone Bones_38,
      ::GlobalNamespace::OVRPlugin_Bone Bones_39,
      ::GlobalNamespace::OVRPlugin_Bone Bones_40,
      ::GlobalNamespace::OVRPlugin_Bone Bones_41,
      ::GlobalNamespace::OVRPlugin_Bone Bones_42,
      ::GlobalNamespace::OVRPlugin_Bone Bones_43,
      ::GlobalNamespace::OVRPlugin_Bone Bones_44,
      ::GlobalNamespace::OVRPlugin_Bone Bones_45,
      ::GlobalNamespace::OVRPlugin_Bone Bones_46,
      ::GlobalNamespace::OVRPlugin_Bone Bones_47,
      ::GlobalNamespace::OVRPlugin_Bone Bones_48,
      ::GlobalNamespace::OVRPlugin_Bone Bones_49,
      ::GlobalNamespace::OVRPlugin_Bone Bones_50,
      ::GlobalNamespace::OVRPlugin_Bone Bones_51,
      ::GlobalNamespace::OVRPlugin_Bone Bones_52,
      ::GlobalNamespace::OVRPlugin_Bone Bones_53,
      ::GlobalNamespace::OVRPlugin_Bone Bones_54,
      ::GlobalNamespace::OVRPlugin_Bone Bones_55,
      ::GlobalNamespace::OVRPlugin_Bone Bones_56,
      ::GlobalNamespace::OVRPlugin_Bone Bones_57,
      ::GlobalNamespace::OVRPlugin_Bone Bones_58,
      ::GlobalNamespace::OVRPlugin_Bone Bones_59,
      ::GlobalNamespace::OVRPlugin_Bone Bones_60,
      ::GlobalNamespace::OVRPlugin_Bone Bones_61,
      ::GlobalNamespace::OVRPlugin_Bone Bones_62,
      ::GlobalNamespace::OVRPlugin_Bone Bones_63,
      ::GlobalNamespace::OVRPlugin_Bone Bones_64,
      ::GlobalNamespace::OVRPlugin_Bone Bones_65,
      ::GlobalNamespace::OVRPlugin_Bone Bones_66,
      ::GlobalNamespace::OVRPlugin_Bone Bones_67,
      ::GlobalNamespace::OVRPlugin_Bone Bones_68,
      ::GlobalNamespace::OVRPlugin_Bone Bones_69,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_0,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_1,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_2,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_3,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_4,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_5,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_6,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_7,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_8,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_9,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_10,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_11,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_12,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_13,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_14,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_15,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_16,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_17,
      ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_18) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8095};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0xc44};

  /// @brief Field Type, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_SkeletonType Type;

  /// @brief Field NumBones, offset: 0x4, size: 0x4, def value: None
  uint32_t NumBones;

  /// @brief Field NumBoneCapsules, offset: 0x8, size: 0x4, def value: None
  uint32_t NumBoneCapsules;

  /// @brief Field Bones_0, offset: 0xc, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_0;

  /// @brief Field Bones_1, offset: 0x30, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_1;

  /// @brief Field Bones_2, offset: 0x54, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_2;

  /// @brief Field Bones_3, offset: 0x78, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_3;

  /// @brief Field Bones_4, offset: 0x9c, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_4;

  /// @brief Field Bones_5, offset: 0xc0, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_5;

  /// @brief Field Bones_6, offset: 0xe4, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_6;

  /// @brief Field Bones_7, offset: 0x108, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_7;

  /// @brief Field Bones_8, offset: 0x12c, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_8;

  /// @brief Field Bones_9, offset: 0x150, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_9;

  /// @brief Field Bones_10, offset: 0x174, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_10;

  /// @brief Field Bones_11, offset: 0x198, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_11;

  /// @brief Field Bones_12, offset: 0x1bc, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_12;

  /// @brief Field Bones_13, offset: 0x1e0, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_13;

  /// @brief Field Bones_14, offset: 0x204, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_14;

  /// @brief Field Bones_15, offset: 0x228, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_15;

  /// @brief Field Bones_16, offset: 0x24c, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_16;

  /// @brief Field Bones_17, offset: 0x270, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_17;

  /// @brief Field Bones_18, offset: 0x294, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_18;

  /// @brief Field Bones_19, offset: 0x2b8, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_19;

  /// @brief Field Bones_20, offset: 0x2dc, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_20;

  /// @brief Field Bones_21, offset: 0x300, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_21;

  /// @brief Field Bones_22, offset: 0x324, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_22;

  /// @brief Field Bones_23, offset: 0x348, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_23;

  /// @brief Field Bones_24, offset: 0x36c, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_24;

  /// @brief Field Bones_25, offset: 0x390, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_25;

  /// @brief Field Bones_26, offset: 0x3b4, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_26;

  /// @brief Field Bones_27, offset: 0x3d8, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_27;

  /// @brief Field Bones_28, offset: 0x3fc, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_28;

  /// @brief Field Bones_29, offset: 0x420, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_29;

  /// @brief Field Bones_30, offset: 0x444, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_30;

  /// @brief Field Bones_31, offset: 0x468, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_31;

  /// @brief Field Bones_32, offset: 0x48c, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_32;

  /// @brief Field Bones_33, offset: 0x4b0, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_33;

  /// @brief Field Bones_34, offset: 0x4d4, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_34;

  /// @brief Field Bones_35, offset: 0x4f8, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_35;

  /// @brief Field Bones_36, offset: 0x51c, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_36;

  /// @brief Field Bones_37, offset: 0x540, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_37;

  /// @brief Field Bones_38, offset: 0x564, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_38;

  /// @brief Field Bones_39, offset: 0x588, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_39;

  /// @brief Field Bones_40, offset: 0x5ac, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_40;

  /// @brief Field Bones_41, offset: 0x5d0, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_41;

  /// @brief Field Bones_42, offset: 0x5f4, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_42;

  /// @brief Field Bones_43, offset: 0x618, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_43;

  /// @brief Field Bones_44, offset: 0x63c, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_44;

  /// @brief Field Bones_45, offset: 0x660, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_45;

  /// @brief Field Bones_46, offset: 0x684, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_46;

  /// @brief Field Bones_47, offset: 0x6a8, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_47;

  /// @brief Field Bones_48, offset: 0x6cc, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_48;

  /// @brief Field Bones_49, offset: 0x6f0, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_49;

  /// @brief Field Bones_50, offset: 0x714, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_50;

  /// @brief Field Bones_51, offset: 0x738, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_51;

  /// @brief Field Bones_52, offset: 0x75c, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_52;

  /// @brief Field Bones_53, offset: 0x780, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_53;

  /// @brief Field Bones_54, offset: 0x7a4, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_54;

  /// @brief Field Bones_55, offset: 0x7c8, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_55;

  /// @brief Field Bones_56, offset: 0x7ec, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_56;

  /// @brief Field Bones_57, offset: 0x810, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_57;

  /// @brief Field Bones_58, offset: 0x834, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_58;

  /// @brief Field Bones_59, offset: 0x858, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_59;

  /// @brief Field Bones_60, offset: 0x87c, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_60;

  /// @brief Field Bones_61, offset: 0x8a0, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_61;

  /// @brief Field Bones_62, offset: 0x8c4, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_62;

  /// @brief Field Bones_63, offset: 0x8e8, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_63;

  /// @brief Field Bones_64, offset: 0x90c, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_64;

  /// @brief Field Bones_65, offset: 0x930, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_65;

  /// @brief Field Bones_66, offset: 0x954, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_66;

  /// @brief Field Bones_67, offset: 0x978, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_67;

  /// @brief Field Bones_68, offset: 0x99c, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_68;

  /// @brief Field Bones_69, offset: 0x9c0, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_Bone Bones_69;

  /// @brief Field BoneCapsules_0, offset: 0x9e4, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_0;

  /// @brief Field BoneCapsules_1, offset: 0xa04, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_1;

  /// @brief Field BoneCapsules_2, offset: 0xa24, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_2;

  /// @brief Field BoneCapsules_3, offset: 0xa44, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_3;

  /// @brief Field BoneCapsules_4, offset: 0xa64, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_4;

  /// @brief Field BoneCapsules_5, offset: 0xa84, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_5;

  /// @brief Field BoneCapsules_6, offset: 0xaa4, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_6;

  /// @brief Field BoneCapsules_7, offset: 0xac4, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_7;

  /// @brief Field BoneCapsules_8, offset: 0xae4, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_8;

  /// @brief Field BoneCapsules_9, offset: 0xb04, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_9;

  /// @brief Field BoneCapsules_10, offset: 0xb24, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_10;

  /// @brief Field BoneCapsules_11, offset: 0xb44, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_11;

  /// @brief Field BoneCapsules_12, offset: 0xb64, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_12;

  /// @brief Field BoneCapsules_13, offset: 0xb84, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_13;

  /// @brief Field BoneCapsules_14, offset: 0xba4, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_14;

  /// @brief Field BoneCapsules_15, offset: 0xbc4, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_15;

  /// @brief Field BoneCapsules_16, offset: 0xbe4, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_16;

  /// @brief Field BoneCapsules_17, offset: 0xc04, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_17;

  /// @brief Field BoneCapsules_18, offset: 0xc24, size: 0x20, def value: None
  ::GlobalNamespace::OVRPlugin_BoneCapsule BoneCapsules_18;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal, Type) ==
                  0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       NumBones) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       NumBoneCapsules) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_0) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_1) == 0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_2) == 0x54,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_3) == 0x78,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_4) == 0x9c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_5) == 0xc0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_6) == 0xe4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_7) == 0x108,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_8) == 0x12c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_9) == 0x150,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_10) == 0x174,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_11) == 0x198,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_12) == 0x1bc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_13) == 0x1e0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_14) == 0x204,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_15) == 0x228,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_16) == 0x24c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_17) == 0x270,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_18) == 0x294,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_19) == 0x2b8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_20) == 0x2dc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_21) == 0x300,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_22) == 0x324,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_23) == 0x348,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_24) == 0x36c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_25) == 0x390,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_26) == 0x3b4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_27) == 0x3d8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_28) == 0x3fc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_29) == 0x420,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_30) == 0x444,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_31) == 0x468,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_32) == 0x48c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_33) == 0x4b0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_34) == 0x4d4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_35) == 0x4f8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_36) == 0x51c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_37) == 0x540,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_38) == 0x564,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_39) == 0x588,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_40) == 0x5ac,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_41) == 0x5d0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_42) == 0x5f4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_43) == 0x618,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_44) == 0x63c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_45) == 0x660,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_46) == 0x684,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_47) == 0x6a8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_48) == 0x6cc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_49) == 0x6f0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_50) == 0x714,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_51) == 0x738,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_52) == 0x75c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_53) == 0x780,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_54) == 0x7a4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_55) == 0x7c8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_56) == 0x7ec,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_57) == 0x810,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_58) == 0x834,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_59) == 0x858,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_60) == 0x87c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_61) == 0x8a0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_62) == 0x8c4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_63) == 0x8e8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_64) == 0x90c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_65) == 0x930,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_66) == 0x954,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_67) == 0x978,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_68) == 0x99c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       Bones_69) == 0x9c0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_0) == 0x9e4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_1) == 0xa04,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_2) == 0xa24,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_3) == 0xa44,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_4) == 0xa64,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_5) == 0xa84,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_6) == 0xaa4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_7) == 0xac4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_8) == 0xae4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_9) == 0xb04,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_10) == 0xb24,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_11) == 0xb44,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_12) == 0xb64,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_13) == 0xb84,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_14) == 0xba4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_15) == 0xbc4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_16) == 0xbe4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_17) == 0xc04,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Skeleton2Internal,
                       BoneCapsules_18) == 0xc24,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_Skeleton2Internal, 0xc44>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/MeshConstants
struct CORDL_TYPE OVRPlugin_MeshConstants {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_MeshConstants_Unwrapped
  enum struct __OVRPlugin_MeshConstants_Unwrapped : int32_t {
    __E_MaxVertices = static_cast<int32_t>(0xbb8),
    __E_MaxIndices = static_cast<int32_t>(0x4650),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_MeshConstants_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_MeshConstants_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_MeshConstants();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_MeshConstants(int32_t value__) noexcept;

  /// @brief Field MaxIndices value: I32(18000)
  static ::GlobalNamespace::OVRPlugin_MeshConstants const MaxIndices;

  /// @brief Field MaxVertices value: I32(3000)
  static ::GlobalNamespace::OVRPlugin_MeshConstants const MaxVertices;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8096};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_MeshConstants, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_MeshConstants, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/MeshType
struct CORDL_TYPE OVRPlugin_MeshType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_MeshType_Unwrapped
  enum struct __OVRPlugin_MeshType_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0xffffffff),
    __E_HandLeft = static_cast<int32_t>(0x0),
    __E_HandRight = static_cast<int32_t>(0x1),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_MeshType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_MeshType_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_MeshType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_MeshType(int32_t value__) noexcept;

  /// @brief Field HandLeft value: I32(0)
  static ::GlobalNamespace::OVRPlugin_MeshType const HandLeft;

  /// @brief Field HandRight value: I32(1)
  static ::GlobalNamespace::OVRPlugin_MeshType const HandRight;

  /// @brief Field None value: I32(-1)
  static ::GlobalNamespace::OVRPlugin_MeshType const None;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8097};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_MeshType, value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_MeshType, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::MeshType, System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/Mesh
class CORDL_TYPE OVRPlugin_Mesh : public ::System::Object {
public:
  // Declarations
  /// @brief Field BlendIndices, offset 0x40, size 0x8
  __declspec(property(get = __cordl_internal_get_BlendIndices,
                      put = __cordl_internal_set_BlendIndices)) ::
      ArrayW<::GlobalNamespace::OVRPlugin_Vector4s,
             ::Array<::GlobalNamespace::OVRPlugin_Vector4s> *>
          BlendIndices;

  /// @brief Field BlendWeights, offset 0x48, size 0x8
  __declspec(property(get = __cordl_internal_get_BlendWeights,
                      put = __cordl_internal_set_BlendWeights)) ::
      ArrayW<::GlobalNamespace::OVRPlugin_Vector4f,
             ::Array<::GlobalNamespace::OVRPlugin_Vector4f> *>
          BlendWeights;

  /// @brief Field Indices, offset 0x28, size 0x8
  __declspec(property(
      get = __cordl_internal_get_Indices,
      put = __cordl_internal_set_Indices)) ::ArrayW<int16_t, ::Array<int16_t> *>
      Indices;

  /// @brief Field NumIndices, offset 0x18, size 0x4
  __declspec(property(get = __cordl_internal_get_NumIndices,
                      put =
                          __cordl_internal_set_NumIndices)) uint32_t NumIndices;

  /// @brief Field NumVertices, offset 0x14, size 0x4
  __declspec(property(
      get = __cordl_internal_get_NumVertices,
      put = __cordl_internal_set_NumVertices)) uint32_t NumVertices;

  /// @brief Field Type, offset 0x10, size 0x4
  __declspec(property(
      get = __cordl_internal_get_Type,
      put = __cordl_internal_set_Type)) ::GlobalNamespace::OVRPlugin_MeshType
      Type;

  /// @brief Field VertexNormals, offset 0x30, size 0x8
  __declspec(property(get = __cordl_internal_get_VertexNormals,
                      put = __cordl_internal_set_VertexNormals)) ::
      ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
             ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *>
          VertexNormals;

  /// @brief Field VertexPositions, offset 0x20, size 0x8
  __declspec(property(get = __cordl_internal_get_VertexPositions,
                      put = __cordl_internal_set_VertexPositions)) ::
      ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
             ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *>
          VertexPositions;

  /// @brief Field VertexUV0, offset 0x38, size 0x8
  __declspec(property(get = __cordl_internal_get_VertexUV0,
                      put = __cordl_internal_set_VertexUV0)) ::
      ArrayW<::GlobalNamespace::OVRPlugin_Vector2f,
             ::Array<::GlobalNamespace::OVRPlugin_Vector2f> *>
          VertexUV0;

  static inline ::GlobalNamespace::OVRPlugin_Mesh *New_ctor();

  constexpr ::ArrayW<::GlobalNamespace::OVRPlugin_Vector4s,
                     ::Array<::GlobalNamespace::OVRPlugin_Vector4s> *> const &
  __cordl_internal_get_BlendIndices() const;

  constexpr ::ArrayW<::GlobalNamespace::OVRPlugin_Vector4s,
                     ::Array<::GlobalNamespace::OVRPlugin_Vector4s> *> &
  __cordl_internal_get_BlendIndices();

  constexpr ::ArrayW<::GlobalNamespace::OVRPlugin_Vector4f,
                     ::Array<::GlobalNamespace::OVRPlugin_Vector4f> *> const &
  __cordl_internal_get_BlendWeights() const;

  constexpr ::ArrayW<::GlobalNamespace::OVRPlugin_Vector4f,
                     ::Array<::GlobalNamespace::OVRPlugin_Vector4f> *> &
  __cordl_internal_get_BlendWeights();

  constexpr ::ArrayW<int16_t, ::Array<int16_t> *> const &
  __cordl_internal_get_Indices() const;

  constexpr ::ArrayW<int16_t, ::Array<int16_t> *> &
  __cordl_internal_get_Indices();

  constexpr uint32_t const &__cordl_internal_get_NumIndices() const;

  constexpr uint32_t &__cordl_internal_get_NumIndices();

  constexpr uint32_t const &__cordl_internal_get_NumVertices() const;

  constexpr uint32_t &__cordl_internal_get_NumVertices();

  constexpr ::GlobalNamespace::OVRPlugin_MeshType const &
  __cordl_internal_get_Type() const;

  constexpr ::GlobalNamespace::OVRPlugin_MeshType &__cordl_internal_get_Type();

  constexpr ::ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
                     ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *> const &
  __cordl_internal_get_VertexNormals() const;

  constexpr ::ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
                     ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *> &
  __cordl_internal_get_VertexNormals();

  constexpr ::ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
                     ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *> const &
  __cordl_internal_get_VertexPositions() const;

  constexpr ::ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
                     ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *> &
  __cordl_internal_get_VertexPositions();

  constexpr ::ArrayW<::GlobalNamespace::OVRPlugin_Vector2f,
                     ::Array<::GlobalNamespace::OVRPlugin_Vector2f> *> const &
  __cordl_internal_get_VertexUV0() const;

  constexpr ::ArrayW<::GlobalNamespace::OVRPlugin_Vector2f,
                     ::Array<::GlobalNamespace::OVRPlugin_Vector2f> *> &
  __cordl_internal_get_VertexUV0();

  constexpr void __cordl_internal_set_BlendIndices(
      ::ArrayW<::GlobalNamespace::OVRPlugin_Vector4s,
               ::Array<::GlobalNamespace::OVRPlugin_Vector4s> *>
          value);

  constexpr void __cordl_internal_set_BlendWeights(
      ::ArrayW<::GlobalNamespace::OVRPlugin_Vector4f,
               ::Array<::GlobalNamespace::OVRPlugin_Vector4f> *>
          value);

  constexpr void
  __cordl_internal_set_Indices(::ArrayW<int16_t, ::Array<int16_t> *> value);

  constexpr void __cordl_internal_set_NumIndices(uint32_t value);

  constexpr void __cordl_internal_set_NumVertices(uint32_t value);

  constexpr void
  __cordl_internal_set_Type(::GlobalNamespace::OVRPlugin_MeshType value);

  constexpr void __cordl_internal_set_VertexNormals(
      ::ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
               ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *>
          value);

  constexpr void __cordl_internal_set_VertexPositions(
      ::ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
               ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *>
          value);

  constexpr void __cordl_internal_set_VertexUV0(
      ::ArrayW<::GlobalNamespace::OVRPlugin_Vector2f,
               ::Array<::GlobalNamespace::OVRPlugin_Vector2f> *>
          value);

  /// @brief Method .ctor, addr 0x3ff53f4, size 0x8, virtual false, abstract:
  /// false, final false
  inline void _ctor();

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Mesh();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_Mesh", modifiers:
  // "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_Mesh(OVRPlugin_Mesh &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_Mesh", modifiers:
  // "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_Mesh(OVRPlugin_Mesh const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8098};

  /// @brief Field Type, offset: 0x10, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_MeshType ___Type;

  /// @brief Field NumVertices, offset: 0x14, size: 0x4, def value: None
  uint32_t ___NumVertices;

  /// @brief Field NumIndices, offset: 0x18, size: 0x4, def value: None
  uint32_t ___NumIndices;

  /// @brief Field VertexPositions, offset: 0x20, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
           ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *>
      ___VertexPositions;

  /// @brief Field Indices, offset: 0x28, size: 0x8, def value: None
  ::ArrayW<int16_t, ::Array<int16_t> *> ___Indices;

  /// @brief Field VertexNormals, offset: 0x30, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Vector3f,
           ::Array<::GlobalNamespace::OVRPlugin_Vector3f> *>
      ___VertexNormals;

  /// @brief Field VertexUV0, offset: 0x38, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Vector2f,
           ::Array<::GlobalNamespace::OVRPlugin_Vector2f> *>
      ___VertexUV0;

  /// @brief Field BlendIndices, offset: 0x40, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Vector4s,
           ::Array<::GlobalNamespace::OVRPlugin_Vector4s> *>
      ___BlendIndices;

  /// @brief Field BlendWeights, offset: 0x48, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_Vector4f,
           ::Array<::GlobalNamespace::OVRPlugin_Vector4f> *>
      ___BlendWeights;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_Mesh, ___Type) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Mesh, ___NumVertices) ==
                  0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Mesh, ___NumIndices) ==
                  0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Mesh, ___VertexPositions) ==
                  0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Mesh, ___Indices) == 0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Mesh, ___VertexNormals) ==
                  0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Mesh, ___VertexUV0) == 0x38,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Mesh, ___BlendIndices) ==
                  0x40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_Mesh, ___BlendWeights) ==
                  0x48,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Mesh, 0x50>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceLocationFlags
struct CORDL_TYPE OVRPlugin_SpaceLocationFlags {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = uint64_t;

  /// @brief Nested struct __OVRPlugin_SpaceLocationFlags_Unwrapped
  enum struct __OVRPlugin_SpaceLocationFlags_Unwrapped : uint64_t {
    __E_OrientationValid = static_cast<uint64_t>(0x1u),
    __E_PositionValid = static_cast<uint64_t>(0x2u),
    __E_OrientationTracked = static_cast<uint64_t>(0x4u),
    __E_PositionTracked = static_cast<uint64_t>(0x8u),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_SpaceLocationFlags_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_SpaceLocationFlags_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator uint64_t() const noexcept {
    return static_cast<uint64_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceLocationFlags();

  // Ctor Parameters [CppParam { name: "value__", ty: "uint64_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SpaceLocationFlags(uint64_t value__) noexcept;

  /// @brief Field OrientationTracked value: U64(4)
  static ::GlobalNamespace::OVRPlugin_SpaceLocationFlags const
      OrientationTracked;

  /// @brief Field OrientationValid value: U64(1)
  static ::GlobalNamespace::OVRPlugin_SpaceLocationFlags const OrientationValid;

  /// @brief Field PositionTracked value: U64(8)
  static ::GlobalNamespace::OVRPlugin_SpaceLocationFlags const PositionTracked;

  /// @brief Field PositionValid value: U64(2)
  static ::GlobalNamespace::OVRPlugin_SpaceLocationFlags const PositionValid;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8099};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field value__, offset: 0x0, size: 0x8, def value: None
  uint64_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceLocationFlags,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceLocationFlags, 0x8>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Posef, OVRPlugin::SpaceLocationFlags
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceLocationf
struct CORDL_TYPE OVRPlugin_SpaceLocationf {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceLocationf();

  // Ctor Parameters [CppParam { name: "locationFlags", ty:
  // "::GlobalNamespace::OVRPlugin_SpaceLocationFlags", modifiers: "",
  // def_value: None }, CppParam { name: "pose", ty:
  // "::GlobalNamespace::OVRPlugin_Posef", modifiers: "", def_value: None }]
  constexpr OVRPlugin_SpaceLocationf(
      ::GlobalNamespace::OVRPlugin_SpaceLocationFlags locationFlags,
      ::GlobalNamespace::OVRPlugin_Posef pose) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8100};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x28};

  /// @brief Field locationFlags, offset: 0x0, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_SpaceLocationFlags locationFlags;

  /// @brief Field pose, offset: 0x8, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef pose;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceLocationf,
                       locationFlags) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceLocationf, pose) ==
                  0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceLocationf, 0x28>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Posef, OVRPlugin::SpaceLocationFlags
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/BodyJointLocation
struct CORDL_TYPE OVRPlugin_BodyJointLocation {
public:
  // Declarations
  __declspec(property(get = get_OrientationTracked)) bool OrientationTracked;

  __declspec(property(get = get_OrientationValid)) bool OrientationValid;

  __declspec(property(get = get_PositionTracked)) bool PositionTracked;

  __declspec(property(get = get_PositionValid)) bool PositionValid;

  /// @brief Method get_OrientationTracked, addr 0x3ff5414, size 0xc, virtual
  /// false, abstract: false, final false
  inline bool get_OrientationTracked();

  /// @brief Method get_OrientationValid, addr 0x3ff53fc, size 0xc, virtual
  /// false, abstract: false, final false
  inline bool get_OrientationValid();

  /// @brief Method get_PositionTracked, addr 0x3ff5420, size 0xc, virtual
  /// false, abstract: false, final false
  inline bool get_PositionTracked();

  /// @brief Method get_PositionValid, addr 0x3ff5408, size 0xc, virtual false,
  /// abstract: false, final false
  inline bool get_PositionValid();

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_BodyJointLocation();

  // Ctor Parameters [CppParam { name: "LocationFlags", ty:
  // "::GlobalNamespace::OVRPlugin_SpaceLocationFlags", modifiers: "",
  // def_value: None }, CppParam { name: "Pose", ty:
  // "::GlobalNamespace::OVRPlugin_Posef", modifiers: "", def_value: None }]
  constexpr OVRPlugin_BodyJointLocation(
      ::GlobalNamespace::OVRPlugin_SpaceLocationFlags LocationFlags,
      ::GlobalNamespace::OVRPlugin_Posef Pose) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8101};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x28};

  /// @brief Field LocationFlags, offset: 0x0, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_SpaceLocationFlags LocationFlags;

  /// @brief Field Pose, offset: 0x8, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef Pose;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyJointLocation,
                       LocationFlags) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyJointLocation, Pose) ==
                  0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_BodyJointLocation, 0x28>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/BodyState
struct CORDL_TYPE OVRPlugin_BodyState {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_BodyState();

  // Ctor Parameters [CppParam { name: "JointLocations", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_BodyJointLocation,::Array<::GlobalNamespace::OVRPlugin_BodyJointLocation>*>",
  // modifiers: "", def_value: None }, CppParam { name: "Confidence", ty:
  // "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "SkeletonChangedCount", ty: "uint32_t", modifiers: "", def_value: None },
  // CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_BodyState(
      ::ArrayW<::GlobalNamespace::OVRPlugin_BodyJointLocation,
               ::Array<::GlobalNamespace::OVRPlugin_BodyJointLocation> *>
          JointLocations,
      float_t Confidence, uint32_t SkeletonChangedCount,
      double_t Time) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8102};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x18};

  /// @brief Field JointLocations, offset: 0x0, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_BodyJointLocation,
           ::Array<::GlobalNamespace::OVRPlugin_BodyJointLocation> *>
      JointLocations;

  /// @brief Field Confidence, offset: 0x8, size: 0x4, def value: None
  float_t Confidence;

  /// @brief Field SkeletonChangedCount, offset: 0xc, size: 0x4, def value: None
  uint32_t SkeletonChangedCount;

  /// @brief Field Time, offset: 0x10, size: 0x8, def value: None
  double_t Time;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyState,
                       JointLocations) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyState, Confidence) ==
                  0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyState,
                       SkeletonChangedCount) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyState, Time) == 0x10,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_BodyState, 0x18>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::BodyJointLocation, OVRPlugin::Bool
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/BodyStateInternal
struct CORDL_TYPE OVRPlugin_BodyStateInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_BodyStateInternal();

  // Ctor Parameters [CppParam { name: "IsActive", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None },
  // CppParam { name: "Confidence", ty: "float_t", modifiers: "", def_value:
  // None }, CppParam { name: "SkeletonChangedCount", ty: "uint32_t", modifiers:
  // "", def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers:
  // "", def_value: None }, CppParam { name: "JointLocation_0", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_1", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_2", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_3", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_4", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_5", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_6", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_7", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_8", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_9", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_10", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_11", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_12", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_13", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_14", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_15", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_16", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_17", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_18", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_19", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_20", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_21", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_22", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_23", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_24", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_25", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_26", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_27", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_28", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_29", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_30", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_31", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_32", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_33", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_34", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_35", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_36", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_37", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_38", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_39", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_40", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_41", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_42", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_43", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_44", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_45", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_46", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_47", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_48", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_49", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_50", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_51", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_52", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_53", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_54", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_55", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_56", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_57", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_58", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_59", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_60", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_61", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_62", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_63", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_64", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_65", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_66", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_67", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_68", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }, CppParam { name: "JointLocation_69", ty:
  // "::GlobalNamespace::OVRPlugin_BodyJointLocation", modifiers: "", def_value:
  // None }]
  constexpr OVRPlugin_BodyStateInternal(
      ::GlobalNamespace::OVRPlugin_Bool IsActive, float_t Confidence,
      uint32_t SkeletonChangedCount, double_t Time,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_0,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_1,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_2,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_3,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_4,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_5,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_6,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_7,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_8,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_9,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_10,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_11,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_12,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_13,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_14,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_15,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_16,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_17,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_18,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_19,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_20,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_21,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_22,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_23,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_24,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_25,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_26,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_27,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_28,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_29,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_30,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_31,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_32,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_33,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_34,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_35,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_36,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_37,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_38,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_39,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_40,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_41,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_42,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_43,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_44,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_45,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_46,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_47,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_48,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_49,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_50,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_51,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_52,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_53,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_54,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_55,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_56,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_57,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_58,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_59,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_60,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_61,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_62,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_63,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_64,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_65,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_66,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_67,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_68,
      ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_69) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8103};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0xb08};

  /// @brief Field IsActive, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool IsActive;

  /// @brief Field Confidence, offset: 0x4, size: 0x4, def value: None
  float_t Confidence;

  /// @brief Field SkeletonChangedCount, offset: 0x8, size: 0x4, def value: None
  uint32_t SkeletonChangedCount;

  /// @brief Field Time, offset: 0x10, size: 0x8, def value: None
  double_t Time;

  /// @brief Field JointLocation_0, offset: 0x18, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_0;

  /// @brief Field JointLocation_1, offset: 0x40, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_1;

  /// @brief Field JointLocation_2, offset: 0x68, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_2;

  /// @brief Field JointLocation_3, offset: 0x90, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_3;

  /// @brief Field JointLocation_4, offset: 0xb8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_4;

  /// @brief Field JointLocation_5, offset: 0xe0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_5;

  /// @brief Field JointLocation_6, offset: 0x108, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_6;

  /// @brief Field JointLocation_7, offset: 0x130, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_7;

  /// @brief Field JointLocation_8, offset: 0x158, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_8;

  /// @brief Field JointLocation_9, offset: 0x180, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_9;

  /// @brief Field JointLocation_10, offset: 0x1a8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_10;

  /// @brief Field JointLocation_11, offset: 0x1d0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_11;

  /// @brief Field JointLocation_12, offset: 0x1f8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_12;

  /// @brief Field JointLocation_13, offset: 0x220, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_13;

  /// @brief Field JointLocation_14, offset: 0x248, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_14;

  /// @brief Field JointLocation_15, offset: 0x270, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_15;

  /// @brief Field JointLocation_16, offset: 0x298, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_16;

  /// @brief Field JointLocation_17, offset: 0x2c0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_17;

  /// @brief Field JointLocation_18, offset: 0x2e8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_18;

  /// @brief Field JointLocation_19, offset: 0x310, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_19;

  /// @brief Field JointLocation_20, offset: 0x338, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_20;

  /// @brief Field JointLocation_21, offset: 0x360, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_21;

  /// @brief Field JointLocation_22, offset: 0x388, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_22;

  /// @brief Field JointLocation_23, offset: 0x3b0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_23;

  /// @brief Field JointLocation_24, offset: 0x3d8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_24;

  /// @brief Field JointLocation_25, offset: 0x400, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_25;

  /// @brief Field JointLocation_26, offset: 0x428, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_26;

  /// @brief Field JointLocation_27, offset: 0x450, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_27;

  /// @brief Field JointLocation_28, offset: 0x478, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_28;

  /// @brief Field JointLocation_29, offset: 0x4a0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_29;

  /// @brief Field JointLocation_30, offset: 0x4c8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_30;

  /// @brief Field JointLocation_31, offset: 0x4f0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_31;

  /// @brief Field JointLocation_32, offset: 0x518, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_32;

  /// @brief Field JointLocation_33, offset: 0x540, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_33;

  /// @brief Field JointLocation_34, offset: 0x568, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_34;

  /// @brief Field JointLocation_35, offset: 0x590, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_35;

  /// @brief Field JointLocation_36, offset: 0x5b8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_36;

  /// @brief Field JointLocation_37, offset: 0x5e0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_37;

  /// @brief Field JointLocation_38, offset: 0x608, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_38;

  /// @brief Field JointLocation_39, offset: 0x630, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_39;

  /// @brief Field JointLocation_40, offset: 0x658, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_40;

  /// @brief Field JointLocation_41, offset: 0x680, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_41;

  /// @brief Field JointLocation_42, offset: 0x6a8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_42;

  /// @brief Field JointLocation_43, offset: 0x6d0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_43;

  /// @brief Field JointLocation_44, offset: 0x6f8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_44;

  /// @brief Field JointLocation_45, offset: 0x720, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_45;

  /// @brief Field JointLocation_46, offset: 0x748, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_46;

  /// @brief Field JointLocation_47, offset: 0x770, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_47;

  /// @brief Field JointLocation_48, offset: 0x798, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_48;

  /// @brief Field JointLocation_49, offset: 0x7c0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_49;

  /// @brief Field JointLocation_50, offset: 0x7e8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_50;

  /// @brief Field JointLocation_51, offset: 0x810, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_51;

  /// @brief Field JointLocation_52, offset: 0x838, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_52;

  /// @brief Field JointLocation_53, offset: 0x860, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_53;

  /// @brief Field JointLocation_54, offset: 0x888, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_54;

  /// @brief Field JointLocation_55, offset: 0x8b0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_55;

  /// @brief Field JointLocation_56, offset: 0x8d8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_56;

  /// @brief Field JointLocation_57, offset: 0x900, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_57;

  /// @brief Field JointLocation_58, offset: 0x928, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_58;

  /// @brief Field JointLocation_59, offset: 0x950, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_59;

  /// @brief Field JointLocation_60, offset: 0x978, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_60;

  /// @brief Field JointLocation_61, offset: 0x9a0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_61;

  /// @brief Field JointLocation_62, offset: 0x9c8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_62;

  /// @brief Field JointLocation_63, offset: 0x9f0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_63;

  /// @brief Field JointLocation_64, offset: 0xa18, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_64;

  /// @brief Field JointLocation_65, offset: 0xa40, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_65;

  /// @brief Field JointLocation_66, offset: 0xa68, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_66;

  /// @brief Field JointLocation_67, offset: 0xa90, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_67;

  /// @brief Field JointLocation_68, offset: 0xab8, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_68;

  /// @brief Field JointLocation_69, offset: 0xae0, size: 0x28, def value: None
  ::GlobalNamespace::OVRPlugin_BodyJointLocation JointLocation_69;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       IsActive) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       Confidence) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       SkeletonChangedCount) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal, Time) ==
                  0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_0) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_1) == 0x40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_2) == 0x68,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_3) == 0x90,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_4) == 0xb8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_5) == 0xe0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_6) == 0x108,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_7) == 0x130,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_8) == 0x158,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_9) == 0x180,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_10) == 0x1a8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_11) == 0x1d0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_12) == 0x1f8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_13) == 0x220,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_14) == 0x248,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_15) == 0x270,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_16) == 0x298,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_17) == 0x2c0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_18) == 0x2e8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_19) == 0x310,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_20) == 0x338,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_21) == 0x360,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_22) == 0x388,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_23) == 0x3b0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_24) == 0x3d8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_25) == 0x400,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_26) == 0x428,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_27) == 0x450,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_28) == 0x478,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_29) == 0x4a0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_30) == 0x4c8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_31) == 0x4f0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_32) == 0x518,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_33) == 0x540,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_34) == 0x568,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_35) == 0x590,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_36) == 0x5b8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_37) == 0x5e0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_38) == 0x608,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_39) == 0x630,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_40) == 0x658,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_41) == 0x680,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_42) == 0x6a8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_43) == 0x6d0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_44) == 0x6f8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_45) == 0x720,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_46) == 0x748,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_47) == 0x770,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_48) == 0x798,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_49) == 0x7c0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_50) == 0x7e8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_51) == 0x810,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_52) == 0x838,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_53) == 0x860,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_54) == 0x888,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_55) == 0x8b0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_56) == 0x8d8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_57) == 0x900,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_58) == 0x928,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_59) == 0x950,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_60) == 0x978,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_61) == 0x9a0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_62) == 0x9c8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_63) == 0x9f0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_64) == 0xa18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_65) == 0xa40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_66) == 0xa68,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_67) == 0xa90,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_68) == 0xab8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_BodyStateInternal,
                       JointLocation_69) == 0xae0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_BodyStateInternal, 0xb08>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Bool, OVRPlugin::PoseStatef, OVRPlugin::Vector4f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/KeyboardState
struct CORDL_TYPE OVRPlugin_KeyboardState {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_KeyboardState();

  // Ctor Parameters [CppParam { name: "IsActive", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None },
  // CppParam { name: "OrientationValid", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None },
  // CppParam { name: "PositionValid", ty: "::GlobalNamespace::OVRPlugin_Bool",
  // modifiers: "", def_value: None }, CppParam { name: "OrientationTracked",
  // ty: "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None },
  // CppParam { name: "PositionTracked", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None },
  // CppParam { name: "PoseState", ty:
  // "::GlobalNamespace::OVRPlugin_PoseStatef", modifiers: "", def_value: None
  // }, CppParam { name: "ContrastParameters", ty:
  // "::GlobalNamespace::OVRPlugin_Vector4f", modifiers: "", def_value: None }]
  constexpr OVRPlugin_KeyboardState(
      ::GlobalNamespace::OVRPlugin_Bool IsActive,
      ::GlobalNamespace::OVRPlugin_Bool OrientationValid,
      ::GlobalNamespace::OVRPlugin_Bool PositionValid,
      ::GlobalNamespace::OVRPlugin_Bool OrientationTracked,
      ::GlobalNamespace::OVRPlugin_Bool PositionTracked,
      ::GlobalNamespace::OVRPlugin_PoseStatef PoseState,
      ::GlobalNamespace::OVRPlugin_Vector4f ContrastParameters) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8104};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x80};

  /// @brief Field IsActive, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool IsActive;

  /// @brief Field OrientationValid, offset: 0x4, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool OrientationValid;

  /// @brief Field PositionValid, offset: 0x8, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool PositionValid;

  /// @brief Field OrientationTracked, offset: 0xc, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool OrientationTracked;

  /// @brief Field PositionTracked, offset: 0x10, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool PositionTracked;

  /// @brief Field PoseState, offset: 0x18, size: 0x58, def value: None
  ::GlobalNamespace::OVRPlugin_PoseStatef PoseState;

  /// @brief Field ContrastParameters, offset: 0x70, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Vector4f ContrastParameters;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardState, IsActive) ==
                  0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardState,
                       OrientationValid) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardState,
                       PositionValid) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardState,
                       OrientationTracked) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardState,
                       PositionTracked) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardState, PoseState) ==
                  0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardState,
                       ContrastParameters) == 0x70,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_KeyboardState, 0x80>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/KeyboardDescriptionConstants
struct CORDL_TYPE OVRPlugin_KeyboardDescriptionConstants {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_KeyboardDescriptionConstants_Unwrapped
  enum struct __OVRPlugin_KeyboardDescriptionConstants_Unwrapped : int32_t {
    __E_NameMaxLength = static_cast<int32_t>(0x80),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_KeyboardDescriptionConstants_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_KeyboardDescriptionConstants_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_KeyboardDescriptionConstants();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_KeyboardDescriptionConstants(int32_t value__) noexcept;

  /// @brief Field NameMaxLength value: I32(128)
  static ::GlobalNamespace::OVRPlugin_KeyboardDescriptionConstants const
      NameMaxLength;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8105};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_KeyboardDescriptionConstants,
             value__) == 0x0,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_KeyboardDescriptionConstants, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/TrackedKeyboardPresentationStyles
struct CORDL_TYPE OVRPlugin_TrackedKeyboardPresentationStyles {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct
  /// __OVRPlugin_TrackedKeyboardPresentationStyles_Unwrapped
  enum struct
      __OVRPlugin_TrackedKeyboardPresentationStyles_Unwrapped : int32_t {
        __E_Unknown = static_cast<int32_t>(0x0),
        __E_Opaque = static_cast<int32_t>(0x1),
        __E_KeyLabel = static_cast<int32_t>(0x2),
      };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_TrackedKeyboardPresentationStyles_Unwrapped()
      const noexcept {
    return static_cast<__OVRPlugin_TrackedKeyboardPresentationStyles_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_TrackedKeyboardPresentationStyles();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_TrackedKeyboardPresentationStyles(
      int32_t value__) noexcept;

  /// @brief Field KeyLabel value: I32(2)
  static ::GlobalNamespace::OVRPlugin_TrackedKeyboardPresentationStyles const
      KeyLabel;

  /// @brief Field Opaque value: I32(1)
  static ::GlobalNamespace::OVRPlugin_TrackedKeyboardPresentationStyles const
      Opaque;

  /// @brief Field Unknown value: I32(0)
  static ::GlobalNamespace::OVRPlugin_TrackedKeyboardPresentationStyles const
      Unknown;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8106};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_TrackedKeyboardPresentationStyles,
             value__) == 0x0,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_TrackedKeyboardPresentationStyles, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/TrackedKeyboardFlags
struct CORDL_TYPE OVRPlugin_TrackedKeyboardFlags {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_TrackedKeyboardFlags_Unwrapped
  enum struct __OVRPlugin_TrackedKeyboardFlags_Unwrapped : int32_t {
    __E_Exists = static_cast<int32_t>(0x1),
    __E_Local = static_cast<int32_t>(0x2),
    __E_Remote = static_cast<int32_t>(0x4),
    __E_Connected = static_cast<int32_t>(0x8),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_TrackedKeyboardFlags_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_TrackedKeyboardFlags_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_TrackedKeyboardFlags();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_TrackedKeyboardFlags(int32_t value__) noexcept;

  /// @brief Field Connected value: I32(8)
  static ::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags const Connected;

  /// @brief Field Exists value: I32(1)
  static ::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags const Exists;

  /// @brief Field Local value: I32(2)
  static ::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags const Local;

  /// @brief Field Remote value: I32(4)
  static ::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags const Remote;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8107};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/TrackedKeyboardQueryFlags
struct CORDL_TYPE OVRPlugin_TrackedKeyboardQueryFlags {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_TrackedKeyboardQueryFlags_Unwrapped
  enum struct __OVRPlugin_TrackedKeyboardQueryFlags_Unwrapped : int32_t {
    __E_Local = static_cast<int32_t>(0x2),
    __E_Remote = static_cast<int32_t>(0x4),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_TrackedKeyboardQueryFlags_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_TrackedKeyboardQueryFlags_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_TrackedKeyboardQueryFlags();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_TrackedKeyboardQueryFlags(int32_t value__) noexcept;

  /// @brief Field Local value: I32(2)
  static ::GlobalNamespace::OVRPlugin_TrackedKeyboardQueryFlags const Local;

  /// @brief Field Remote value: I32(4)
  static ::GlobalNamespace::OVRPlugin_TrackedKeyboardQueryFlags const Remote;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8108};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_TrackedKeyboardQueryFlags,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_TrackedKeyboardQueryFlags, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::TrackedKeyboardFlags,
// OVRPlugin::TrackedKeyboardPresentationStyles, OVRPlugin::Vector3f
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/KeyboardDescription
struct CORDL_TYPE OVRPlugin_KeyboardDescription {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_KeyboardDescription();

  // Ctor Parameters [CppParam { name: "Name", ty:
  // "::ArrayW<uint8_t,::Array<uint8_t>*>", modifiers: "", def_value: None },
  // CppParam { name: "TrackedKeyboardId", ty: "uint64_t", modifiers: "",
  // def_value: None }, CppParam { name: "Dimensions", ty:
  // "::GlobalNamespace::OVRPlugin_Vector3f", modifiers: "", def_value: None },
  // CppParam { name: "KeyboardFlags", ty:
  // "::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags", modifiers: "",
  // def_value: None }, CppParam { name: "SupportedPresentationStyles", ty:
  // "::GlobalNamespace::OVRPlugin_TrackedKeyboardPresentationStyles",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_KeyboardDescription(
      ::ArrayW<uint8_t, ::Array<uint8_t> *> Name, uint64_t TrackedKeyboardId,
      ::GlobalNamespace::OVRPlugin_Vector3f Dimensions,
      ::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags KeyboardFlags,
      ::GlobalNamespace::OVRPlugin_TrackedKeyboardPresentationStyles
          SupportedPresentationStyles) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8109};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x28};

  /// @brief Field Name, offset: 0x0, size: 0x8, def value: None
  ::ArrayW<uint8_t, ::Array<uint8_t> *> Name;

  /// @brief Field TrackedKeyboardId, offset: 0x8, size: 0x8, def value: None
  uint64_t TrackedKeyboardId;

  /// @brief Field Dimensions, offset: 0x10, size: 0xc, def value: None
  ::GlobalNamespace::OVRPlugin_Vector3f Dimensions;

  /// @brief Field KeyboardFlags, offset: 0x1c, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags KeyboardFlags;

  /// @brief Field SupportedPresentationStyles, offset: 0x20, size: 0x4, def
  /// value: None
  ::GlobalNamespace::OVRPlugin_TrackedKeyboardPresentationStyles
      SupportedPresentationStyles;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardDescription,
                       Name) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardDescription,
                       TrackedKeyboardId) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardDescription,
                       Dimensions) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardDescription,
                       KeyboardFlags) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_KeyboardDescription,
                       SupportedPresentationStyles) == 0x20,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_KeyboardDescription, 0x28>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/FaceExpressionStatus
struct CORDL_TYPE OVRPlugin_FaceExpressionStatus {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_FaceExpressionStatus();

  // Ctor Parameters [CppParam { name: "IsValid", ty: "bool", modifiers: "",
  // def_value: None }, CppParam { name: "IsEyeFollowingBlendshapesValid", ty:
  // "bool", modifiers: "", def_value: None }]
  constexpr OVRPlugin_FaceExpressionStatus(
      bool IsValid, bool IsEyeFollowingBlendshapesValid) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8110};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x2};

  /// @brief Field IsValid, offset: 0x0, size: 0x1, def value: None
  bool IsValid;

  /// @brief Field IsEyeFollowingBlendshapesValid, offset: 0x1, size: 0x1, def
  /// value: None
  bool IsEyeFollowingBlendshapesValid;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceExpressionStatus,
                       IsValid) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceExpressionStatus,
                       IsEyeFollowingBlendshapesValid) == 0x1,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_FaceExpressionStatus, 0x2>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::FaceExpressionStatus
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/FaceState
struct CORDL_TYPE OVRPlugin_FaceState {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_FaceState();

  // Ctor Parameters [CppParam { name: "ExpressionWeights", ty:
  // "::ArrayW<float_t,::Array<float_t>*>", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeightConfidences", ty:
  // "::ArrayW<float_t,::Array<float_t>*>", modifiers: "", def_value: None },
  // CppParam { name: "Status", ty:
  // "::GlobalNamespace::OVRPlugin_FaceExpressionStatus", modifiers: "",
  // def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_FaceState(
      ::ArrayW<float_t, ::Array<float_t> *> ExpressionWeights,
      ::ArrayW<float_t, ::Array<float_t> *> ExpressionWeightConfidences,
      ::GlobalNamespace::OVRPlugin_FaceExpressionStatus Status,
      double_t Time) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8111};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x20};

  /// @brief Field ExpressionWeights, offset: 0x0, size: 0x8, def value: None
  ::ArrayW<float_t, ::Array<float_t> *> ExpressionWeights;

  /// @brief Field ExpressionWeightConfidences, offset: 0x8, size: 0x8, def
  /// value: None
  ::ArrayW<float_t, ::Array<float_t> *> ExpressionWeightConfidences;

  /// @brief Field Status, offset: 0x10, size: 0x2, def value: None
  ::GlobalNamespace::OVRPlugin_FaceExpressionStatus Status;

  /// @brief Field Time, offset: 0x18, size: 0x8, def value: None
  double_t Time;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState,
                       ExpressionWeights) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState,
                       ExpressionWeightConfidences) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState, Status) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState, Time) == 0x18,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_FaceState, 0x20>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Bool
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/FaceExpressionStatusInternal
struct CORDL_TYPE OVRPlugin_FaceExpressionStatusInternal {
public:
  // Declarations
  /// @brief Method ToFaceExpressionStatus, addr 0x3ff542c, size 0x1c, virtual
  /// false, abstract: false, final false
  inline ::GlobalNamespace::OVRPlugin_FaceExpressionStatus
  ToFaceExpressionStatus();

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_FaceExpressionStatusInternal();

  // Ctor Parameters [CppParam { name: "IsValid", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None },
  // CppParam { name: "IsEyeFollowingBlendshapesValid", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None }]
  constexpr OVRPlugin_FaceExpressionStatusInternal(
      ::GlobalNamespace::OVRPlugin_Bool IsValid,
      ::GlobalNamespace::OVRPlugin_Bool
          IsEyeFollowingBlendshapesValid) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8112};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field IsValid, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool IsValid;

  /// @brief Field IsEyeFollowingBlendshapesValid, offset: 0x4, size: 0x4, def
  /// value: None
  ::GlobalNamespace::OVRPlugin_Bool IsEyeFollowingBlendshapesValid;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal,
             IsValid) == 0x0,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal,
             IsEyeFollowingBlendshapesValid) == 0x4,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal, 0x8>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::FaceExpressionStatusInternal
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/FaceStateInternal
struct CORDL_TYPE OVRPlugin_FaceStateInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_FaceStateInternal();

  // Ctor Parameters [CppParam { name: "ExpressionWeights_0", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_1",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_2", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_3", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_4", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_5",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_6", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_7", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_8", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_9",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_10", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_11", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_12", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_13",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_14", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_15", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_16", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_17",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_18", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_19", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_20", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_21",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_22", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_23", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_24", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_25",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_26", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_27", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_28", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_29",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_30", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_31", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_32", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_33",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_34", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_35", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_36", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_37",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_38", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_39", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_40", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_41",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_42", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_43", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_44", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_45",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_46", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_47", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_48", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_49",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_50", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_51", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_52", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_53",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_54", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_55", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_56", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_57",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_58", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_59", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_60", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_61",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_62", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeightConfidences_0", ty: "float_t", modifiers:
  // "", def_value: None }, CppParam { name: "ExpressionWeightConfidences_1",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "Status",
  // ty: "::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal", modifiers:
  // "", def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers:
  // "", def_value: None }]
  constexpr OVRPlugin_FaceStateInternal(
      float_t ExpressionWeights_0, float_t ExpressionWeights_1,
      float_t ExpressionWeights_2, float_t ExpressionWeights_3,
      float_t ExpressionWeights_4, float_t ExpressionWeights_5,
      float_t ExpressionWeights_6, float_t ExpressionWeights_7,
      float_t ExpressionWeights_8, float_t ExpressionWeights_9,
      float_t ExpressionWeights_10, float_t ExpressionWeights_11,
      float_t ExpressionWeights_12, float_t ExpressionWeights_13,
      float_t ExpressionWeights_14, float_t ExpressionWeights_15,
      float_t ExpressionWeights_16, float_t ExpressionWeights_17,
      float_t ExpressionWeights_18, float_t ExpressionWeights_19,
      float_t ExpressionWeights_20, float_t ExpressionWeights_21,
      float_t ExpressionWeights_22, float_t ExpressionWeights_23,
      float_t ExpressionWeights_24, float_t ExpressionWeights_25,
      float_t ExpressionWeights_26, float_t ExpressionWeights_27,
      float_t ExpressionWeights_28, float_t ExpressionWeights_29,
      float_t ExpressionWeights_30, float_t ExpressionWeights_31,
      float_t ExpressionWeights_32, float_t ExpressionWeights_33,
      float_t ExpressionWeights_34, float_t ExpressionWeights_35,
      float_t ExpressionWeights_36, float_t ExpressionWeights_37,
      float_t ExpressionWeights_38, float_t ExpressionWeights_39,
      float_t ExpressionWeights_40, float_t ExpressionWeights_41,
      float_t ExpressionWeights_42, float_t ExpressionWeights_43,
      float_t ExpressionWeights_44, float_t ExpressionWeights_45,
      float_t ExpressionWeights_46, float_t ExpressionWeights_47,
      float_t ExpressionWeights_48, float_t ExpressionWeights_49,
      float_t ExpressionWeights_50, float_t ExpressionWeights_51,
      float_t ExpressionWeights_52, float_t ExpressionWeights_53,
      float_t ExpressionWeights_54, float_t ExpressionWeights_55,
      float_t ExpressionWeights_56, float_t ExpressionWeights_57,
      float_t ExpressionWeights_58, float_t ExpressionWeights_59,
      float_t ExpressionWeights_60, float_t ExpressionWeights_61,
      float_t ExpressionWeights_62, float_t ExpressionWeightConfidences_0,
      float_t ExpressionWeightConfidences_1,
      ::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal Status,
      double_t Time) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8113};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x118};

  /// @brief Field ExpressionWeights_0, offset: 0x0, size: 0x4, def value: None
  float_t ExpressionWeights_0;

  /// @brief Field ExpressionWeights_1, offset: 0x4, size: 0x4, def value: None
  float_t ExpressionWeights_1;

  /// @brief Field ExpressionWeights_2, offset: 0x8, size: 0x4, def value: None
  float_t ExpressionWeights_2;

  /// @brief Field ExpressionWeights_3, offset: 0xc, size: 0x4, def value: None
  float_t ExpressionWeights_3;

  /// @brief Field ExpressionWeights_4, offset: 0x10, size: 0x4, def value: None
  float_t ExpressionWeights_4;

  /// @brief Field ExpressionWeights_5, offset: 0x14, size: 0x4, def value: None
  float_t ExpressionWeights_5;

  /// @brief Field ExpressionWeights_6, offset: 0x18, size: 0x4, def value: None
  float_t ExpressionWeights_6;

  /// @brief Field ExpressionWeights_7, offset: 0x1c, size: 0x4, def value: None
  float_t ExpressionWeights_7;

  /// @brief Field ExpressionWeights_8, offset: 0x20, size: 0x4, def value: None
  float_t ExpressionWeights_8;

  /// @brief Field ExpressionWeights_9, offset: 0x24, size: 0x4, def value: None
  float_t ExpressionWeights_9;

  /// @brief Field ExpressionWeights_10, offset: 0x28, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_10;

  /// @brief Field ExpressionWeights_11, offset: 0x2c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_11;

  /// @brief Field ExpressionWeights_12, offset: 0x30, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_12;

  /// @brief Field ExpressionWeights_13, offset: 0x34, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_13;

  /// @brief Field ExpressionWeights_14, offset: 0x38, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_14;

  /// @brief Field ExpressionWeights_15, offset: 0x3c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_15;

  /// @brief Field ExpressionWeights_16, offset: 0x40, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_16;

  /// @brief Field ExpressionWeights_17, offset: 0x44, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_17;

  /// @brief Field ExpressionWeights_18, offset: 0x48, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_18;

  /// @brief Field ExpressionWeights_19, offset: 0x4c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_19;

  /// @brief Field ExpressionWeights_20, offset: 0x50, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_20;

  /// @brief Field ExpressionWeights_21, offset: 0x54, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_21;

  /// @brief Field ExpressionWeights_22, offset: 0x58, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_22;

  /// @brief Field ExpressionWeights_23, offset: 0x5c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_23;

  /// @brief Field ExpressionWeights_24, offset: 0x60, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_24;

  /// @brief Field ExpressionWeights_25, offset: 0x64, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_25;

  /// @brief Field ExpressionWeights_26, offset: 0x68, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_26;

  /// @brief Field ExpressionWeights_27, offset: 0x6c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_27;

  /// @brief Field ExpressionWeights_28, offset: 0x70, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_28;

  /// @brief Field ExpressionWeights_29, offset: 0x74, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_29;

  /// @brief Field ExpressionWeights_30, offset: 0x78, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_30;

  /// @brief Field ExpressionWeights_31, offset: 0x7c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_31;

  /// @brief Field ExpressionWeights_32, offset: 0x80, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_32;

  /// @brief Field ExpressionWeights_33, offset: 0x84, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_33;

  /// @brief Field ExpressionWeights_34, offset: 0x88, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_34;

  /// @brief Field ExpressionWeights_35, offset: 0x8c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_35;

  /// @brief Field ExpressionWeights_36, offset: 0x90, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_36;

  /// @brief Field ExpressionWeights_37, offset: 0x94, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_37;

  /// @brief Field ExpressionWeights_38, offset: 0x98, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_38;

  /// @brief Field ExpressionWeights_39, offset: 0x9c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_39;

  /// @brief Field ExpressionWeights_40, offset: 0xa0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_40;

  /// @brief Field ExpressionWeights_41, offset: 0xa4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_41;

  /// @brief Field ExpressionWeights_42, offset: 0xa8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_42;

  /// @brief Field ExpressionWeights_43, offset: 0xac, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_43;

  /// @brief Field ExpressionWeights_44, offset: 0xb0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_44;

  /// @brief Field ExpressionWeights_45, offset: 0xb4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_45;

  /// @brief Field ExpressionWeights_46, offset: 0xb8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_46;

  /// @brief Field ExpressionWeights_47, offset: 0xbc, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_47;

  /// @brief Field ExpressionWeights_48, offset: 0xc0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_48;

  /// @brief Field ExpressionWeights_49, offset: 0xc4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_49;

  /// @brief Field ExpressionWeights_50, offset: 0xc8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_50;

  /// @brief Field ExpressionWeights_51, offset: 0xcc, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_51;

  /// @brief Field ExpressionWeights_52, offset: 0xd0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_52;

  /// @brief Field ExpressionWeights_53, offset: 0xd4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_53;

  /// @brief Field ExpressionWeights_54, offset: 0xd8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_54;

  /// @brief Field ExpressionWeights_55, offset: 0xdc, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_55;

  /// @brief Field ExpressionWeights_56, offset: 0xe0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_56;

  /// @brief Field ExpressionWeights_57, offset: 0xe4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_57;

  /// @brief Field ExpressionWeights_58, offset: 0xe8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_58;

  /// @brief Field ExpressionWeights_59, offset: 0xec, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_59;

  /// @brief Field ExpressionWeights_60, offset: 0xf0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_60;

  /// @brief Field ExpressionWeights_61, offset: 0xf4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_61;

  /// @brief Field ExpressionWeights_62, offset: 0xf8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_62;

  /// @brief Field ExpressionWeightConfidences_0, offset: 0xfc, size: 0x4, def
  /// value: None
  float_t ExpressionWeightConfidences_0;

  /// @brief Field ExpressionWeightConfidences_1, offset: 0x100, size: 0x4, def
  /// value: None
  float_t ExpressionWeightConfidences_1;

  /// @brief Field Status, offset: 0x104, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal Status;

  /// @brief Field Time, offset: 0x110, size: 0x8, def value: None
  double_t Time;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_0) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_1) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_2) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_3) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_4) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_5) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_6) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_7) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_8) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_9) == 0x24,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_10) == 0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_11) == 0x2c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_12) == 0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_13) == 0x34,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_14) == 0x38,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_15) == 0x3c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_16) == 0x40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_17) == 0x44,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_18) == 0x48,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_19) == 0x4c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_20) == 0x50,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_21) == 0x54,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_22) == 0x58,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_23) == 0x5c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_24) == 0x60,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_25) == 0x64,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_26) == 0x68,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_27) == 0x6c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_28) == 0x70,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_29) == 0x74,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_30) == 0x78,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_31) == 0x7c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_32) == 0x80,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_33) == 0x84,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_34) == 0x88,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_35) == 0x8c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_36) == 0x90,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_37) == 0x94,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_38) == 0x98,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_39) == 0x9c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_40) == 0xa0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_41) == 0xa4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_42) == 0xa8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_43) == 0xac,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_44) == 0xb0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_45) == 0xb4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_46) == 0xb8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_47) == 0xbc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_48) == 0xc0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_49) == 0xc4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_50) == 0xc8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_51) == 0xcc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_52) == 0xd0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_53) == 0xd4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_54) == 0xd8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_55) == 0xdc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_56) == 0xe0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_57) == 0xe4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_58) == 0xe8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_59) == 0xec,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_60) == 0xf0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_61) == 0xf4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeights_62) == 0xf8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeightConfidences_0) == 0xfc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       ExpressionWeightConfidences_1) == 0x100,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal,
                       Status) == 0x104,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceStateInternal, Time) ==
                  0x110,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_FaceStateInternal, 0x118>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::FaceExpressionStatusInternal
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/FaceState2Internal
struct CORDL_TYPE OVRPlugin_FaceState2Internal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_FaceState2Internal();

  // Ctor Parameters [CppParam { name: "ExpressionWeights_0", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_1",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_2", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_3", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_4", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_5",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_6", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_7", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_8", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_9",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_10", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_11", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_12", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_13",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_14", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_15", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_16", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_17",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_18", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_19", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_20", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_21",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_22", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_23", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_24", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_25",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_26", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_27", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_28", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_29",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_30", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_31", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_32", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_33",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_34", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_35", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_36", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_37",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_38", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_39", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_40", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_41",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_42", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_43", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_44", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_45",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_46", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_47", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_48", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_49",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_50", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_51", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_52", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_53",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_54", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_55", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_56", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_57",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_58", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeights_59", ty: "float_t", modifiers: "",
  // def_value: None }, CppParam { name: "ExpressionWeights_60", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "ExpressionWeights_61",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name:
  // "ExpressionWeights_62", ty: "float_t", modifiers: "", def_value: None },
  // CppParam { name: "ExpressionWeightConfidences_0", ty: "float_t", modifiers:
  // "", def_value: None }, CppParam { name: "ExpressionWeightConfidences_1",
  // ty: "float_t", modifiers: "", def_value: None }, CppParam { name: "Status",
  // ty: "::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal", modifiers:
  // "", def_value: None }, CppParam { name: "Time", ty: "double_t", modifiers:
  // "", def_value: None }]
  constexpr OVRPlugin_FaceState2Internal(
      float_t ExpressionWeights_0, float_t ExpressionWeights_1,
      float_t ExpressionWeights_2, float_t ExpressionWeights_3,
      float_t ExpressionWeights_4, float_t ExpressionWeights_5,
      float_t ExpressionWeights_6, float_t ExpressionWeights_7,
      float_t ExpressionWeights_8, float_t ExpressionWeights_9,
      float_t ExpressionWeights_10, float_t ExpressionWeights_11,
      float_t ExpressionWeights_12, float_t ExpressionWeights_13,
      float_t ExpressionWeights_14, float_t ExpressionWeights_15,
      float_t ExpressionWeights_16, float_t ExpressionWeights_17,
      float_t ExpressionWeights_18, float_t ExpressionWeights_19,
      float_t ExpressionWeights_20, float_t ExpressionWeights_21,
      float_t ExpressionWeights_22, float_t ExpressionWeights_23,
      float_t ExpressionWeights_24, float_t ExpressionWeights_25,
      float_t ExpressionWeights_26, float_t ExpressionWeights_27,
      float_t ExpressionWeights_28, float_t ExpressionWeights_29,
      float_t ExpressionWeights_30, float_t ExpressionWeights_31,
      float_t ExpressionWeights_32, float_t ExpressionWeights_33,
      float_t ExpressionWeights_34, float_t ExpressionWeights_35,
      float_t ExpressionWeights_36, float_t ExpressionWeights_37,
      float_t ExpressionWeights_38, float_t ExpressionWeights_39,
      float_t ExpressionWeights_40, float_t ExpressionWeights_41,
      float_t ExpressionWeights_42, float_t ExpressionWeights_43,
      float_t ExpressionWeights_44, float_t ExpressionWeights_45,
      float_t ExpressionWeights_46, float_t ExpressionWeights_47,
      float_t ExpressionWeights_48, float_t ExpressionWeights_49,
      float_t ExpressionWeights_50, float_t ExpressionWeights_51,
      float_t ExpressionWeights_52, float_t ExpressionWeights_53,
      float_t ExpressionWeights_54, float_t ExpressionWeights_55,
      float_t ExpressionWeights_56, float_t ExpressionWeights_57,
      float_t ExpressionWeights_58, float_t ExpressionWeights_59,
      float_t ExpressionWeights_60, float_t ExpressionWeights_61,
      float_t ExpressionWeights_62, float_t ExpressionWeightConfidences_0,
      float_t ExpressionWeightConfidences_1,
      ::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal Status,
      double_t Time) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8114};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x118};

  /// @brief Field ExpressionWeights_0, offset: 0x0, size: 0x4, def value: None
  float_t ExpressionWeights_0;

  /// @brief Field ExpressionWeights_1, offset: 0x4, size: 0x4, def value: None
  float_t ExpressionWeights_1;

  /// @brief Field ExpressionWeights_2, offset: 0x8, size: 0x4, def value: None
  float_t ExpressionWeights_2;

  /// @brief Field ExpressionWeights_3, offset: 0xc, size: 0x4, def value: None
  float_t ExpressionWeights_3;

  /// @brief Field ExpressionWeights_4, offset: 0x10, size: 0x4, def value: None
  float_t ExpressionWeights_4;

  /// @brief Field ExpressionWeights_5, offset: 0x14, size: 0x4, def value: None
  float_t ExpressionWeights_5;

  /// @brief Field ExpressionWeights_6, offset: 0x18, size: 0x4, def value: None
  float_t ExpressionWeights_6;

  /// @brief Field ExpressionWeights_7, offset: 0x1c, size: 0x4, def value: None
  float_t ExpressionWeights_7;

  /// @brief Field ExpressionWeights_8, offset: 0x20, size: 0x4, def value: None
  float_t ExpressionWeights_8;

  /// @brief Field ExpressionWeights_9, offset: 0x24, size: 0x4, def value: None
  float_t ExpressionWeights_9;

  /// @brief Field ExpressionWeights_10, offset: 0x28, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_10;

  /// @brief Field ExpressionWeights_11, offset: 0x2c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_11;

  /// @brief Field ExpressionWeights_12, offset: 0x30, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_12;

  /// @brief Field ExpressionWeights_13, offset: 0x34, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_13;

  /// @brief Field ExpressionWeights_14, offset: 0x38, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_14;

  /// @brief Field ExpressionWeights_15, offset: 0x3c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_15;

  /// @brief Field ExpressionWeights_16, offset: 0x40, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_16;

  /// @brief Field ExpressionWeights_17, offset: 0x44, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_17;

  /// @brief Field ExpressionWeights_18, offset: 0x48, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_18;

  /// @brief Field ExpressionWeights_19, offset: 0x4c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_19;

  /// @brief Field ExpressionWeights_20, offset: 0x50, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_20;

  /// @brief Field ExpressionWeights_21, offset: 0x54, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_21;

  /// @brief Field ExpressionWeights_22, offset: 0x58, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_22;

  /// @brief Field ExpressionWeights_23, offset: 0x5c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_23;

  /// @brief Field ExpressionWeights_24, offset: 0x60, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_24;

  /// @brief Field ExpressionWeights_25, offset: 0x64, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_25;

  /// @brief Field ExpressionWeights_26, offset: 0x68, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_26;

  /// @brief Field ExpressionWeights_27, offset: 0x6c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_27;

  /// @brief Field ExpressionWeights_28, offset: 0x70, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_28;

  /// @brief Field ExpressionWeights_29, offset: 0x74, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_29;

  /// @brief Field ExpressionWeights_30, offset: 0x78, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_30;

  /// @brief Field ExpressionWeights_31, offset: 0x7c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_31;

  /// @brief Field ExpressionWeights_32, offset: 0x80, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_32;

  /// @brief Field ExpressionWeights_33, offset: 0x84, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_33;

  /// @brief Field ExpressionWeights_34, offset: 0x88, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_34;

  /// @brief Field ExpressionWeights_35, offset: 0x8c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_35;

  /// @brief Field ExpressionWeights_36, offset: 0x90, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_36;

  /// @brief Field ExpressionWeights_37, offset: 0x94, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_37;

  /// @brief Field ExpressionWeights_38, offset: 0x98, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_38;

  /// @brief Field ExpressionWeights_39, offset: 0x9c, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_39;

  /// @brief Field ExpressionWeights_40, offset: 0xa0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_40;

  /// @brief Field ExpressionWeights_41, offset: 0xa4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_41;

  /// @brief Field ExpressionWeights_42, offset: 0xa8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_42;

  /// @brief Field ExpressionWeights_43, offset: 0xac, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_43;

  /// @brief Field ExpressionWeights_44, offset: 0xb0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_44;

  /// @brief Field ExpressionWeights_45, offset: 0xb4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_45;

  /// @brief Field ExpressionWeights_46, offset: 0xb8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_46;

  /// @brief Field ExpressionWeights_47, offset: 0xbc, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_47;

  /// @brief Field ExpressionWeights_48, offset: 0xc0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_48;

  /// @brief Field ExpressionWeights_49, offset: 0xc4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_49;

  /// @brief Field ExpressionWeights_50, offset: 0xc8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_50;

  /// @brief Field ExpressionWeights_51, offset: 0xcc, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_51;

  /// @brief Field ExpressionWeights_52, offset: 0xd0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_52;

  /// @brief Field ExpressionWeights_53, offset: 0xd4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_53;

  /// @brief Field ExpressionWeights_54, offset: 0xd8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_54;

  /// @brief Field ExpressionWeights_55, offset: 0xdc, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_55;

  /// @brief Field ExpressionWeights_56, offset: 0xe0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_56;

  /// @brief Field ExpressionWeights_57, offset: 0xe4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_57;

  /// @brief Field ExpressionWeights_58, offset: 0xe8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_58;

  /// @brief Field ExpressionWeights_59, offset: 0xec, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_59;

  /// @brief Field ExpressionWeights_60, offset: 0xf0, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_60;

  /// @brief Field ExpressionWeights_61, offset: 0xf4, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_61;

  /// @brief Field ExpressionWeights_62, offset: 0xf8, size: 0x4, def value:
  /// None
  float_t ExpressionWeights_62;

  /// @brief Field ExpressionWeightConfidences_0, offset: 0xfc, size: 0x4, def
  /// value: None
  float_t ExpressionWeightConfidences_0;

  /// @brief Field ExpressionWeightConfidences_1, offset: 0x100, size: 0x4, def
  /// value: None
  float_t ExpressionWeightConfidences_1;

  /// @brief Field Status, offset: 0x104, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal Status;

  /// @brief Field Time, offset: 0x110, size: 0x8, def value: None
  double_t Time;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_0) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_1) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_2) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_3) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_4) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_5) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_6) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_7) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_8) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_9) == 0x24,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_10) == 0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_11) == 0x2c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_12) == 0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_13) == 0x34,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_14) == 0x38,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_15) == 0x3c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_16) == 0x40,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_17) == 0x44,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_18) == 0x48,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_19) == 0x4c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_20) == 0x50,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_21) == 0x54,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_22) == 0x58,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_23) == 0x5c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_24) == 0x60,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_25) == 0x64,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_26) == 0x68,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_27) == 0x6c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_28) == 0x70,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_29) == 0x74,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_30) == 0x78,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_31) == 0x7c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_32) == 0x80,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_33) == 0x84,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_34) == 0x88,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_35) == 0x8c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_36) == 0x90,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_37) == 0x94,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_38) == 0x98,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_39) == 0x9c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_40) == 0xa0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_41) == 0xa4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_42) == 0xa8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_43) == 0xac,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_44) == 0xb0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_45) == 0xb4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_46) == 0xb8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_47) == 0xbc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_48) == 0xc0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_49) == 0xc4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_50) == 0xc8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_51) == 0xcc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_52) == 0xd0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_53) == 0xd4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_54) == 0xd8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_55) == 0xdc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_56) == 0xe0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_57) == 0xe4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_58) == 0xe8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_59) == 0xec,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_60) == 0xf0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_61) == 0xf4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeights_62) == 0xf8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeightConfidences_0) == 0xfc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       ExpressionWeightConfidences_1) == 0x100,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal,
                       Status) == 0x104,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceState2Internal, Time) ==
                  0x110,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_FaceState2Internal, 0x118>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/FaceRegionConfidence
struct CORDL_TYPE OVRPlugin_FaceRegionConfidence {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_FaceRegionConfidence_Unwrapped
  enum struct __OVRPlugin_FaceRegionConfidence_Unwrapped : int32_t {
    __E_Lower = static_cast<int32_t>(0x0),
    __E_Upper = static_cast<int32_t>(0x1),
    __E_Max = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_FaceRegionConfidence_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_FaceRegionConfidence_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_FaceRegionConfidence();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_FaceRegionConfidence(int32_t value__) noexcept;

  /// @brief Field Lower value: I32(0)
  static ::GlobalNamespace::OVRPlugin_FaceRegionConfidence const Lower;

  /// @brief Field Max value: I32(2)
  static ::GlobalNamespace::OVRPlugin_FaceRegionConfidence const Max;

  /// @brief Field Upper value: I32(1)
  static ::GlobalNamespace::OVRPlugin_FaceRegionConfidence const Upper;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8115};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceRegionConfidence,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_FaceRegionConfidence, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/FaceExpression
struct CORDL_TYPE OVRPlugin_FaceExpression {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_FaceExpression_Unwrapped
  enum struct __OVRPlugin_FaceExpression_Unwrapped : int32_t {
    __E_Invalid = static_cast<int32_t>(0xffffffff),
    __E_Brow_Lowerer_L = static_cast<int32_t>(0x0),
    __E_Brow_Lowerer_R = static_cast<int32_t>(0x1),
    __E_Cheek_Puff_L = static_cast<int32_t>(0x2),
    __E_Cheek_Puff_R = static_cast<int32_t>(0x3),
    __E_Cheek_Raiser_L = static_cast<int32_t>(0x4),
    __E_Cheek_Raiser_R = static_cast<int32_t>(0x5),
    __E_Cheek_Suck_L = static_cast<int32_t>(0x6),
    __E_Cheek_Suck_R = static_cast<int32_t>(0x7),
    __E_Chin_Raiser_B = static_cast<int32_t>(0x8),
    __E_Chin_Raiser_T = static_cast<int32_t>(0x9),
    __E_Dimpler_L = static_cast<int32_t>(0xa),
    __E_Dimpler_R = static_cast<int32_t>(0xb),
    __E_Eyes_Closed_L = static_cast<int32_t>(0xc),
    __E_Eyes_Closed_R = static_cast<int32_t>(0xd),
    __E_Eyes_Look_Down_L = static_cast<int32_t>(0xe),
    __E_Eyes_Look_Down_R = static_cast<int32_t>(0xf),
    __E_Eyes_Look_Left_L = static_cast<int32_t>(0x10),
    __E_Eyes_Look_Left_R = static_cast<int32_t>(0x11),
    __E_Eyes_Look_Right_L = static_cast<int32_t>(0x12),
    __E_Eyes_Look_Right_R = static_cast<int32_t>(0x13),
    __E_Eyes_Look_Up_L = static_cast<int32_t>(0x14),
    __E_Eyes_Look_Up_R = static_cast<int32_t>(0x15),
    __E_Inner_Brow_Raiser_L = static_cast<int32_t>(0x16),
    __E_Inner_Brow_Raiser_R = static_cast<int32_t>(0x17),
    __E_Jaw_Drop = static_cast<int32_t>(0x18),
    __E_Jaw_Sideways_Left = static_cast<int32_t>(0x19),
    __E_Jaw_Sideways_Right = static_cast<int32_t>(0x1a),
    __E_Jaw_Thrust = static_cast<int32_t>(0x1b),
    __E_Lid_Tightener_L = static_cast<int32_t>(0x1c),
    __E_Lid_Tightener_R = static_cast<int32_t>(0x1d),
    __E_Lip_Corner_Depressor_L = static_cast<int32_t>(0x1e),
    __E_Lip_Corner_Depressor_R = static_cast<int32_t>(0x1f),
    __E_Lip_Corner_Puller_L = static_cast<int32_t>(0x20),
    __E_Lip_Corner_Puller_R = static_cast<int32_t>(0x21),
    __E_Lip_Funneler_LB = static_cast<int32_t>(0x22),
    __E_Lip_Funneler_LT = static_cast<int32_t>(0x23),
    __E_Lip_Funneler_RB = static_cast<int32_t>(0x24),
    __E_Lip_Funneler_RT = static_cast<int32_t>(0x25),
    __E_Lip_Pressor_L = static_cast<int32_t>(0x26),
    __E_Lip_Pressor_R = static_cast<int32_t>(0x27),
    __E_Lip_Pucker_L = static_cast<int32_t>(0x28),
    __E_Lip_Pucker_R = static_cast<int32_t>(0x29),
    __E_Lip_Stretcher_L = static_cast<int32_t>(0x2a),
    __E_Lip_Stretcher_R = static_cast<int32_t>(0x2b),
    __E_Lip_Suck_LB = static_cast<int32_t>(0x2c),
    __E_Lip_Suck_LT = static_cast<int32_t>(0x2d),
    __E_Lip_Suck_RB = static_cast<int32_t>(0x2e),
    __E_Lip_Suck_RT = static_cast<int32_t>(0x2f),
    __E_Lip_Tightener_L = static_cast<int32_t>(0x30),
    __E_Lip_Tightener_R = static_cast<int32_t>(0x31),
    __E_Lips_Toward = static_cast<int32_t>(0x32),
    __E_Lower_Lip_Depressor_L = static_cast<int32_t>(0x33),
    __E_Lower_Lip_Depressor_R = static_cast<int32_t>(0x34),
    __E_Mouth_Left = static_cast<int32_t>(0x35),
    __E_Mouth_Right = static_cast<int32_t>(0x36),
    __E_Nose_Wrinkler_L = static_cast<int32_t>(0x37),
    __E_Nose_Wrinkler_R = static_cast<int32_t>(0x38),
    __E_Outer_Brow_Raiser_L = static_cast<int32_t>(0x39),
    __E_Outer_Brow_Raiser_R = static_cast<int32_t>(0x3a),
    __E_Upper_Lid_Raiser_L = static_cast<int32_t>(0x3b),
    __E_Upper_Lid_Raiser_R = static_cast<int32_t>(0x3c),
    __E_Upper_Lip_Raiser_L = static_cast<int32_t>(0x3d),
    __E_Upper_Lip_Raiser_R = static_cast<int32_t>(0x3e),
    __E_Max = static_cast<int32_t>(0x3f),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_FaceExpression_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_FaceExpression_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_FaceExpression();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_FaceExpression(int32_t value__) noexcept;

  /// @brief Field Brow_Lowerer_L value: I32(0)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Brow_Lowerer_L;

  /// @brief Field Brow_Lowerer_R value: I32(1)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Brow_Lowerer_R;

  /// @brief Field Cheek_Puff_L value: I32(2)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Cheek_Puff_L;

  /// @brief Field Cheek_Puff_R value: I32(3)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Cheek_Puff_R;

  /// @brief Field Cheek_Raiser_L value: I32(4)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Cheek_Raiser_L;

  /// @brief Field Cheek_Raiser_R value: I32(5)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Cheek_Raiser_R;

  /// @brief Field Cheek_Suck_L value: I32(6)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Cheek_Suck_L;

  /// @brief Field Cheek_Suck_R value: I32(7)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Cheek_Suck_R;

  /// @brief Field Chin_Raiser_B value: I32(8)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Chin_Raiser_B;

  /// @brief Field Chin_Raiser_T value: I32(9)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Chin_Raiser_T;

  /// @brief Field Dimpler_L value: I32(10)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Dimpler_L;

  /// @brief Field Dimpler_R value: I32(11)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Dimpler_R;

  /// @brief Field Eyes_Closed_L value: I32(12)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Eyes_Closed_L;

  /// @brief Field Eyes_Closed_R value: I32(13)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Eyes_Closed_R;

  /// @brief Field Eyes_Look_Down_L value: I32(14)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Eyes_Look_Down_L;

  /// @brief Field Eyes_Look_Down_R value: I32(15)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Eyes_Look_Down_R;

  /// @brief Field Eyes_Look_Left_L value: I32(16)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Eyes_Look_Left_L;

  /// @brief Field Eyes_Look_Left_R value: I32(17)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Eyes_Look_Left_R;

  /// @brief Field Eyes_Look_Right_L value: I32(18)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Eyes_Look_Right_L;

  /// @brief Field Eyes_Look_Right_R value: I32(19)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Eyes_Look_Right_R;

  /// @brief Field Eyes_Look_Up_L value: I32(20)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Eyes_Look_Up_L;

  /// @brief Field Eyes_Look_Up_R value: I32(21)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Eyes_Look_Up_R;

  /// @brief Field Inner_Brow_Raiser_L value: I32(22)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Inner_Brow_Raiser_L;

  /// @brief Field Inner_Brow_Raiser_R value: I32(23)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Inner_Brow_Raiser_R;

  /// @brief Field Invalid value: I32(-1)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Invalid;

  /// @brief Field Jaw_Drop value: I32(24)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Jaw_Drop;

  /// @brief Field Jaw_Sideways_Left value: I32(25)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Jaw_Sideways_Left;

  /// @brief Field Jaw_Sideways_Right value: I32(26)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Jaw_Sideways_Right;

  /// @brief Field Jaw_Thrust value: I32(27)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Jaw_Thrust;

  /// @brief Field Lid_Tightener_L value: I32(28)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lid_Tightener_L;

  /// @brief Field Lid_Tightener_R value: I32(29)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lid_Tightener_R;

  /// @brief Field Lip_Corner_Depressor_L value: I32(30)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const
      Lip_Corner_Depressor_L;

  /// @brief Field Lip_Corner_Depressor_R value: I32(31)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const
      Lip_Corner_Depressor_R;

  /// @brief Field Lip_Corner_Puller_L value: I32(32)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Corner_Puller_L;

  /// @brief Field Lip_Corner_Puller_R value: I32(33)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Corner_Puller_R;

  /// @brief Field Lip_Funneler_LB value: I32(34)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Funneler_LB;

  /// @brief Field Lip_Funneler_LT value: I32(35)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Funneler_LT;

  /// @brief Field Lip_Funneler_RB value: I32(36)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Funneler_RB;

  /// @brief Field Lip_Funneler_RT value: I32(37)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Funneler_RT;

  /// @brief Field Lip_Pressor_L value: I32(38)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Pressor_L;

  /// @brief Field Lip_Pressor_R value: I32(39)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Pressor_R;

  /// @brief Field Lip_Pucker_L value: I32(40)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Pucker_L;

  /// @brief Field Lip_Pucker_R value: I32(41)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Pucker_R;

  /// @brief Field Lip_Stretcher_L value: I32(42)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Stretcher_L;

  /// @brief Field Lip_Stretcher_R value: I32(43)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Stretcher_R;

  /// @brief Field Lip_Suck_LB value: I32(44)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Suck_LB;

  /// @brief Field Lip_Suck_LT value: I32(45)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Suck_LT;

  /// @brief Field Lip_Suck_RB value: I32(46)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Suck_RB;

  /// @brief Field Lip_Suck_RT value: I32(47)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Suck_RT;

  /// @brief Field Lip_Tightener_L value: I32(48)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Tightener_L;

  /// @brief Field Lip_Tightener_R value: I32(49)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lip_Tightener_R;

  /// @brief Field Lips_Toward value: I32(50)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Lips_Toward;

  /// @brief Field Lower_Lip_Depressor_L value: I32(51)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const
      Lower_Lip_Depressor_L;

  /// @brief Field Lower_Lip_Depressor_R value: I32(52)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const
      Lower_Lip_Depressor_R;

  /// @brief Field Max value: I32(63)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Max;

  /// @brief Field Mouth_Left value: I32(53)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Mouth_Left;

  /// @brief Field Mouth_Right value: I32(54)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Mouth_Right;

  /// @brief Field Nose_Wrinkler_L value: I32(55)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Nose_Wrinkler_L;

  /// @brief Field Nose_Wrinkler_R value: I32(56)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Nose_Wrinkler_R;

  /// @brief Field Outer_Brow_Raiser_L value: I32(57)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Outer_Brow_Raiser_L;

  /// @brief Field Outer_Brow_Raiser_R value: I32(58)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Outer_Brow_Raiser_R;

  /// @brief Field Upper_Lid_Raiser_L value: I32(59)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Upper_Lid_Raiser_L;

  /// @brief Field Upper_Lid_Raiser_R value: I32(60)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Upper_Lid_Raiser_R;

  /// @brief Field Upper_Lip_Raiser_L value: I32(61)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Upper_Lip_Raiser_L;

  /// @brief Field Upper_Lip_Raiser_R value: I32(62)
  static ::GlobalNamespace::OVRPlugin_FaceExpression const Upper_Lip_Raiser_R;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8116};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceExpression, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_FaceExpression, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/FaceConstants
struct CORDL_TYPE OVRPlugin_FaceConstants {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_FaceConstants_Unwrapped
  enum struct __OVRPlugin_FaceConstants_Unwrapped : int32_t {
    __E_MaxFaceExpressions = static_cast<int32_t>(0x3f),
    __E_MaxFaceRegionConfidences = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_FaceConstants_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_FaceConstants_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_FaceConstants();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_FaceConstants(int32_t value__) noexcept;

  /// @brief Field MaxFaceExpressions value: I32(63)
  static ::GlobalNamespace::OVRPlugin_FaceConstants const MaxFaceExpressions;

  /// @brief Field MaxFaceRegionConfidences value: I32(2)
  static ::GlobalNamespace::OVRPlugin_FaceConstants const
      MaxFaceRegionConfidences;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8117};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_FaceConstants, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_FaceConstants, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Bool, OVRPlugin::Posef
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/EyeGazeState
struct CORDL_TYPE OVRPlugin_EyeGazeState {
public:
  // Declarations
  __declspec(property(get = get_IsValid)) bool IsValid;

  /// @brief Method get_IsValid, addr 0x3ff5448, size 0x10, virtual false,
  /// abstract: false, final false
  inline bool get_IsValid();

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_EyeGazeState();

  // Ctor Parameters [CppParam { name: "Pose", ty:
  // "::GlobalNamespace::OVRPlugin_Posef", modifiers: "", def_value: None },
  // CppParam { name: "Confidence", ty: "float_t", modifiers: "", def_value:
  // None }, CppParam { name: "_isValid", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None }]
  constexpr OVRPlugin_EyeGazeState(
      ::GlobalNamespace::OVRPlugin_Posef Pose, float_t Confidence,
      ::GlobalNamespace::OVRPlugin_Bool _isValid) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8118};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x24};

  /// @brief Field Pose, offset: 0x0, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef Pose;

  /// @brief Field Confidence, offset: 0x1c, size: 0x4, def value: None
  float_t Confidence;

  /// @brief Field _isValid, offset: 0x20, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool _isValid;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_EyeGazeState, Pose) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_EyeGazeState, Confidence) ==
                  0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_EyeGazeState, _isValid) ==
                  0x20,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_EyeGazeState, 0x24>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/EyeGazesState
struct CORDL_TYPE OVRPlugin_EyeGazesState {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_EyeGazesState();

  // Ctor Parameters [CppParam { name: "EyeGazes", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_EyeGazeState,::Array<::GlobalNamespace::OVRPlugin_EyeGazeState>*>",
  // modifiers: "", def_value: None }, CppParam { name: "Time", ty: "double_t",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_EyeGazesState(
      ::ArrayW<::GlobalNamespace::OVRPlugin_EyeGazeState,
               ::Array<::GlobalNamespace::OVRPlugin_EyeGazeState> *>
          EyeGazes,
      double_t Time) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8119};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field EyeGazes, offset: 0x0, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_EyeGazeState,
           ::Array<::GlobalNamespace::OVRPlugin_EyeGazeState> *>
      EyeGazes;

  /// @brief Field Time, offset: 0x8, size: 0x8, def value: None
  double_t Time;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_EyeGazesState, EyeGazes) ==
                  0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_EyeGazesState, Time) == 0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_EyeGazesState, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::EyeGazeState
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/EyeGazesStateInternal
struct CORDL_TYPE OVRPlugin_EyeGazesStateInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_EyeGazesStateInternal();

  // Ctor Parameters [CppParam { name: "EyeGazes_0", ty:
  // "::GlobalNamespace::OVRPlugin_EyeGazeState", modifiers: "", def_value: None
  // }, CppParam { name: "EyeGazes_1", ty:
  // "::GlobalNamespace::OVRPlugin_EyeGazeState", modifiers: "", def_value: None
  // }, CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None
  // }]
  constexpr OVRPlugin_EyeGazesStateInternal(
      ::GlobalNamespace::OVRPlugin_EyeGazeState EyeGazes_0,
      ::GlobalNamespace::OVRPlugin_EyeGazeState EyeGazes_1,
      double_t Time) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8120};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x50};

  /// @brief Field EyeGazes_0, offset: 0x0, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_EyeGazeState EyeGazes_0;

  /// @brief Field EyeGazes_1, offset: 0x24, size: 0x24, def value: None
  ::GlobalNamespace::OVRPlugin_EyeGazeState EyeGazes_1;

  /// @brief Field Time, offset: 0x48, size: 0x8, def value: None
  double_t Time;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_EyeGazesStateInternal,
                       EyeGazes_0) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_EyeGazesStateInternal,
                       EyeGazes_1) == 0x24,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_EyeGazesStateInternal,
                       Time) == 0x48,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_EyeGazesStateInternal, 0x50>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/ColorSpace
struct CORDL_TYPE OVRPlugin_ColorSpace {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_ColorSpace_Unwrapped
  enum struct __OVRPlugin_ColorSpace_Unwrapped : int32_t {
    __E_Unknown = static_cast<int32_t>(0x0),
    __E_Unmanaged = static_cast<int32_t>(0x1),
    __E_Rec_2020 = static_cast<int32_t>(0x2),
    __E_Rec_709 = static_cast<int32_t>(0x3),
    __E_Rift_CV1 = static_cast<int32_t>(0x4),
    __E_Rift_S = static_cast<int32_t>(0x5),
    __E_Quest = static_cast<int32_t>(0x6),
    __E_P3 = static_cast<int32_t>(0x7),
    __E_Adobe_RGB = static_cast<int32_t>(0x8),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_ColorSpace_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_ColorSpace_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_ColorSpace();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_ColorSpace(int32_t value__) noexcept;

  /// @brief Field Adobe_RGB value: I32(8)
  static ::GlobalNamespace::OVRPlugin_ColorSpace const Adobe_RGB;

  /// @brief Field P3 value: I32(7)
  static ::GlobalNamespace::OVRPlugin_ColorSpace const P3;

  /// @brief Field Quest value: I32(6)
  static ::GlobalNamespace::OVRPlugin_ColorSpace const Quest;

  /// @brief Field Rec_2020 value: I32(2)
  static ::GlobalNamespace::OVRPlugin_ColorSpace const Rec_2020;

  /// @brief Field Rec_709 value: I32(3)
  static ::GlobalNamespace::OVRPlugin_ColorSpace const Rec_709;

  /// @brief Field Rift_CV1 value: I32(4)
  static ::GlobalNamespace::OVRPlugin_ColorSpace const Rift_CV1;

  /// @brief Field Rift_S value: I32(5)
  static ::GlobalNamespace::OVRPlugin_ColorSpace const Rift_S;

  /// @brief Field Unknown value: I32(0)
  static ::GlobalNamespace::OVRPlugin_ColorSpace const Unknown;

  /// @brief Field Unmanaged value: I32(1)
  static ::GlobalNamespace::OVRPlugin_ColorSpace const Unmanaged;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8121};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_ColorSpace, value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_ColorSpace, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/EventType
struct CORDL_TYPE OVRPlugin_EventType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_EventType_Unwrapped
  enum struct __OVRPlugin_EventType_Unwrapped : int32_t {
    __E_Unknown = static_cast<int32_t>(0x0),
    __E_DisplayRefreshRateChanged = static_cast<int32_t>(0x1),
    __E_SpatialAnchorCreateComplete = static_cast<int32_t>(0x31),
    __E_SpaceSetComponentStatusComplete = static_cast<int32_t>(0x32),
    __E_SpaceQueryResults = static_cast<int32_t>(0x33),
    __E_SpaceQueryComplete = static_cast<int32_t>(0x34),
    __E_SpaceSaveComplete = static_cast<int32_t>(0x35),
    __E_SpaceEraseComplete = static_cast<int32_t>(0x36),
    __E_SpaceShareResult = static_cast<int32_t>(0x38),
    __E_SpaceListSaveResult = static_cast<int32_t>(0x39),
    __E_SceneCaptureComplete = static_cast<int32_t>(0x64),
    __E_VirtualKeyboardCommitText = static_cast<int32_t>(0xc9),
    __E_VirtualKeyboardBackspace = static_cast<int32_t>(0xca),
    __E_VirtualKeyboardEnter = static_cast<int32_t>(0xcb),
    __E_VirtualKeyboardShown = static_cast<int32_t>(0xcc),
    __E_VirtualKeyboardHidden = static_cast<int32_t>(0xcd),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_EventType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_EventType_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_EventType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_EventType(int32_t value__) noexcept;

  /// @brief Field DisplayRefreshRateChanged value: I32(1)
  static ::GlobalNamespace::OVRPlugin_EventType const DisplayRefreshRateChanged;

  /// @brief Field SceneCaptureComplete value: I32(100)
  static ::GlobalNamespace::OVRPlugin_EventType const SceneCaptureComplete;

  /// @brief Field SpaceEraseComplete value: I32(54)
  static ::GlobalNamespace::OVRPlugin_EventType const SpaceEraseComplete;

  /// @brief Field SpaceListSaveResult value: I32(57)
  static ::GlobalNamespace::OVRPlugin_EventType const SpaceListSaveResult;

  /// @brief Field SpaceQueryComplete value: I32(52)
  static ::GlobalNamespace::OVRPlugin_EventType const SpaceQueryComplete;

  /// @brief Field SpaceQueryResults value: I32(51)
  static ::GlobalNamespace::OVRPlugin_EventType const SpaceQueryResults;

  /// @brief Field SpaceSaveComplete value: I32(53)
  static ::GlobalNamespace::OVRPlugin_EventType const SpaceSaveComplete;

  /// @brief Field SpaceSetComponentStatusComplete value: I32(50)
  static ::GlobalNamespace::OVRPlugin_EventType const
      SpaceSetComponentStatusComplete;

  /// @brief Field SpaceShareResult value: I32(56)
  static ::GlobalNamespace::OVRPlugin_EventType const SpaceShareResult;

  /// @brief Field SpatialAnchorCreateComplete value: I32(49)
  static ::GlobalNamespace::OVRPlugin_EventType const
      SpatialAnchorCreateComplete;

  /// @brief Field Unknown value: I32(0)
  static ::GlobalNamespace::OVRPlugin_EventType const Unknown;

  /// @brief Field VirtualKeyboardBackspace value: I32(202)
  static ::GlobalNamespace::OVRPlugin_EventType const VirtualKeyboardBackspace;

  /// @brief Field VirtualKeyboardCommitText value: I32(201)
  static ::GlobalNamespace::OVRPlugin_EventType const VirtualKeyboardCommitText;

  /// @brief Field VirtualKeyboardEnter value: I32(203)
  static ::GlobalNamespace::OVRPlugin_EventType const VirtualKeyboardEnter;

  /// @brief Field VirtualKeyboardHidden value: I32(205)
  static ::GlobalNamespace::OVRPlugin_EventType const VirtualKeyboardHidden;

  /// @brief Field VirtualKeyboardShown value: I32(204)
  static ::GlobalNamespace::OVRPlugin_EventType const VirtualKeyboardShown;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8122};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_EventType, value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_EventType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::EventType
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/EventDataBuffer
struct CORDL_TYPE OVRPlugin_EventDataBuffer {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_EventDataBuffer();

  // Ctor Parameters [CppParam { name: "EventType", ty:
  // "::GlobalNamespace::OVRPlugin_EventType", modifiers: "", def_value: None },
  // CppParam { name: "EventData", ty: "::ArrayW<uint8_t,::Array<uint8_t>*>",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_EventDataBuffer(
      ::GlobalNamespace::OVRPlugin_EventType EventType,
      ::ArrayW<uint8_t, ::Array<uint8_t> *> EventData) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8123};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field EventType, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_EventType EventType;

  /// @brief Field EventData, offset: 0x8, size: 0x8, def value: None
  ::ArrayW<uint8_t, ::Array<uint8_t> *> EventData;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_EventDataBuffer,
                       EventType) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_EventDataBuffer,
                       EventData) == 0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_EventDataBuffer, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/RenderModelProperties
struct CORDL_TYPE OVRPlugin_RenderModelProperties {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_RenderModelProperties();

  // Ctor Parameters [CppParam { name: "ModelName", ty: "::StringW", modifiers:
  // "", def_value: None }, CppParam { name: "ModelKey", ty: "uint64_t",
  // modifiers: "", def_value: None }, CppParam { name: "VendorId", ty:
  // "uint32_t", modifiers: "", def_value: None }, CppParam { name:
  // "ModelVersion", ty: "uint32_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_RenderModelProperties(::StringW ModelName,
                                            uint64_t ModelKey,
                                            uint32_t VendorId,
                                            uint32_t ModelVersion) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8124};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x18};

  /// @brief Field ModelName, offset: 0x0, size: 0x8, def value: None
  ::StringW ModelName;

  /// @brief Field ModelKey, offset: 0x8, size: 0x8, def value: None
  uint64_t ModelKey;

  /// @brief Field VendorId, offset: 0x10, size: 0x4, def value: None
  uint32_t VendorId;

  /// @brief Field ModelVersion, offset: 0x14, size: 0x4, def value: None
  uint32_t ModelVersion;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_RenderModelProperties,
                       ModelName) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_RenderModelProperties,
                       ModelKey) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_RenderModelProperties,
                       VendorId) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_RenderModelProperties,
                       ModelVersion) == 0x14,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_RenderModelProperties, 0x18>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/RenderModelPropertiesInternal
struct CORDL_TYPE OVRPlugin_RenderModelPropertiesInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_RenderModelPropertiesInternal();

  // Ctor Parameters [CppParam { name: "ModelName", ty:
  // "::ArrayW<uint8_t,::Array<uint8_t>*>", modifiers: "", def_value: None },
  // CppParam { name: "ModelKey", ty: "uint64_t", modifiers: "", def_value: None
  // }, CppParam { name: "VendorId", ty: "uint32_t", modifiers: "", def_value:
  // None }, CppParam { name: "ModelVersion", ty: "uint32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_RenderModelPropertiesInternal(
      ::ArrayW<uint8_t, ::Array<uint8_t> *> ModelName, uint64_t ModelKey,
      uint32_t VendorId, uint32_t ModelVersion) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8125};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x18};

  /// @brief Field ModelName, offset: 0x0, size: 0x8, def value: None
  ::ArrayW<uint8_t, ::Array<uint8_t> *> ModelName;

  /// @brief Field ModelKey, offset: 0x8, size: 0x8, def value: None
  uint64_t ModelKey;

  /// @brief Field VendorId, offset: 0x10, size: 0x4, def value: None
  uint32_t VendorId;

  /// @brief Field ModelVersion, offset: 0x14, size: 0x4, def value: None
  uint32_t ModelVersion;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_RenderModelPropertiesInternal,
             ModelName) == 0x0,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_RenderModelPropertiesInternal,
             ModelKey) == 0x8,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_RenderModelPropertiesInternal,
             VendorId) == 0x10,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_RenderModelPropertiesInternal,
             ModelVersion) == 0x14,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_RenderModelPropertiesInternal, 0x18>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/RenderModelFlags
struct CORDL_TYPE OVRPlugin_RenderModelFlags {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_RenderModelFlags_Unwrapped
  enum struct __OVRPlugin_RenderModelFlags_Unwrapped : int32_t {
    __E_SupportsGltf20Subset1 = static_cast<int32_t>(0x1),
    __E_SupportsGltf20Subset2 = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_RenderModelFlags_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_RenderModelFlags_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_RenderModelFlags();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_RenderModelFlags(int32_t value__) noexcept;

  /// @brief Field SupportsGltf20Subset1 value: I32(1)
  static ::GlobalNamespace::OVRPlugin_RenderModelFlags const
      SupportsGltf20Subset1;

  /// @brief Field SupportsGltf20Subset2 value: I32(2)
  static ::GlobalNamespace::OVRPlugin_RenderModelFlags const
      SupportsGltf20Subset2;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8126};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_RenderModelFlags,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_RenderModelFlags, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardLocationType
struct CORDL_TYPE OVRPlugin_VirtualKeyboardLocationType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_VirtualKeyboardLocationType_Unwrapped
  enum struct __OVRPlugin_VirtualKeyboardLocationType_Unwrapped : int32_t {
    __E_Custom = static_cast<int32_t>(0x0),
    __E_Far = static_cast<int32_t>(0x1),
    __E_Direct = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_VirtualKeyboardLocationType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_VirtualKeyboardLocationType_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardLocationType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardLocationType(int32_t value__) noexcept;

  /// @brief Field Custom value: I32(0)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType const Custom;

  /// @brief Field Direct value: I32(2)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType const Direct;

  /// @brief Field Far value: I32(1)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType const Far;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8127};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Posef, OVRPlugin::VirtualKeyboardLocationType
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardSpaceCreateInfo
struct CORDL_TYPE OVRPlugin_VirtualKeyboardSpaceCreateInfo {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardSpaceCreateInfo();

  // Ctor Parameters [CppParam { name: "locationType", ty:
  // "::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType", modifiers: "",
  // def_value: None }, CppParam { name: "pose", ty:
  // "::GlobalNamespace::OVRPlugin_Posef", modifiers: "", def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardSpaceCreateInfo(
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType locationType,
      ::GlobalNamespace::OVRPlugin_Posef pose) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8128};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x20};

  /// @brief Field locationType, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType locationType;

  /// @brief Field pose, offset: 0x4, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef pose;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardSpaceCreateInfo,
             locationType) == 0x0,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardSpaceCreateInfo,
             pose) == 0x4,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_VirtualKeyboardSpaceCreateInfo, 0x20>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Posef, OVRPlugin::VirtualKeyboardLocationType
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardLocationInfo
struct CORDL_TYPE OVRPlugin_VirtualKeyboardLocationInfo {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardLocationInfo();

  // Ctor Parameters [CppParam { name: "locationType", ty:
  // "::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType", modifiers: "",
  // def_value: None }, CppParam { name: "pose", ty:
  // "::GlobalNamespace::OVRPlugin_Posef", modifiers: "", def_value: None },
  // CppParam { name: "scale", ty: "float_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardLocationInfo(
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType locationType,
      ::GlobalNamespace::OVRPlugin_Posef pose, float_t scale) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8129};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x24};

  /// @brief Field locationType, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType locationType;

  /// @brief Field pose, offset: 0x4, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef pose;

  /// @brief Field scale, offset: 0x20, size: 0x4, def value: None
  float_t scale;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationInfo,
                       locationType) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationInfo,
                       pose) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationInfo,
                       scale) == 0x20,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationInfo, 0x24>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardCreateInfo
struct CORDL_TYPE OVRPlugin_VirtualKeyboardCreateInfo {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardCreateInfo();

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8130};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x1};

  /// @brief Size padding 0x1 - 0x0 = 0x1, packed as 0x1
  uint8_t _cordl_size_padding[0x1];

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_VirtualKeyboardCreateInfo, 0x1>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardInputSource
struct CORDL_TYPE OVRPlugin_VirtualKeyboardInputSource {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_VirtualKeyboardInputSource_Unwrapped
  enum struct __OVRPlugin_VirtualKeyboardInputSource_Unwrapped : int32_t {
    __E_Invalid = static_cast<int32_t>(0x0),
    __E_ControllerRayLeft = static_cast<int32_t>(0x1),
    __E_ControllerRayRight = static_cast<int32_t>(0x2),
    __E_HandRayLeft = static_cast<int32_t>(0x3),
    __E_HandRayRight = static_cast<int32_t>(0x4),
    __E_ControllerDirectLeft = static_cast<int32_t>(0x5),
    __E_ControllerDirectRight = static_cast<int32_t>(0x6),
    __E_HandDirectIndexTipLeft = static_cast<int32_t>(0x7),
    __E_HandDirectIndexTipRight = static_cast<int32_t>(0x8),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_VirtualKeyboardInputSource_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_VirtualKeyboardInputSource_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardInputSource();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardInputSource(int32_t value__) noexcept;

  /// @brief Field ControllerDirectLeft value: I32(5)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource const
      ControllerDirectLeft;

  /// @brief Field ControllerDirectRight value: I32(6)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource const
      ControllerDirectRight;

  /// @brief Field ControllerRayLeft value: I32(1)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource const
      ControllerRayLeft;

  /// @brief Field ControllerRayRight value: I32(2)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource const
      ControllerRayRight;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource const EnumSize;

  /// @brief Field HandDirectIndexTipLeft value: I32(7)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource const
      HandDirectIndexTipLeft;

  /// @brief Field HandDirectIndexTipRight value: I32(8)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource const
      HandDirectIndexTipRight;

  /// @brief Field HandRayLeft value: I32(3)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource const
      HandRayLeft;

  /// @brief Field HandRayRight value: I32(4)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource const
      HandRayRight;

  /// @brief Field Invalid value: I32(0)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource const Invalid;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8131};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardInputStateFlags
struct CORDL_TYPE OVRPlugin_VirtualKeyboardInputStateFlags {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = uint64_t;

  /// @brief Nested struct __OVRPlugin_VirtualKeyboardInputStateFlags_Unwrapped
  enum struct __OVRPlugin_VirtualKeyboardInputStateFlags_Unwrapped : uint64_t {
    __E_IsPressed = static_cast<uint64_t>(0x1u),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_VirtualKeyboardInputStateFlags_Unwrapped()
      const noexcept {
    return static_cast<__OVRPlugin_VirtualKeyboardInputStateFlags_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator uint64_t() const noexcept {
    return static_cast<uint64_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardInputStateFlags();

  // Ctor Parameters [CppParam { name: "value__", ty: "uint64_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardInputStateFlags(uint64_t value__) noexcept;

  /// @brief Field IsPressed value: U64(1)
  static ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputStateFlags const
      IsPressed;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8132};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field value__, offset: 0x0, size: 0x8, def value: None
  uint64_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardInputStateFlags,
             value__) == 0x0,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputStateFlags, 0x8>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Posef, OVRPlugin::VirtualKeyboardInputSource,
// OVRPlugin::VirtualKeyboardInputStateFlags
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardInputInfo
struct CORDL_TYPE OVRPlugin_VirtualKeyboardInputInfo {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardInputInfo();

  // Ctor Parameters [CppParam { name: "inputSource", ty:
  // "::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource", modifiers: "",
  // def_value: None }, CppParam { name: "inputPose", ty:
  // "::GlobalNamespace::OVRPlugin_Posef", modifiers: "", def_value: None },
  // CppParam { name: "inputState", ty:
  // "::GlobalNamespace::OVRPlugin_VirtualKeyboardInputStateFlags", modifiers:
  // "", def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardInputInfo(
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource inputSource,
      ::GlobalNamespace::OVRPlugin_Posef inputPose,
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputStateFlags
          inputState) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8133};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x28};

  /// @brief Field inputSource, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource inputSource;

  /// @brief Field inputPose, offset: 0x4, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef inputPose;

  /// @brief Field inputState, offset: 0x20, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputStateFlags inputState;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardInputInfo,
                       inputSource) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardInputInfo,
                       inputPose) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardInputInfo,
                       inputState) == 0x20,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputInfo, 0x28>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardModelAnimationState
struct CORDL_TYPE OVRPlugin_VirtualKeyboardModelAnimationState {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardModelAnimationState();

  // Ctor Parameters [CppParam { name: "AnimationIndex", ty: "int32_t",
  // modifiers: "", def_value: None }, CppParam { name: "Fraction", ty:
  // "float_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardModelAnimationState(
      int32_t AnimationIndex, float_t Fraction) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8134};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field AnimationIndex, offset: 0x0, size: 0x4, def value: None
  int32_t AnimationIndex;

  /// @brief Field Fraction, offset: 0x4, size: 0x4, def value: None
  float_t Fraction;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationState,
             AnimationIndex) == 0x0,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationState,
             Fraction) == 0x4,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationState, 0x8>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardModelAnimationStates
struct CORDL_TYPE OVRPlugin_VirtualKeyboardModelAnimationStates {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardModelAnimationStates();

  // Ctor Parameters [CppParam { name: "States", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationState,::Array<::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationState>*>",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardModelAnimationStates(
      ::ArrayW<::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationState,
               ::Array<::GlobalNamespace::
                           OVRPlugin_VirtualKeyboardModelAnimationState> *>
          States) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8135};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field States, offset: 0x0, size: 0x8, def value: None
  ::ArrayW<
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationState,
      ::Array<::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationState>
          *>
      States;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationStates,
             States) == 0x0,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationStates, 0x8>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardModelAnimationStatesInternal
struct CORDL_TYPE OVRPlugin_VirtualKeyboardModelAnimationStatesInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardModelAnimationStatesInternal();

  // Ctor Parameters [CppParam { name: "StateCapacityInput", ty: "uint32_t",
  // modifiers: "", def_value: None }, CppParam { name: "StateCountOutput", ty:
  // "uint32_t", modifiers: "", def_value: None }, CppParam { name:
  // "StatesBuffer", ty: "::System::IntPtr", modifiers: "", def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardModelAnimationStatesInternal(
      uint32_t StateCapacityInput, uint32_t StateCountOutput,
      ::System::IntPtr StatesBuffer) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8136};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field StateCapacityInput, offset: 0x0, size: 0x4, def value: None
  uint32_t StateCapacityInput;

  /// @brief Field StateCountOutput, offset: 0x4, size: 0x4, def value: None
  uint32_t StateCountOutput;

  /// @brief Field StatesBuffer, offset: 0x8, size: 0x8, def value: None
  ::System::IntPtr StatesBuffer;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::
                 OVRPlugin_VirtualKeyboardModelAnimationStatesInternal,
             StateCapacityInput) == 0x0,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::
                 OVRPlugin_VirtualKeyboardModelAnimationStatesInternal,
             StateCountOutput) == 0x4,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::
                 OVRPlugin_VirtualKeyboardModelAnimationStatesInternal,
             StatesBuffer) == 0x8,
    "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::
                      OVRPlugin_VirtualKeyboardModelAnimationStatesInternal,
                  0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardTextureIds
struct CORDL_TYPE OVRPlugin_VirtualKeyboardTextureIds {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardTextureIds();

  // Ctor Parameters [CppParam { name: "TextureIds", ty:
  // "::ArrayW<uint64_t,::Array<uint64_t>*>", modifiers: "", def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardTextureIds(
      ::ArrayW<uint64_t, ::Array<uint64_t> *> TextureIds) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8137};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field TextureIds, offset: 0x0, size: 0x8, def value: None
  ::ArrayW<uint64_t, ::Array<uint64_t> *> TextureIds;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIds,
                       TextureIds) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIds, 0x8>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardTextureIdsInternal
struct CORDL_TYPE OVRPlugin_VirtualKeyboardTextureIdsInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardTextureIdsInternal();

  // Ctor Parameters [CppParam { name: "TextureIdCapacityInput", ty: "uint32_t",
  // modifiers: "", def_value: None }, CppParam { name: "TextureIdCountOutput",
  // ty: "uint32_t", modifiers: "", def_value: None }, CppParam { name:
  // "TextureIdsBuffer", ty: "::System::IntPtr", modifiers: "", def_value: None
  // }]
  constexpr OVRPlugin_VirtualKeyboardTextureIdsInternal(
      uint32_t TextureIdCapacityInput, uint32_t TextureIdCountOutput,
      ::System::IntPtr TextureIdsBuffer) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8138};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field TextureIdCapacityInput, offset: 0x0, size: 0x4, def value:
  /// None
  uint32_t TextureIdCapacityInput;

  /// @brief Field TextureIdCountOutput, offset: 0x4, size: 0x4, def value: None
  uint32_t TextureIdCountOutput;

  /// @brief Field TextureIdsBuffer, offset: 0x8, size: 0x8, def value: None
  ::System::IntPtr TextureIdsBuffer;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIdsInternal,
             TextureIdCapacityInput) == 0x0,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIdsInternal,
             TextureIdCountOutput) == 0x4,
    "Offset mismatch!");

static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIdsInternal,
             TextureIdsBuffer) == 0x8,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIdsInternal, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardTextureData
struct CORDL_TYPE OVRPlugin_VirtualKeyboardTextureData {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardTextureData();

  // Ctor Parameters [CppParam { name: "TextureWidth", ty: "uint32_t",
  // modifiers: "", def_value: None }, CppParam { name: "TextureHeight", ty:
  // "uint32_t", modifiers: "", def_value: None }, CppParam { name:
  // "BufferCapacityInput", ty: "uint32_t", modifiers: "", def_value: None },
  // CppParam { name: "BufferCountOutput", ty: "uint32_t", modifiers: "",
  // def_value: None }, CppParam { name: "Buffer", ty: "::System::IntPtr",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardTextureData(
      uint32_t TextureWidth, uint32_t TextureHeight,
      uint32_t BufferCapacityInput, uint32_t BufferCountOutput,
      ::System::IntPtr Buffer) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8139};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x18};

  /// @brief Field TextureWidth, offset: 0x0, size: 0x4, def value: None
  uint32_t TextureWidth;

  /// @brief Field TextureHeight, offset: 0x4, size: 0x4, def value: None
  uint32_t TextureHeight;

  /// @brief Field BufferCapacityInput, offset: 0x8, size: 0x4, def value: None
  uint32_t BufferCapacityInput;

  /// @brief Field BufferCountOutput, offset: 0xc, size: 0x4, def value: None
  uint32_t BufferCountOutput;

  /// @brief Field Buffer, offset: 0x10, size: 0x8, def value: None
  ::System::IntPtr Buffer;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureData,
                       TextureWidth) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureData,
                       TextureHeight) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureData,
                       BufferCapacityInput) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureData,
                       BufferCountOutput) == 0xc,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureData,
                       Buffer) == 0x10,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureData, 0x18>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Bool
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/VirtualKeyboardModelVisibility
struct CORDL_TYPE OVRPlugin_VirtualKeyboardModelVisibility {
public:
  // Declarations
  __declspec(property(get = get_Visible, put = set_Visible)) bool Visible;

  /// @brief Method get_Visible, addr 0x3ff5458, size 0x10, virtual false,
  /// abstract: false, final false
  inline bool get_Visible();

  /// @brief Method set_Visible, addr 0x3ff5468, size 0xc, virtual false,
  /// abstract: false, final false
  inline void set_Visible(bool value);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_VirtualKeyboardModelVisibility();

  // Ctor Parameters [CppParam { name: "_visible", ty:
  // "::GlobalNamespace::OVRPlugin_Bool", modifiers: "", def_value: None }]
  constexpr OVRPlugin_VirtualKeyboardModelVisibility(
      ::GlobalNamespace::OVRPlugin_Bool _visible) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8140};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field _visible, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_Bool _visible;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_VirtualKeyboardModelVisibility,
             _visible) == 0x0,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelVisibility, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/InsightPassthroughColorMapType
struct CORDL_TYPE OVRPlugin_InsightPassthroughColorMapType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_InsightPassthroughColorMapType_Unwrapped
  enum struct __OVRPlugin_InsightPassthroughColorMapType_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0x0),
    __E_MonoToRgba = static_cast<int32_t>(0x1),
    __E_MonoToMono = static_cast<int32_t>(0x2),
    __E_BrightnessContrastSaturation = static_cast<int32_t>(0x4),
    __E_ColorLut = static_cast<int32_t>(0x6),
    __E_InterpolatedColorLut = static_cast<int32_t>(0x7),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_InsightPassthroughColorMapType_Unwrapped()
      const noexcept {
    return static_cast<__OVRPlugin_InsightPassthroughColorMapType_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_InsightPassthroughColorMapType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_InsightPassthroughColorMapType(int32_t value__) noexcept;

  /// @brief Field BrightnessContrastSaturation value: I32(4)
  static ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType const
      BrightnessContrastSaturation;

  /// @brief Field ColorLut value: I32(6)
  static ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType const
      ColorLut;

  /// @brief Field InterpolatedColorLut value: I32(7)
  static ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType const
      InterpolatedColorLut;

  /// @brief Field MonoToMono value: I32(2)
  static ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType const
      MonoToMono;

  /// @brief Field MonoToRgba value: I32(1)
  static ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType const
      MonoToRgba;

  /// @brief Field None value: I32(0)
  static ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType const None;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8141};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType,
             value__) == 0x0,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/InsightPassthroughStyleFlags
struct CORDL_TYPE OVRPlugin_InsightPassthroughStyleFlags {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_InsightPassthroughStyleFlags_Unwrapped
  enum struct __OVRPlugin_InsightPassthroughStyleFlags_Unwrapped : int32_t {
    __E_HasTextureOpacityFactor = static_cast<int32_t>(0x1),
    __E_HasEdgeColor = static_cast<int32_t>(0x2),
    __E_HasTextureColorMap = static_cast<int32_t>(0x4),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_InsightPassthroughStyleFlags_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_InsightPassthroughStyleFlags_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_InsightPassthroughStyleFlags();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_InsightPassthroughStyleFlags(int32_t value__) noexcept;

  /// @brief Field HasEdgeColor value: I32(2)
  static ::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags const
      HasEdgeColor;

  /// @brief Field HasTextureColorMap value: I32(4)
  static ::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags const
      HasTextureColorMap;

  /// @brief Field HasTextureOpacityFactor value: I32(1)
  static ::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags const
      HasTextureOpacityFactor;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8142};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags,
             value__) == 0x0,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Colorf, OVRPlugin::InsightPassthroughColorMapType,
// OVRPlugin::InsightPassthroughStyleFlags, System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/InsightPassthroughStyle
struct CORDL_TYPE OVRPlugin_InsightPassthroughStyle {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_InsightPassthroughStyle();

  // Ctor Parameters [CppParam { name: "Flags", ty:
  // "::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags", modifiers: "",
  // def_value: None }, CppParam { name: "TextureOpacityFactor", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "EdgeColor", ty:
  // "::GlobalNamespace::OVRPlugin_Colorf", modifiers: "", def_value: None },
  // CppParam { name: "TextureColorMapType", ty:
  // "::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType", modifiers:
  // "", def_value: None }, CppParam { name: "TextureColorMapDataSize", ty:
  // "uint32_t", modifiers: "", def_value: None }, CppParam { name:
  // "TextureColorMapData", ty: "::System::IntPtr", modifiers: "", def_value:
  // None }]
  constexpr OVRPlugin_InsightPassthroughStyle(
      ::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags Flags,
      float_t TextureOpacityFactor,
      ::GlobalNamespace::OVRPlugin_Colorf EdgeColor,
      ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType
          TextureColorMapType,
      uint32_t TextureColorMapDataSize,
      ::System::IntPtr TextureColorMapData) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8143};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x28};

  /// @brief Field Flags, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags Flags;

  /// @brief Field TextureOpacityFactor, offset: 0x4, size: 0x4, def value: None
  float_t TextureOpacityFactor;

  /// @brief Field EdgeColor, offset: 0x8, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Colorf EdgeColor;

  /// @brief Field TextureColorMapType, offset: 0x18, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType
      TextureColorMapType;

  /// @brief Field TextureColorMapDataSize, offset: 0x1c, size: 0x4, def value:
  /// None
  uint32_t TextureColorMapDataSize;

  /// @brief Field TextureColorMapData, offset: 0x20, size: 0x8, def value: None
  ::System::IntPtr TextureColorMapData;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle,
                       Flags) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle,
                       TextureOpacityFactor) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle,
                       EdgeColor) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle,
                       TextureColorMapType) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle,
                       TextureColorMapDataSize) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle,
                       TextureColorMapData) == 0x20,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_InsightPassthroughStyle, 0x28>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Colorf, OVRPlugin::InsightPassthroughColorMapType,
// OVRPlugin::InsightPassthroughStyleFlags, System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/InsightPassthroughStyle2
struct CORDL_TYPE OVRPlugin_InsightPassthroughStyle2 {
public:
  // Declarations
  /// @brief Method CopyTo, addr 0x3ff5474, size 0x2c, virtual false, abstract:
  /// false, final false
  inline void
  CopyTo(::ByRef<::GlobalNamespace::OVRPlugin_InsightPassthroughStyle> target);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_InsightPassthroughStyle2();

  // Ctor Parameters [CppParam { name: "Flags", ty:
  // "::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags", modifiers: "",
  // def_value: None }, CppParam { name: "TextureOpacityFactor", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "EdgeColor", ty:
  // "::GlobalNamespace::OVRPlugin_Colorf", modifiers: "", def_value: None },
  // CppParam { name: "TextureColorMapType", ty:
  // "::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType", modifiers:
  // "", def_value: None }, CppParam { name: "TextureColorMapDataSize", ty:
  // "uint32_t", modifiers: "", def_value: None }, CppParam { name:
  // "TextureColorMapData", ty: "::System::IntPtr", modifiers: "", def_value:
  // None }, CppParam { name: "LutSource", ty: "uint64_t", modifiers: "",
  // def_value: None }, CppParam { name: "LutTarget", ty: "uint64_t", modifiers:
  // "", def_value: None }, CppParam { name: "LutWeight", ty: "float_t",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_InsightPassthroughStyle2(
      ::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags Flags,
      float_t TextureOpacityFactor,
      ::GlobalNamespace::OVRPlugin_Colorf EdgeColor,
      ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType
          TextureColorMapType,
      uint32_t TextureColorMapDataSize, ::System::IntPtr TextureColorMapData,
      uint64_t LutSource, uint64_t LutTarget, float_t LutWeight) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8144};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x40};

  /// @brief Field Flags, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags Flags;

  /// @brief Field TextureOpacityFactor, offset: 0x4, size: 0x4, def value: None
  float_t TextureOpacityFactor;

  /// @brief Field EdgeColor, offset: 0x8, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_Colorf EdgeColor;

  /// @brief Field TextureColorMapType, offset: 0x18, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType
      TextureColorMapType;

  /// @brief Field TextureColorMapDataSize, offset: 0x1c, size: 0x4, def value:
  /// None
  uint32_t TextureColorMapDataSize;

  /// @brief Field TextureColorMapData, offset: 0x20, size: 0x8, def value: None
  ::System::IntPtr TextureColorMapData;

  /// @brief Field LutSource, offset: 0x28, size: 0x8, def value: None
  uint64_t LutSource;

  /// @brief Field LutTarget, offset: 0x30, size: 0x8, def value: None
  uint64_t LutTarget;

  /// @brief Field LutWeight, offset: 0x38, size: 0x4, def value: None
  float_t LutWeight;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2,
                       Flags) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2,
                       TextureOpacityFactor) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2,
                       EdgeColor) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2,
                       TextureColorMapType) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2,
                       TextureColorMapDataSize) == 0x1c,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2,
                       TextureColorMapData) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2,
                       LutSource) == 0x28,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2,
                       LutTarget) == 0x30,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2,
                       LutWeight) == 0x38,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2, 0x40>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PassthroughColorLutChannels
struct CORDL_TYPE OVRPlugin_PassthroughColorLutChannels {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_PassthroughColorLutChannels_Unwrapped
  enum struct __OVRPlugin_PassthroughColorLutChannels_Unwrapped : int32_t {
    __E_Rgb = static_cast<int32_t>(0x1),
    __E_Rgba = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_PassthroughColorLutChannels_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_PassthroughColorLutChannels_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PassthroughColorLutChannels();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_PassthroughColorLutChannels(int32_t value__) noexcept;

  /// @brief Field Rgb value: I32(1)
  static ::GlobalNamespace::OVRPlugin_PassthroughColorLutChannels const Rgb;

  /// @brief Field Rgba value: I32(2)
  static ::GlobalNamespace::OVRPlugin_PassthroughColorLutChannels const Rgba;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8145};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughColorLutChannels,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_PassthroughColorLutChannels, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PassthroughColorLutData
struct CORDL_TYPE OVRPlugin_PassthroughColorLutData {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PassthroughColorLutData();

  // Ctor Parameters [CppParam { name: "BufferSize", ty: "uint32_t", modifiers:
  // "", def_value: None }, CppParam { name: "Buffer", ty: "::System::IntPtr",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_PassthroughColorLutData(uint32_t BufferSize,
                                              ::System::IntPtr Buffer) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8146};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field BufferSize, offset: 0x0, size: 0x4, def value: None
  uint32_t BufferSize;

  /// @brief Field Buffer, offset: 0x8, size: 0x8, def value: None
  ::System::IntPtr Buffer;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughColorLutData,
                       BufferSize) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughColorLutData,
                       Buffer) == 0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_PassthroughColorLutData, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/InsightPassthroughKeyboardHandsIntensity
struct CORDL_TYPE OVRPlugin_InsightPassthroughKeyboardHandsIntensity {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_InsightPassthroughKeyboardHandsIntensity();

  // Ctor Parameters [CppParam { name: "LeftHandIntensity", ty: "float_t",
  // modifiers: "", def_value: None }, CppParam { name: "RightHandIntensity",
  // ty: "float_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_InsightPassthroughKeyboardHandsIntensity(
      float_t LeftHandIntensity, float_t RightHandIntensity) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8147};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field LeftHandIntensity, offset: 0x0, size: 0x4, def value: None
  float_t LeftHandIntensity;

  /// @brief Field RightHandIntensity, offset: 0x4, size: 0x4, def value: None
  float_t RightHandIntensity;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(
    offsetof(
        ::GlobalNamespace::OVRPlugin_InsightPassthroughKeyboardHandsIntensity,
        LeftHandIntensity) == 0x0,
    "Offset mismatch!");

static_assert(
    offsetof(
        ::GlobalNamespace::OVRPlugin_InsightPassthroughKeyboardHandsIntensity,
        RightHandIntensity) == 0x4,
    "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_InsightPassthroughKeyboardHandsIntensity,
        0x8>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PassthroughCapabilityFlags
struct CORDL_TYPE OVRPlugin_PassthroughCapabilityFlags {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_PassthroughCapabilityFlags_Unwrapped
  enum struct __OVRPlugin_PassthroughCapabilityFlags_Unwrapped : int32_t {
    __E_Passthrough = static_cast<int32_t>(0x1),
    __E_Color = static_cast<int32_t>(0x2),
    __E_Depth = static_cast<int32_t>(0x4),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_PassthroughCapabilityFlags_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_PassthroughCapabilityFlags_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PassthroughCapabilityFlags();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_PassthroughCapabilityFlags(int32_t value__) noexcept;

  /// @brief Field Color value: I32(2)
  static ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags const Color;

  /// @brief Field Depth value: I32(4)
  static ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags const Depth;

  /// @brief Field Passthrough value: I32(1)
  static ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags const
      Passthrough;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8148};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PassthroughCapabilityFields
struct CORDL_TYPE OVRPlugin_PassthroughCapabilityFields {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_PassthroughCapabilityFields_Unwrapped
  enum struct __OVRPlugin_PassthroughCapabilityFields_Unwrapped : int32_t {
    __E_Flags = static_cast<int32_t>(0x1),
    __E_MaxColorLutResolution = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_PassthroughCapabilityFields_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_PassthroughCapabilityFields_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PassthroughCapabilityFields();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_PassthroughCapabilityFields(int32_t value__) noexcept;

  /// @brief Field Flags value: I32(1)
  static ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFields const Flags;

  /// @brief Field MaxColorLutResolution value: I32(2)
  static ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFields const
      MaxColorLutResolution;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8149};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughCapabilityFields,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFields, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::PassthroughCapabilityFields,
// OVRPlugin::PassthroughCapabilityFlags
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PassthroughCapabilities
struct CORDL_TYPE OVRPlugin_PassthroughCapabilities {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PassthroughCapabilities();

  // Ctor Parameters [CppParam { name: "Fields", ty:
  // "::GlobalNamespace::OVRPlugin_PassthroughCapabilityFields", modifiers: "",
  // def_value: None }, CppParam { name: "Flags", ty:
  // "::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags", modifiers: "",
  // def_value: None }, CppParam { name: "MaxColorLutResolution", ty:
  // "uint32_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_PassthroughCapabilities(
      ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFields Fields,
      ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags Flags,
      uint32_t MaxColorLutResolution) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8150};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0xc};

  /// @brief Field Fields, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFields Fields;

  /// @brief Field Flags, offset: 0x4, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags Flags;

  /// @brief Field MaxColorLutResolution, offset: 0x8, size: 0x4, def value:
  /// None
  uint32_t MaxColorLutResolution;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughCapabilities,
                       Fields) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughCapabilities,
                       Flags) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughCapabilities,
                       MaxColorLutResolution) == 0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_PassthroughCapabilities, 0xc>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceComponentType
struct CORDL_TYPE OVRPlugin_SpaceComponentType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_SpaceComponentType_Unwrapped
  enum struct __OVRPlugin_SpaceComponentType_Unwrapped : int32_t {
    __E_Locatable = static_cast<int32_t>(0x0),
    __E_Storable = static_cast<int32_t>(0x1),
    __E_Sharable = static_cast<int32_t>(0x2),
    __E_Bounded2D = static_cast<int32_t>(0x3),
    __E_Bounded3D = static_cast<int32_t>(0x4),
    __E_SemanticLabels = static_cast<int32_t>(0x5),
    __E_RoomLayout = static_cast<int32_t>(0x6),
    __E_SpaceContainer = static_cast<int32_t>(0x7),
    __E_TriangleMesh = static_cast<int32_t>(0x3b9ee4c8),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_SpaceComponentType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_SpaceComponentType_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceComponentType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SpaceComponentType(int32_t value__) noexcept;

  /// @brief Field Bounded2D value: I32(3)
  static ::GlobalNamespace::OVRPlugin_SpaceComponentType const Bounded2D;

  /// @brief Field Bounded3D value: I32(4)
  static ::GlobalNamespace::OVRPlugin_SpaceComponentType const Bounded3D;

  /// @brief Field Locatable value: I32(0)
  static ::GlobalNamespace::OVRPlugin_SpaceComponentType const Locatable;

  /// @brief Field RoomLayout value: I32(6)
  static ::GlobalNamespace::OVRPlugin_SpaceComponentType const RoomLayout;

  /// @brief Field SemanticLabels value: I32(5)
  static ::GlobalNamespace::OVRPlugin_SpaceComponentType const SemanticLabels;

  /// @brief Field Sharable value: I32(2)
  static ::GlobalNamespace::OVRPlugin_SpaceComponentType const Sharable;

  /// @brief Field SpaceContainer value: I32(7)
  static ::GlobalNamespace::OVRPlugin_SpaceComponentType const SpaceContainer;

  /// @brief Field Storable value: I32(1)
  static ::GlobalNamespace::OVRPlugin_SpaceComponentType const Storable;

  /// @brief Field TriangleMesh value: I32(1000269000)
  static ::GlobalNamespace::OVRPlugin_SpaceComponentType const TriangleMesh;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8151};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceComponentType,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceComponentType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceStorageLocation
struct CORDL_TYPE OVRPlugin_SpaceStorageLocation {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_SpaceStorageLocation_Unwrapped
  enum struct __OVRPlugin_SpaceStorageLocation_Unwrapped : int32_t {
    __E_Invalid = static_cast<int32_t>(0x0),
    __E_Local = static_cast<int32_t>(0x1),
    __E_Cloud = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_SpaceStorageLocation_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_SpaceStorageLocation_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceStorageLocation();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SpaceStorageLocation(int32_t value__) noexcept;

  /// @brief Field Cloud value: I32(2)
  static ::GlobalNamespace::OVRPlugin_SpaceStorageLocation const Cloud;

  /// @brief Field Invalid value: I32(0)
  static ::GlobalNamespace::OVRPlugin_SpaceStorageLocation const Invalid;

  /// @brief Field Local value: I32(1)
  static ::GlobalNamespace::OVRPlugin_SpaceStorageLocation const Local;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8152};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceStorageLocation,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceStorageLocation, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceStoragePersistenceMode
struct CORDL_TYPE OVRPlugin_SpaceStoragePersistenceMode {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_SpaceStoragePersistenceMode_Unwrapped
  enum struct __OVRPlugin_SpaceStoragePersistenceMode_Unwrapped : int32_t {
    __E_Invalid = static_cast<int32_t>(0x0),
    __E_Indefinite = static_cast<int32_t>(0x1),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_SpaceStoragePersistenceMode_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_SpaceStoragePersistenceMode_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceStoragePersistenceMode();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SpaceStoragePersistenceMode(int32_t value__) noexcept;

  /// @brief Field Indefinite value: I32(1)
  static ::GlobalNamespace::OVRPlugin_SpaceStoragePersistenceMode const
      Indefinite;

  /// @brief Field Invalid value: I32(0)
  static ::GlobalNamespace::OVRPlugin_SpaceStoragePersistenceMode const Invalid;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8153};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceStoragePersistenceMode,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_SpaceStoragePersistenceMode, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceQueryActionType
struct CORDL_TYPE OVRPlugin_SpaceQueryActionType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_SpaceQueryActionType_Unwrapped
  enum struct __OVRPlugin_SpaceQueryActionType_Unwrapped : int32_t {
    __E_Load = static_cast<int32_t>(0x0),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_SpaceQueryActionType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_SpaceQueryActionType_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceQueryActionType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SpaceQueryActionType(int32_t value__) noexcept;

  /// @brief Field Load value: I32(0)
  static ::GlobalNamespace::OVRPlugin_SpaceQueryActionType const Load;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8154};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryActionType,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceQueryActionType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceQueryType
struct CORDL_TYPE OVRPlugin_SpaceQueryType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_SpaceQueryType_Unwrapped
  enum struct __OVRPlugin_SpaceQueryType_Unwrapped : int32_t {
    __E_Action = static_cast<int32_t>(0x0),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __OVRPlugin_SpaceQueryType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_SpaceQueryType_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceQueryType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SpaceQueryType(int32_t value__) noexcept;

  /// @brief Field Action value: I32(0)
  static ::GlobalNamespace::OVRPlugin_SpaceQueryType const Action;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8155};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryType, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceQueryType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceQueryFilterType
struct CORDL_TYPE OVRPlugin_SpaceQueryFilterType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_SpaceQueryFilterType_Unwrapped
  enum struct __OVRPlugin_SpaceQueryFilterType_Unwrapped : int32_t {
    __E_None = static_cast<int32_t>(0x0),
    __E_Ids = static_cast<int32_t>(0x1),
    __E_Components = static_cast<int32_t>(0x2),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_SpaceQueryFilterType_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_SpaceQueryFilterType_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceQueryFilterType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SpaceQueryFilterType(int32_t value__) noexcept;

  /// @brief Field Components value: I32(2)
  static ::GlobalNamespace::OVRPlugin_SpaceQueryFilterType const Components;

  /// @brief Field Ids value: I32(1)
  static ::GlobalNamespace::OVRPlugin_SpaceQueryFilterType const Ids;

  /// @brief Field None value: I32(0)
  static ::GlobalNamespace::OVRPlugin_SpaceQueryFilterType const None;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8156};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryFilterType,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceQueryFilterType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::Posef, OVRPlugin::TrackingOrigin
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpatialAnchorCreateInfo
struct CORDL_TYPE OVRPlugin_SpatialAnchorCreateInfo {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpatialAnchorCreateInfo();

  // Ctor Parameters [CppParam { name: "BaseTracking", ty:
  // "::GlobalNamespace::OVRPlugin_TrackingOrigin", modifiers: "", def_value:
  // None }, CppParam { name: "PoseInSpace", ty:
  // "::GlobalNamespace::OVRPlugin_Posef", modifiers: "", def_value: None },
  // CppParam { name: "Time", ty: "double_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_SpatialAnchorCreateInfo(
      ::GlobalNamespace::OVRPlugin_TrackingOrigin BaseTracking,
      ::GlobalNamespace::OVRPlugin_Posef PoseInSpace, double_t Time) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8157};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x28};

  /// @brief Field BaseTracking, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_TrackingOrigin BaseTracking;

  /// @brief Field PoseInSpace, offset: 0x4, size: 0x1c, def value: None
  ::GlobalNamespace::OVRPlugin_Posef PoseInSpace;

  /// @brief Field Time, offset: 0x20, size: 0x8, def value: None
  double_t Time;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpatialAnchorCreateInfo,
                       BaseTracking) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpatialAnchorCreateInfo,
                       PoseInSpace) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpatialAnchorCreateInfo,
                       Time) == 0x20,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpatialAnchorCreateInfo, 0x28>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceFilterInfoIds
struct CORDL_TYPE OVRPlugin_SpaceFilterInfoIds {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceFilterInfoIds();

  // Ctor Parameters [CppParam { name: "Ids", ty:
  // "::ArrayW<::System::Guid,::Array<::System::Guid>*>", modifiers: "",
  // def_value: None }, CppParam { name: "NumIds", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SpaceFilterInfoIds(
      ::ArrayW<::System::Guid, ::Array<::System::Guid> *> Ids,
      int32_t NumIds) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8158};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field Ids, offset: 0x0, size: 0x8, def value: None
  ::ArrayW<::System::Guid, ::Array<::System::Guid> *> Ids;

  /// @brief Field NumIds, offset: 0x8, size: 0x4, def value: None
  int32_t NumIds;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceFilterInfoIds, Ids) ==
                  0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceFilterInfoIds,
                       NumIds) == 0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceFilterInfoIds, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceFilterInfoComponents
struct CORDL_TYPE OVRPlugin_SpaceFilterInfoComponents {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceFilterInfoComponents();

  // Ctor Parameters [CppParam { name: "Components", ty:
  // "::ArrayW<::GlobalNamespace::OVRPlugin_SpaceComponentType,::Array<::GlobalNamespace::OVRPlugin_SpaceComponentType>*>",
  // modifiers: "", def_value: None }, CppParam { name: "NumComponents", ty:
  // "int32_t", modifiers: "", def_value: None }]
  constexpr OVRPlugin_SpaceFilterInfoComponents(
      ::ArrayW<::GlobalNamespace::OVRPlugin_SpaceComponentType,
               ::Array<::GlobalNamespace::OVRPlugin_SpaceComponentType> *>
          Components,
      int32_t NumComponents) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8159};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field Components, offset: 0x0, size: 0x8, def value: None
  ::ArrayW<::GlobalNamespace::OVRPlugin_SpaceComponentType,
           ::Array<::GlobalNamespace::OVRPlugin_SpaceComponentType> *>
      Components;

  /// @brief Field NumComponents, offset: 0x8, size: 0x4, def value: None
  int32_t NumComponents;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceFilterInfoComponents,
                       Components) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceFilterInfoComponents,
                       NumComponents) == 0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceFilterInfoComponents, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::SpaceFilterInfoComponents,
// OVRPlugin::SpaceFilterInfoIds, OVRPlugin::SpaceQueryActionType,
// OVRPlugin::SpaceQueryFilterType, OVRPlugin::SpaceQueryType,
// OVRPlugin::SpaceStorageLocation
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceQueryInfo
struct CORDL_TYPE OVRPlugin_SpaceQueryInfo {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceQueryInfo();

  // Ctor Parameters [CppParam { name: "QueryType", ty:
  // "::GlobalNamespace::OVRPlugin_SpaceQueryType", modifiers: "", def_value:
  // None }, CppParam { name: "MaxQuerySpaces", ty: "int32_t", modifiers: "",
  // def_value: None }, CppParam { name: "Timeout", ty: "double_t", modifiers:
  // "", def_value: None }, CppParam { name: "Location", ty:
  // "::GlobalNamespace::OVRPlugin_SpaceStorageLocation", modifiers: "",
  // def_value: None }, CppParam { name: "ActionType", ty:
  // "::GlobalNamespace::OVRPlugin_SpaceQueryActionType", modifiers: "",
  // def_value: None }, CppParam { name: "FilterType", ty:
  // "::GlobalNamespace::OVRPlugin_SpaceQueryFilterType", modifiers: "",
  // def_value: None }, CppParam { name: "IdInfo", ty:
  // "::GlobalNamespace::OVRPlugin_SpaceFilterInfoIds", modifiers: "",
  // def_value: None }, CppParam { name: "ComponentsInfo", ty:
  // "::GlobalNamespace::OVRPlugin_SpaceFilterInfoComponents", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_SpaceQueryInfo(
      ::GlobalNamespace::OVRPlugin_SpaceQueryType QueryType,
      int32_t MaxQuerySpaces, double_t Timeout,
      ::GlobalNamespace::OVRPlugin_SpaceStorageLocation Location,
      ::GlobalNamespace::OVRPlugin_SpaceQueryActionType ActionType,
      ::GlobalNamespace::OVRPlugin_SpaceQueryFilterType FilterType,
      ::GlobalNamespace::OVRPlugin_SpaceFilterInfoIds IdInfo,
      ::GlobalNamespace::OVRPlugin_SpaceFilterInfoComponents
          ComponentsInfo) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8160};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x40};

  /// @brief Field QueryType, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_SpaceQueryType QueryType;

  /// @brief Field MaxQuerySpaces, offset: 0x4, size: 0x4, def value: None
  int32_t MaxQuerySpaces;

  /// @brief Field Timeout, offset: 0x8, size: 0x8, def value: None
  double_t Timeout;

  /// @brief Field Location, offset: 0x10, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_SpaceStorageLocation Location;

  /// @brief Field ActionType, offset: 0x14, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_SpaceQueryActionType ActionType;

  /// @brief Field FilterType, offset: 0x18, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_SpaceQueryFilterType FilterType;

  /// @brief Field IdInfo, offset: 0x20, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_SpaceFilterInfoIds IdInfo;

  /// @brief Field ComponentsInfo, offset: 0x30, size: 0x10, def value: None
  ::GlobalNamespace::OVRPlugin_SpaceFilterInfoComponents ComponentsInfo;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryInfo,
                       QueryType) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryInfo,
                       MaxQuerySpaces) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryInfo, Timeout) ==
                  0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryInfo, Location) ==
                  0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryInfo,
                       ActionType) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryInfo,
                       FilterType) == 0x18,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryInfo, IdInfo) ==
                  0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryInfo,
                       ComponentsInfo) == 0x30,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceQueryInfo, 0x40>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Guid
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceQueryResult
struct CORDL_TYPE OVRPlugin_SpaceQueryResult {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceQueryResult();

  // Ctor Parameters [CppParam { name: "space", ty: "uint64_t", modifiers: "",
  // def_value: None }, CppParam { name: "uuid", ty: "::System::Guid",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_SpaceQueryResult(uint64_t space,
                                       ::System::Guid uuid) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8161};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x18};

  /// @brief Field space, offset: 0x0, size: 0x8, def value: None
  uint64_t space;

  /// @brief Field uuid, offset: 0x8, size: 0x10, def value: None
  ::System::Guid uuid;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryResult, space) ==
                  0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceQueryResult, uuid) ==
                  0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceQueryResult, 0x18>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Media/MrcActivationMode
struct CORDL_TYPE Media_OVRPlugin_MrcActivationMode {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __Media_OVRPlugin_MrcActivationMode_Unwrapped
  enum struct __Media_OVRPlugin_MrcActivationMode_Unwrapped : int32_t {
    __E_Automatic = static_cast<int32_t>(0x0),
    __E_Disabled = static_cast<int32_t>(0x1),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __Media_OVRPlugin_MrcActivationMode_Unwrapped() const noexcept {
    return static_cast<__Media_OVRPlugin_MrcActivationMode_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr Media_OVRPlugin_MrcActivationMode();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr Media_OVRPlugin_MrcActivationMode(int32_t value__) noexcept;

  /// @brief Field Automatic value: I32(0)
  static ::GlobalNamespace::Media_OVRPlugin_MrcActivationMode const Automatic;

  /// @brief Field Disabled value: I32(1)
  static ::GlobalNamespace::Media_OVRPlugin_MrcActivationMode const Disabled;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::Media_OVRPlugin_MrcActivationMode const EnumSize;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8162};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::Media_OVRPlugin_MrcActivationMode,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::Media_OVRPlugin_MrcActivationMode, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Media/PlatformCameraMode
struct CORDL_TYPE Media_OVRPlugin_PlatformCameraMode {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __Media_OVRPlugin_PlatformCameraMode_Unwrapped
  enum struct __Media_OVRPlugin_PlatformCameraMode_Unwrapped : int32_t {
    __E_Disabled = static_cast<int32_t>(0xffffffff),
    __E_Initialized = static_cast<int32_t>(0x0),
    __E_UserControlled = static_cast<int32_t>(0x1),
    __E_SmartNavigated = static_cast<int32_t>(0x2),
    __E_StabilizedPoV = static_cast<int32_t>(0x3),
    __E_RemoteDroneControlled = static_cast<int32_t>(0x4),
    __E_RemoteSpatialMapped = static_cast<int32_t>(0x5),
    __E_SpectatorMode = static_cast<int32_t>(0x6),
    __E_MobileMRC = static_cast<int32_t>(0x7),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __Media_OVRPlugin_PlatformCameraMode_Unwrapped() const noexcept {
    return static_cast<__Media_OVRPlugin_PlatformCameraMode_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr Media_OVRPlugin_PlatformCameraMode();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr Media_OVRPlugin_PlatformCameraMode(int32_t value__) noexcept;

  /// @brief Field Disabled value: I32(-1)
  static ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode const Disabled;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode const EnumSize;

  /// @brief Field Initialized value: I32(0)
  static ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode const
      Initialized;

  /// @brief Field MobileMRC value: I32(7)
  static ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode const MobileMRC;

  /// @brief Field RemoteDroneControlled value: I32(4)
  static ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode const
      RemoteDroneControlled;

  /// @brief Field RemoteSpatialMapped value: I32(5)
  static ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode const
      RemoteSpatialMapped;

  /// @brief Field SmartNavigated value: I32(2)
  static ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode const
      SmartNavigated;

  /// @brief Field SpectatorMode value: I32(6)
  static ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode const
      SpectatorMode;

  /// @brief Field StabilizedPoV value: I32(3)
  static ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode const
      StabilizedPoV;

  /// @brief Field UserControlled value: I32(1)
  static ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode const
      UserControlled;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8163};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Media/InputVideoBufferType
struct CORDL_TYPE Media_OVRPlugin_InputVideoBufferType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __Media_OVRPlugin_InputVideoBufferType_Unwrapped
  enum struct __Media_OVRPlugin_InputVideoBufferType_Unwrapped : int32_t {
    __E_Memory = static_cast<int32_t>(0x0),
    __E_TextureHandle = static_cast<int32_t>(0x1),
    __E_EnumSize = static_cast<int32_t>(0x7fffffff),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __Media_OVRPlugin_InputVideoBufferType_Unwrapped() const noexcept {
    return static_cast<__Media_OVRPlugin_InputVideoBufferType_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr Media_OVRPlugin_InputVideoBufferType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr Media_OVRPlugin_InputVideoBufferType(int32_t value__) noexcept;

  /// @brief Field EnumSize value: I32(2147483647)
  static ::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType const EnumSize;

  /// @brief Field Memory value: I32(0)
  static ::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType const Memory;

  /// @brief Field TextureHandle value: I32(1)
  static ::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType const
      TextureHandle;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8164};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType, 0x4>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/Media
class CORDL_TYPE OVRPlugin_Media : public ::System::Object {
public:
  // Declarations
  using InputVideoBufferType =
      ::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType;

  using MrcActivationMode =
      ::GlobalNamespace::Media_OVRPlugin_MrcActivationMode;

  using PlatformCameraMode =
      ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode;

  /// @brief Field cachedTexture, offset 0xffffffff, size 0x8
  __declspec(property(
      get = getStaticF_cachedTexture,
      put = setStaticF_cachedTexture)) ::UnityW<::UnityEngine::Texture2D>
      cachedTexture;

  /// @brief Method EncodeMrcFrame, addr 0x3ff741c, size 0x4bc, virtual false,
  /// abstract: false, final false
  static inline bool
  EncodeMrcFrame(::UnityEngine::RenderTexture *frame,
                 ::ArrayW<float_t, ::Array<float_t> *> audioData,
                 int32_t audioFrames, int32_t audioChannels, double_t timestamp,
                 double_t poseTime, ::ByRef<int32_t> outSyncId);

  /// @brief Method EncodeMrcFrame, addr 0x3ff6ddc, size 0x330, virtual false,
  /// abstract: false, final false
  static inline bool
  EncodeMrcFrame(::System::IntPtr textureHandle,
                 ::System::IntPtr fgTextureHandle,
                 ::ArrayW<float_t, ::Array<float_t> *> audioData,
                 int32_t audioFrames, int32_t audioChannels, double_t timestamp,
                 double_t poseTime, ::ByRef<int32_t> outSyncId);

  /// @brief Method GetInitialized, addr 0x3ff56f0, size 0xd0, virtual false,
  /// abstract: false, final false
  static inline bool GetInitialized();

  /// @brief Method GetMrcActivationMode, addr 0x3ff5964, size 0xcc, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::Media_OVRPlugin_MrcActivationMode
  GetMrcActivationMode();

  /// @brief Method GetMrcAudioSampleRate, addr 0x3ff6a10, size 0xc4, virtual
  /// false, abstract: false, final false
  static inline int32_t GetMrcAudioSampleRate();

  /// @brief Method GetMrcFrameImageFlipped, addr 0x3ff6c94, size 0xcc, virtual
  /// false, abstract: false, final false
  static inline bool GetMrcFrameImageFlipped();

  /// @brief Method GetMrcFrameSize, addr 0x3ff6768, size 0xe0, virtual false,
  /// abstract: false, final false
  static inline void GetMrcFrameSize(::ByRef<int32_t> frameWidth,
                                     ::ByRef<int32_t> frameHeight);

  /// @brief Method GetMrcInputVideoBufferType, addr 0x3ff64cc, size 0xc4,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType
  GetMrcInputVideoBufferType();

  /// @brief Method GetPlatformCameraMode, addr 0x3ff5d18, size 0xcc, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode
  GetPlatformCameraMode();

  /// @brief Method Initialize, addr 0x3ff54a0, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline bool Initialize();

  /// @brief Method IsCastingToRemoteClient, addr 0x3ff7d70, size 0xd0, virtual
  /// false, abstract: false, final false
  static inline bool IsCastingToRemoteClient();

  /// @brief Method IsMrcActivated, addr 0x3ff60f0, size 0xd0, virtual false,
  /// abstract: false, final false
  static inline bool IsMrcActivated();

  /// @brief Method IsMrcEnabled, addr 0x3ff5fa4, size 0xd0, virtual false,
  /// abstract: false, final false
  static inline bool IsMrcEnabled();

  static inline ::GlobalNamespace::OVRPlugin_Media *New_ctor();

  /// @brief Method SetAvailableQueueIndexVulkan, addr 0x3ff7a1c, size 0xc8,
  /// virtual false, abstract: false, final false
  static inline bool SetAvailableQueueIndexVulkan(uint32_t queueIndexVk);

  /// @brief Method SetMrcActivationMode, addr 0x3ff5aac, size 0xc8, virtual
  /// false, abstract: false, final false
  static inline bool SetMrcActivationMode(
      ::GlobalNamespace::Media_OVRPlugin_MrcActivationMode mode);

  /// @brief Method SetMrcAudioSampleRate, addr 0x3ff68cc, size 0xc8, virtual
  /// false, abstract: false, final false
  static inline bool SetMrcAudioSampleRate(int32_t sampleRate);

  /// @brief Method SetMrcFrameImageFlipped, addr 0x3ff6b50, size 0xc8, virtual
  /// false, abstract: false, final false
  static inline bool SetMrcFrameImageFlipped(bool imageFlipped);

  /// @brief Method SetMrcFrameSize, addr 0x3ff660c, size 0xd8, virtual false,
  /// abstract: false, final false
  static inline bool SetMrcFrameSize(int32_t frameWidth, int32_t frameHeight);

  /// @brief Method SetMrcHeadsetControllerPose, addr 0x3ff7b60, size 0x14c,
  /// virtual false, abstract: false, final false
  static inline bool SetMrcHeadsetControllerPose(
      ::GlobalNamespace::OVRPlugin_Posef headsetPose,
      ::GlobalNamespace::OVRPlugin_Posef leftControllerPose,
      ::GlobalNamespace::OVRPlugin_Posef rightControllerPose);

  /// @brief Method SetMrcInputVideoBufferType, addr 0x3ff6388, size 0xc8,
  /// virtual false, abstract: false, final false
  static inline bool SetMrcInputVideoBufferType(
      ::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType videoBufferType);

  /// @brief Method SetPlatformCameraMode, addr 0x3ff5e60, size 0xc8, virtual
  /// false, abstract: false, final false
  static inline bool SetPlatformCameraMode(
      ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode mode);

  /// @brief Method SetPlatformInitialized, addr 0x3ff5bf0, size 0xc0, virtual
  /// false, abstract: false, final false
  static inline bool SetPlatformInitialized();

  /// @brief Method Shutdown, addr 0x3ff55c8, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline bool Shutdown();

  /// @brief Method SyncMrcFrame, addr 0x3ff78d8, size 0xc8, virtual false,
  /// abstract: false, final false
  static inline bool SyncMrcFrame(int32_t syncId);

  /// @brief Method Update, addr 0x3ff583c, size 0xc0, virtual false, abstract:
  /// false, final false
  static inline bool Update();

  /// @brief Method UseMrcDebugCamera, addr 0x3ff623c, size 0xd0, virtual false,
  /// abstract: false, final false
  static inline bool UseMrcDebugCamera();

  /// @brief Method .ctor, addr 0x3ff7ebc, size 0x8, virtual false, abstract:
  /// false, final false
  inline void _ctor();

  static inline ::UnityW<::UnityEngine::Texture2D> getStaticF_cachedTexture();

  static inline void
  setStaticF_cachedTexture(::UnityW<::UnityEngine::Texture2D> value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Media();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_Media", modifiers:
  // "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_Media(OVRPlugin_Media &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_Media", modifiers:
  // "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_Media(OVRPlugin_Media const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8165};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Media, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceContainerInternal
struct CORDL_TYPE OVRPlugin_SpaceContainerInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceContainerInternal();

  // Ctor Parameters [CppParam { name: "uuidCapacityInput", ty: "int32_t",
  // modifiers: "", def_value: None }, CppParam { name: "uuidCountOutput", ty:
  // "int32_t", modifiers: "", def_value: None }, CppParam { name: "uuids", ty:
  // "::System::IntPtr", modifiers: "", def_value: None }]
  constexpr OVRPlugin_SpaceContainerInternal(int32_t uuidCapacityInput,
                                             int32_t uuidCountOutput,
                                             ::System::IntPtr uuids) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8166};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field uuidCapacityInput, offset: 0x0, size: 0x4, def value: None
  int32_t uuidCapacityInput;

  /// @brief Field uuidCountOutput, offset: 0x4, size: 0x4, def value: None
  int32_t uuidCountOutput;

  /// @brief Field uuids, offset: 0x8, size: 0x8, def value: None
  ::System::IntPtr uuids;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceContainerInternal,
                       uuidCapacityInput) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceContainerInternal,
                       uuidCountOutput) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceContainerInternal,
                       uuids) == 0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_SpaceContainerInternal, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SpaceSemanticLabelInternal
struct CORDL_TYPE OVRPlugin_SpaceSemanticLabelInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SpaceSemanticLabelInternal();

  // Ctor Parameters [CppParam { name: "byteCapacityInput", ty: "int32_t",
  // modifiers: "", def_value: None }, CppParam { name: "byteCountOutput", ty:
  // "int32_t", modifiers: "", def_value: None }, CppParam { name: "labels", ty:
  // "::System::IntPtr", modifiers: "", def_value: None }]
  constexpr OVRPlugin_SpaceSemanticLabelInternal(
      int32_t byteCapacityInput, int32_t byteCountOutput,
      ::System::IntPtr labels) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8167};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field byteCapacityInput, offset: 0x0, size: 0x4, def value: None
  int32_t byteCapacityInput;

  /// @brief Field byteCountOutput, offset: 0x4, size: 0x4, def value: None
  int32_t byteCountOutput;

  /// @brief Field labels, offset: 0x8, size: 0x8, def value: None
  ::System::IntPtr labels;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceSemanticLabelInternal,
                       byteCapacityInput) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceSemanticLabelInternal,
                       byteCountOutput) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SpaceSemanticLabelInternal,
                       labels) == 0x8,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_SpaceSemanticLabelInternal, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Guid
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/RoomLayout
struct CORDL_TYPE OVRPlugin_RoomLayout {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_RoomLayout();

  // Ctor Parameters [CppParam { name: "floorUuid", ty: "::System::Guid",
  // modifiers: "", def_value: None }, CppParam { name: "ceilingUuid", ty:
  // "::System::Guid", modifiers: "", def_value: None }, CppParam { name:
  // "wallUuids", ty: "::ArrayW<::System::Guid,::Array<::System::Guid>*>",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_RoomLayout(
      ::System::Guid floorUuid, ::System::Guid ceilingUuid,
      ::ArrayW<::System::Guid, ::Array<::System::Guid> *> wallUuids) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8168};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x28};

  /// @brief Field floorUuid, offset: 0x0, size: 0x10, def value: None
  ::System::Guid floorUuid;

  /// @brief Field ceilingUuid, offset: 0x10, size: 0x10, def value: None
  ::System::Guid ceilingUuid;

  /// @brief Field wallUuids, offset: 0x20, size: 0x8, def value: None
  ::ArrayW<::System::Guid, ::Array<::System::Guid> *> wallUuids;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_RoomLayout, floorUuid) ==
                  0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_RoomLayout, ceilingUuid) ==
                  0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_RoomLayout, wallUuids) ==
                  0x20,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_RoomLayout, 0x28>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Guid, System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/RoomLayoutInternal
struct CORDL_TYPE OVRPlugin_RoomLayoutInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_RoomLayoutInternal();

  // Ctor Parameters [CppParam { name: "floorUuid", ty: "::System::Guid",
  // modifiers: "", def_value: None }, CppParam { name: "ceilingUuid", ty:
  // "::System::Guid", modifiers: "", def_value: None }, CppParam { name:
  // "wallUuidCapacityInput", ty: "int32_t", modifiers: "", def_value: None },
  // CppParam { name: "wallUuidCountOutput", ty: "int32_t", modifiers: "",
  // def_value: None }, CppParam { name: "wallUuids", ty: "::System::IntPtr",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_RoomLayoutInternal(::System::Guid floorUuid,
                                         ::System::Guid ceilingUuid,
                                         int32_t wallUuidCapacityInput,
                                         int32_t wallUuidCountOutput,
                                         ::System::IntPtr wallUuids) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8169};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x30};

  /// @brief Field floorUuid, offset: 0x0, size: 0x10, def value: None
  ::System::Guid floorUuid;

  /// @brief Field ceilingUuid, offset: 0x10, size: 0x10, def value: None
  ::System::Guid ceilingUuid;

  /// @brief Field wallUuidCapacityInput, offset: 0x20, size: 0x4, def value:
  /// None
  int32_t wallUuidCapacityInput;

  /// @brief Field wallUuidCountOutput, offset: 0x24, size: 0x4, def value: None
  int32_t wallUuidCountOutput;

  /// @brief Field wallUuids, offset: 0x28, size: 0x8, def value: None
  ::System::IntPtr wallUuids;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_RoomLayoutInternal,
                       floorUuid) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_RoomLayoutInternal,
                       ceilingUuid) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_RoomLayoutInternal,
                       wallUuidCapacityInput) == 0x20,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_RoomLayoutInternal,
                       wallUuidCountOutput) == 0x24,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_RoomLayoutInternal,
                       wallUuids) == 0x28,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_RoomLayoutInternal, 0x30>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PolygonalBoundary2DInternal
struct CORDL_TYPE OVRPlugin_PolygonalBoundary2DInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PolygonalBoundary2DInternal();

  // Ctor Parameters [CppParam { name: "vertexCapacityInput", ty: "int32_t",
  // modifiers: "", def_value: None }, CppParam { name: "vertexCountOutput", ty:
  // "int32_t", modifiers: "", def_value: None }, CppParam { name: "vertices",
  // ty: "::System::IntPtr", modifiers: "", def_value: None }]
  constexpr OVRPlugin_PolygonalBoundary2DInternal(
      int32_t vertexCapacityInput, int32_t vertexCountOutput,
      ::System::IntPtr vertices) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8170};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field vertexCapacityInput, offset: 0x0, size: 0x4, def value: None
  int32_t vertexCapacityInput;

  /// @brief Field vertexCountOutput, offset: 0x4, size: 0x4, def value: None
  int32_t vertexCountOutput;

  /// @brief Field vertices, offset: 0x8, size: 0x8, def value: None
  ::System::IntPtr vertices;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PolygonalBoundary2DInternal,
                       vertexCapacityInput) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_PolygonalBoundary2DInternal,
                       vertexCountOutput) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_PolygonalBoundary2DInternal,
                       vertices) == 0x8,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_PolygonalBoundary2DInternal, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/SceneCaptureRequestInternal
struct CORDL_TYPE OVRPlugin_SceneCaptureRequestInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_SceneCaptureRequestInternal();

  // Ctor Parameters [CppParam { name: "requestByteCount", ty: "int32_t",
  // modifiers: "", def_value: None }, CppParam { name: "request", ty:
  // "::StringW", modifiers: "", def_value: None }]
  constexpr OVRPlugin_SceneCaptureRequestInternal(int32_t requestByteCount,
                                                  ::StringW request) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8171};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field requestByteCount, offset: 0x0, size: 0x4, def value: None
  int32_t requestByteCount;

  /// @brief Field request, offset: 0x8, size: 0x8, def value: None
  ::StringW request;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_SceneCaptureRequestInternal,
                       requestByteCount) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_SceneCaptureRequestInternal,
                       request) == 0x8,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_SceneCaptureRequestInternal, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.IDisposable, System.Runtime.InteropServices.GCHandle
namespace GlobalNamespace {
// cpp template
template <typename T>
// Is value type: true
// CS Name: OVRPlugin/PinnedArray`1<T>
struct CORDL_TYPE OVRPlugin_PinnedArray_1 {
public:
  // Declarations
  /// @brief Convert operator to "::System::IDisposable"
  constexpr operator ::System::IDisposable *();

  /// @brief Method Dispose, addr 0x0, size 0xffffffffffffffff, virtual true,
  /// abstract: false, final true
  inline void Dispose();

  /// @brief Method .ctor, addr 0x0, size 0xffffffffffffffff, virtual false,
  /// abstract: false, final false
  inline void _ctor(::ArrayW<T, ::Array<T> *> array);

  /// @brief Convert to "::System::IDisposable"
  constexpr ::System::IDisposable *i___System__IDisposable();

  /// @brief Method op_Implicit, addr 0x0, size 0xffffffffffffffff, virtual
  /// false, abstract: false, final false
  static inline ::System::IntPtr op_Implicit___System__IntPtr(
      ::GlobalNamespace::OVRPlugin_PinnedArray_1<T> pinnedArray);

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PinnedArray_1();

  // Ctor Parameters [CppParam { name: "_handle", ty:
  // "::System::Runtime::InteropServices::GCHandle", modifiers: "", def_value:
  // None }]
  constexpr OVRPlugin_PinnedArray_1(
      ::System::Runtime::InteropServices::GCHandle _handle) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8172};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field _handle, offset: 0x0, size: 0x8, def value: None
  ::System::Runtime::InteropServices::GCHandle _handle;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
} // namespace GlobalNamespace
// Dependencies System.IntPtr
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/TriangleMeshInternal
struct CORDL_TYPE OVRPlugin_TriangleMeshInternal {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_TriangleMeshInternal();

  // Ctor Parameters [CppParam { name: "vertexCapacityInput", ty: "int32_t",
  // modifiers: "", def_value: None }, CppParam { name: "vertexCountOutput", ty:
  // "int32_t", modifiers: "", def_value: None }, CppParam { name: "vertices",
  // ty: "::System::IntPtr", modifiers: "", def_value: None }, CppParam { name:
  // "indexCapacityInput", ty: "int32_t", modifiers: "", def_value: None },
  // CppParam { name: "indexCountOutput", ty: "int32_t", modifiers: "",
  // def_value: None }, CppParam { name: "indices", ty: "::System::IntPtr",
  // modifiers: "", def_value: None }]
  constexpr OVRPlugin_TriangleMeshInternal(int32_t vertexCapacityInput,
                                           int32_t vertexCountOutput,
                                           ::System::IntPtr vertices,
                                           int32_t indexCapacityInput,
                                           int32_t indexCountOutput,
                                           ::System::IntPtr indices) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8173};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x20};

  /// @brief Field vertexCapacityInput, offset: 0x0, size: 0x4, def value: None
  int32_t vertexCapacityInput;

  /// @brief Field vertexCountOutput, offset: 0x4, size: 0x4, def value: None
  int32_t vertexCountOutput;

  /// @brief Field vertices, offset: 0x8, size: 0x8, def value: None
  ::System::IntPtr vertices;

  /// @brief Field indexCapacityInput, offset: 0x10, size: 0x4, def value: None
  int32_t indexCapacityInput;

  /// @brief Field indexCountOutput, offset: 0x14, size: 0x4, def value: None
  int32_t indexCountOutput;

  /// @brief Field indices, offset: 0x18, size: 0x8, def value: None
  ::System::IntPtr indices;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_TriangleMeshInternal,
                       vertexCapacityInput) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_TriangleMeshInternal,
                       vertexCountOutput) == 0x4,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_TriangleMeshInternal,
                       vertices) == 0x8,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_TriangleMeshInternal,
                       indexCapacityInput) == 0x10,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_TriangleMeshInternal,
                       indexCountOutput) == 0x14,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_TriangleMeshInternal,
                       indices) == 0x18,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_TriangleMeshInternal, 0x20>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PassthroughPreferenceFields
struct CORDL_TYPE OVRPlugin_PassthroughPreferenceFields {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int32_t;

  /// @brief Nested struct __OVRPlugin_PassthroughPreferenceFields_Unwrapped
  enum struct __OVRPlugin_PassthroughPreferenceFields_Unwrapped : int32_t {
    __E_Flags = static_cast<int32_t>(0x1),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_PassthroughPreferenceFields_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_PassthroughPreferenceFields_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int32_t() const noexcept {
    return static_cast<int32_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PassthroughPreferenceFields();

  // Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_PassthroughPreferenceFields(int32_t value__) noexcept;

  /// @brief Field Flags value: I32(1)
  static ::GlobalNamespace::OVRPlugin_PassthroughPreferenceFields const Flags;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8174};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x4};

  /// @brief Field value__, offset: 0x0, size: 0x4, def value: None
  int32_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughPreferenceFields,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(
    ::cordl_internals::size_check_v<
        ::GlobalNamespace::OVRPlugin_PassthroughPreferenceFields, 0x4>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PassthroughPreferenceFlags
struct CORDL_TYPE OVRPlugin_PassthroughPreferenceFlags {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int64_t;

  /// @brief Nested struct __OVRPlugin_PassthroughPreferenceFlags_Unwrapped
  enum struct __OVRPlugin_PassthroughPreferenceFlags_Unwrapped : int64_t {
    __E_DefaultToActive = static_cast<int64_t>(0x1),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr
  operator __OVRPlugin_PassthroughPreferenceFlags_Unwrapped() const noexcept {
    return static_cast<__OVRPlugin_PassthroughPreferenceFlags_Unwrapped>(
        this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int64_t() const noexcept {
    return static_cast<int64_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PassthroughPreferenceFlags();

  // Ctor Parameters [CppParam { name: "value__", ty: "int64_t", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_PassthroughPreferenceFlags(int64_t value__) noexcept;

  /// @brief Field DefaultToActive value: I64(1)
  static ::GlobalNamespace::OVRPlugin_PassthroughPreferenceFlags const
      DefaultToActive;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8175};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x8};

  /// @brief Field value__, offset: 0x0, size: 0x8, def value: None
  int64_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughPreferenceFlags,
                       value__) == 0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_PassthroughPreferenceFlags, 0x8>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::PassthroughPreferenceFields,
// OVRPlugin::PassthroughPreferenceFlags
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/PassthroughPreferences
struct CORDL_TYPE OVRPlugin_PassthroughPreferences {
public:
  // Declarations
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_PassthroughPreferences();

  // Ctor Parameters [CppParam { name: "Fields", ty:
  // "::GlobalNamespace::OVRPlugin_PassthroughPreferenceFields", modifiers: "",
  // def_value: None }, CppParam { name: "Flags", ty:
  // "::GlobalNamespace::OVRPlugin_PassthroughPreferenceFlags", modifiers: "",
  // def_value: None }]
  constexpr OVRPlugin_PassthroughPreferences(
      ::GlobalNamespace::OVRPlugin_PassthroughPreferenceFields Fields,
      ::GlobalNamespace::OVRPlugin_PassthroughPreferenceFlags Flags) noexcept;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8176};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x10};

  /// @brief Field Fields, offset: 0x0, size: 0x4, def value: None
  ::GlobalNamespace::OVRPlugin_PassthroughPreferenceFields Fields;

  /// @brief Field Flags, offset: 0x8, size: 0x8, def value: None
  ::GlobalNamespace::OVRPlugin_PassthroughPreferenceFlags Flags;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughPreferences,
                       Fields) == 0x0,
              "Offset mismatch!");

static_assert(offsetof(::GlobalNamespace::OVRPlugin_PassthroughPreferences,
                       Flags) == 0x8,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_PassthroughPreferences, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/Ktx
class CORDL_TYPE OVRPlugin_Ktx : public ::System::Object {
public:
  // Declarations
  /// @brief Method DestroyKtxTexture, addr 0x3ff8970, size 0x12c, virtual
  /// false, abstract: false, final false
  static inline bool DestroyKtxTexture(::System::IntPtr texture);

  /// @brief Method GetKtxTextureData, addr 0x3ff8798, size 0x144, virtual
  /// false, abstract: false, final false
  static inline bool GetKtxTextureData(::System::IntPtr texture,
                                       ::System::IntPtr textureData,
                                       uint32_t bufferSize);

  /// @brief Method GetKtxTextureHeight, addr 0x3ff8260, size 0x138, virtual
  /// false, abstract: false, final false
  static inline uint32_t GetKtxTextureHeight(::System::IntPtr texture);

  /// @brief Method GetKtxTextureSize, addr 0x3ff85dc, size 0x138, virtual
  /// false, abstract: false, final false
  static inline uint32_t GetKtxTextureSize(::System::IntPtr texture);

  /// @brief Method GetKtxTextureWidth, addr 0x3ff80a4, size 0x138, virtual
  /// false, abstract: false, final false
  static inline uint32_t GetKtxTextureWidth(::System::IntPtr texture);

  /// @brief Method LoadKtxFromMemory, addr 0x3ff7ec4, size 0x14c, virtual
  /// false, abstract: false, final false
  static inline ::System::IntPtr LoadKtxFromMemory(::System::IntPtr dataPtr,
                                                   uint32_t length);

  static inline ::GlobalNamespace::OVRPlugin_Ktx *New_ctor();

  /// @brief Method TranscodeKtxTexture, addr 0x3ff841c, size 0x13c, virtual
  /// false, abstract: false, final false
  static inline bool TranscodeKtxTexture(::System::IntPtr texture,
                                         uint32_t format);

  /// @brief Method .ctor, addr 0x3ff8b18, size 0x8, virtual false, abstract:
  /// false, final false
  inline void _ctor();

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Ktx();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_Ktx", modifiers: "&&",
  // def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_Ktx(OVRPlugin_Ktx &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_Ktx", modifiers:
  // "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_Ktx(OVRPlugin_Ktx const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8177};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Ktx, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/UnityOpenXR
class CORDL_TYPE OVRPlugin_UnityOpenXR : public ::System::Object {
public:
  // Declarations
  /// @brief Field Enabled, offset 0xffffffff, size 0x1
  __declspec(property(get = getStaticF_Enabled,
                      put = setStaticF_Enabled)) bool Enabled;

  /// @brief Method HookGetInstanceProcAddr, addr 0x3ff8ca4, size 0xc4, virtual
  /// false, abstract: false, final false
  static inline ::System::IntPtr HookGetInstanceProcAddr(::System::IntPtr func);

  static inline ::GlobalNamespace::OVRPlugin_UnityOpenXR *New_ctor();

  /// @brief Method OnAppSpaceChange, addr 0x3ff91a0, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline void OnAppSpaceChange(uint64_t xrSpace);

  /// @brief Method OnInstanceCreate, addr 0x3ff8de4, size 0xc8, virtual false,
  /// abstract: false, final false
  static inline bool OnInstanceCreate(uint64_t xrInstance);

  /// @brief Method OnInstanceDestroy, addr 0x3ff8f28, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline void OnInstanceDestroy(uint64_t xrInstance);

  /// @brief Method OnSessionBegin, addr 0x3ff9434, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline void OnSessionBegin(uint64_t xrSession);

  /// @brief Method OnSessionCreate, addr 0x3ff9064, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline void OnSessionCreate(uint64_t xrSession);

  /// @brief Method OnSessionDestroy, addr 0x3ff97e8, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline void OnSessionDestroy(uint64_t xrSession);

  /// @brief Method OnSessionEnd, addr 0x3ff9570, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline void OnSessionEnd(uint64_t xrSession);

  /// @brief Method OnSessionExiting, addr 0x3ff96ac, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline void OnSessionExiting(uint64_t xrSession);

  /// @brief Method OnSessionStateChange, addr 0x3ff92dc, size 0xd4, virtual
  /// false, abstract: false, final false
  static inline void OnSessionStateChange(int32_t oldState, int32_t newState);

  /// @brief Method SetClientVersion, addr 0x3ff8b20, size 0xf0, virtual false,
  /// abstract: false, final false
  static inline void SetClientVersion();

  /// @brief Method .ctor, addr 0x3ff9924, size 0x8, virtual false, abstract:
  /// false, final false
  inline void _ctor();

  static inline bool getStaticF_Enabled();

  static inline void setStaticF_Enabled(bool value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_UnityOpenXR();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_UnityOpenXR",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_UnityOpenXR(OVRPlugin_UnityOpenXR &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_UnityOpenXR",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_UnityOpenXR(OVRPlugin_UnityOpenXR const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8178};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_UnityOpenXR, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies
namespace GlobalNamespace {
// Is value type: true
// CS Name: OVRPlugin/Qpl/ResultType
struct CORDL_TYPE Qpl_OVRPlugin_ResultType {
public:
  // Declarations
  using __CORDL_BACKING_ENUM_TYPE = int16_t;

  /// @brief Nested struct __Qpl_OVRPlugin_ResultType_Unwrapped
  enum struct __Qpl_OVRPlugin_ResultType_Unwrapped : int16_t {
    __E_Success = static_cast<int16_t>(0x2),
    __E_Fail = static_cast<int16_t>(0x3),
    __E_Cancel = static_cast<int16_t>(0x4),
  };

  /// @brief Conversion into unwrapped enum value
  constexpr operator __Qpl_OVRPlugin_ResultType_Unwrapped() const noexcept {
    return static_cast<__Qpl_OVRPlugin_ResultType_Unwrapped>(this->value__);
  }

  /// @brief Conversion into unwrapped enum value
  constexpr explicit operator int16_t() const noexcept {
    return static_cast<int16_t>(this->value__);
  }

  // Ctor Parameters []
  // @brief default ctor
  constexpr Qpl_OVRPlugin_ResultType();

  // Ctor Parameters [CppParam { name: "value__", ty: "int16_t", modifiers: "",
  // def_value: None }]
  constexpr Qpl_OVRPlugin_ResultType(int16_t value__) noexcept;

  /// @brief Field Cancel value: I16(4)
  static ::GlobalNamespace::Qpl_OVRPlugin_ResultType const Cancel;

  /// @brief Field Fail value: I16(3)
  static ::GlobalNamespace::Qpl_OVRPlugin_ResultType const Fail;

  /// @brief Field Success value: I16(2)
  static ::GlobalNamespace::Qpl_OVRPlugin_ResultType const Success;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8179};

  /// @brief The size of the true value type
  static constexpr auto __IL2CPP_VALUE_TYPE_SIZE{0x2};

  /// @brief Field value__, offset: 0x0, size: 0x2, def value: None
  int16_t value__;

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = true;
};
// Non member Declarations
static_assert(offsetof(::GlobalNamespace::Qpl_OVRPlugin_ResultType, value__) ==
                  0x0,
              "Offset mismatch!");

static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::Qpl_OVRPlugin_ResultType, 0x2>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/Qpl
class CORDL_TYPE OVRPlugin_Qpl : public ::System::Object {
public:
  // Declarations
  using ResultType = ::GlobalNamespace::Qpl_OVRPlugin_ResultType;

  /// @brief Method CreateMarkerHandle, addr 0x3ff9f6c, size 0xdc, virtual
  /// false, abstract: false, final false
  static inline bool CreateMarkerHandle(::StringW name,
                                        ::ByRef<int32_t> nameHandle);

  /// @brief Method DestroyMarkerHandle, addr 0x3ffa0e4, size 0xc8, virtual
  /// false, abstract: false, final false
  static inline bool DestroyMarkerHandle(int32_t nameHandle);

  /// @brief Method MarkerAnnotation, addr 0x3ff9db4, size 0xf0, virtual false,
  /// abstract: false, final false
  static inline void MarkerAnnotation(int32_t markerId, ::StringW annotationKey,
                                      ::StringW annotationValue,
                                      int32_t instanceKey);

  /// @brief Method MarkerEnd, addr 0x3ff9a9c, size 0xf0, virtual false,
  /// abstract: false, final false
  static inline void
  MarkerEnd(int32_t markerId,
            ::GlobalNamespace::Qpl_OVRPlugin_ResultType resultTypeId,
            int32_t instanceKey, int64_t timestampMs);

  /// @brief Method MarkerPointCached, addr 0x3ff9c28, size 0xf0, virtual false,
  /// abstract: false, final false
  static inline void MarkerPointCached(int32_t markerId, int32_t nameHandle,
                                       int32_t instanceKey,
                                       int64_t timestampMs);

  /// @brief Method MarkerStart, addr 0x3ff992c, size 0xdc, virtual false,
  /// abstract: false, final false
  static inline void MarkerStart(int32_t markerId, int32_t instanceKey,
                                 int64_t timestampMs);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_Qpl();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_Qpl", modifiers: "&&",
  // def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_Qpl(OVRPlugin_Qpl &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_Qpl", modifiers:
  // "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_Qpl(OVRPlugin_Qpl const &) = delete;

  /// @brief Field AutoSetTimeoutMs offset 0xffffffff size 0x4
  static constexpr int32_t AutoSetTimeoutMs{static_cast<int32_t>(0x0)};

  /// @brief Field AutoSetTimestampMs offset 0xffffffff size 0x8
  static constexpr int64_t AutoSetTimestampMs{
      static_cast<int64_t>(0xffffffffffffffff)};

  /// @brief Field DefaultInstanceKey offset 0xffffffff size 0x4
  static constexpr int32_t DefaultInstanceKey{static_cast<int32_t>(0x0)};

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8180};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin_Qpl, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_0_1_0
class CORDL_TYPE OVRPlugin_OVRP_0_1_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetEyeTextureSize, addr 0x3ffa228, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Sizei
  ovrp_GetEyeTextureSize(::GlobalNamespace::OVRPlugin_Eye eyeId);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_0_1_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_0_1_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_0_1_0(OVRPlugin_OVRP_0_1_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_0_1_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_0_1_0(OVRPlugin_OVRP_0_1_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8181};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_0_1_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_0_1_1
class CORDL_TYPE OVRPlugin_OVRP_0_1_1 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_SetOverlayQuad2, addr 0x3ffa320, size 0xe4, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetOverlayQuad2(::GlobalNamespace::OVRPlugin_Bool onTop,
                       ::GlobalNamespace::OVRPlugin_Bool headLocked,
                       ::System::IntPtr texture, ::System::IntPtr device,
                       ::GlobalNamespace::OVRPlugin_Posef pose,
                       ::GlobalNamespace::OVRPlugin_Vector3f scale);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_0_1_1();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_0_1_1",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_0_1_1(OVRPlugin_OVRP_0_1_1 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_0_1_1",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_0_1_1(OVRPlugin_OVRP_0_1_1 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8182};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_0_1_1, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_0_1_2
class CORDL_TYPE OVRPlugin_OVRP_0_1_2 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetNodePose, addr 0x3ffa480, size 0x84, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  ovrp_GetNodePose(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method ovrp_SetControllerVibration, addr 0x3ffa504, size 0x94,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetControllerVibration(uint32_t controllerMask, float_t frequency,
                              float_t amplitude);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_0_1_2();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_0_1_2",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_0_1_2(OVRPlugin_OVRP_0_1_2 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_0_1_2",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_0_1_2(OVRPlugin_OVRP_0_1_2 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8183};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_0_1_2, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_0_1_3
class CORDL_TYPE OVRPlugin_OVRP_0_1_3 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetNodeAcceleration, addr 0x3ffa698, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  ovrp_GetNodeAcceleration(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method ovrp_GetNodeVelocity, addr 0x3ffa614, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  ovrp_GetNodeVelocity(::GlobalNamespace::OVRPlugin_Node nodeId);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_0_1_3();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_0_1_3",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_0_1_3(OVRPlugin_OVRP_0_1_3 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_0_1_3",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_0_1_3(OVRPlugin_OVRP_0_1_3 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8184};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_0_1_3, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_0_5_0
class CORDL_TYPE OVRPlugin_OVRP_0_5_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_0_5_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_0_5_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_0_5_0(OVRPlugin_OVRP_0_5_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_0_5_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_0_5_0(OVRPlugin_OVRP_0_5_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8185};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_0_5_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_0_0
class CORDL_TYPE OVRPlugin_OVRP_1_0_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetTrackingCalibratedOrigin, addr 0x3ffa8f8, size 0x74,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  ovrp_GetTrackingCalibratedOrigin();

  /// @brief Method ovrp_GetTrackingOriginType, addr 0x3ffa814, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_TrackingOrigin
  ovrp_GetTrackingOriginType();

  /// @brief Method ovrp_RecenterTrackingOrigin, addr 0x3ffa96c, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_RecenterTrackingOrigin(uint32_t flags);

  /// @brief Method ovrp_SetTrackingOriginType, addr 0x3ffa87c, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_SetTrackingOriginType(
      ::GlobalNamespace::OVRPlugin_TrackingOrigin originType);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_0_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_0_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_0_0(OVRPlugin_OVRP_1_0_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_0_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_0_0(OVRPlugin_OVRP_1_0_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8186};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_0_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_1_0
class CORDL_TYPE OVRPlugin_OVRP_1_1_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  /// @brief Method _ovrp_GetAppLatencyTimings, addr 0x3ffbb74, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::System::IntPtr _ovrp_GetAppLatencyTimings();

  /// @brief Method _ovrp_GetNativeSDKVersion, addr 0x3ffabb8, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::System::IntPtr _ovrp_GetNativeSDKVersion();

  /// @brief Method _ovrp_GetSystemProductName, addr 0x3ffb7f0, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::System::IntPtr _ovrp_GetSystemProductName();

  /// @brief Method _ovrp_GetVersion, addr 0x3ffaacc, size 0x68, virtual false,
  /// abstract: false, final false
  static inline ::System::IntPtr _ovrp_GetVersion();

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetAppHasVrFocus, addr 0x3ffba3c, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_GetAppHasVrFocus();

  /// @brief Method ovrp_GetAppLatencyTimings, addr 0x3ffbbdc, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::StringW ovrp_GetAppLatencyTimings();

  /// @brief Method ovrp_GetAppMonoscopic, addr 0x3ffb958, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_GetAppMonoscopic();

  /// @brief Method ovrp_GetAppShouldQuit, addr 0x3ffbaa4, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_GetAppShouldQuit();

  /// @brief Method ovrp_GetAppShouldRecenter, addr 0x3ffbb0c, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_GetAppShouldRecenter();

  /// @brief Method ovrp_GetAudioInId, addr 0x3ffad0c, size 0x68, virtual false,
  /// abstract: false, final false
  static inline ::System::IntPtr ovrp_GetAudioInId();

  /// @brief Method ovrp_GetAudioOutId, addr 0x3ffaca4, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::System::IntPtr ovrp_GetAudioOutId();

  /// @brief Method ovrp_GetControllerState, addr 0x3ffb2dc, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_ControllerState
  ovrp_GetControllerState(uint32_t controllerMask);

  /// @brief Method ovrp_GetEyeTextureScale, addr 0x3ffad74, size 0x64, virtual
  /// false, abstract: false, final false
  static inline float_t ovrp_GetEyeTextureScale();

  /// @brief Method ovrp_GetInitialized, addr 0x3ffaa64, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_GetInitialized();

  /// @brief Method ovrp_GetNativeSDKVersion, addr 0x3ffac20, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::StringW ovrp_GetNativeSDKVersion();

  /// @brief Method ovrp_GetNodeFrustum, addr 0x3ffb260, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Frustumf
  ovrp_GetNodeFrustum(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method ovrp_GetNodeOrientationTracked, addr 0x3ffb168, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetNodeOrientationTracked(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method ovrp_GetNodePositionTracked, addr 0x3ffb1e4, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetNodePositionTracked(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method ovrp_GetNodePresent, addr 0x3ffb0ec, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetNodePresent(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method ovrp_GetSystemBatteryLevel, addr 0x3ffb728, size 0x64,
  /// virtual false, abstract: false, final false
  static inline float_t ovrp_GetSystemBatteryLevel();

  /// @brief Method ovrp_GetSystemBatteryStatus, addr 0x3ffb6c0, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_BatteryStatus
  ovrp_GetSystemBatteryStatus();

  /// @brief Method ovrp_GetSystemBatteryTemperature, addr 0x3ffb78c, size 0x64,
  /// virtual false, abstract: false, final false
  static inline float_t ovrp_GetSystemBatteryTemperature();

  /// @brief Method ovrp_GetSystemCpuLevel, addr 0x3ffb360, size 0x68, virtual
  /// false, abstract: false, final false
  static inline int32_t ovrp_GetSystemCpuLevel();

  /// @brief Method ovrp_GetSystemDisplayFrequency, addr 0x3ffb590, size 0x64,
  /// virtual false, abstract: false, final false
  static inline float_t ovrp_GetSystemDisplayFrequency();

  /// @brief Method ovrp_GetSystemGpuLevel, addr 0x3ffb444, size 0x68, virtual
  /// false, abstract: false, final false
  static inline int32_t ovrp_GetSystemGpuLevel();

  /// @brief Method ovrp_GetSystemPowerSavingMode, addr 0x3ffb528, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetSystemPowerSavingMode();

  /// @brief Method ovrp_GetSystemProductName, addr 0x3ffb858, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::StringW ovrp_GetSystemProductName();

  /// @brief Method ovrp_GetSystemVSyncCount, addr 0x3ffb5f4, size 0x68, virtual
  /// false, abstract: false, final false
  static inline int32_t ovrp_GetSystemVSyncCount();

  /// @brief Method ovrp_GetSystemVolume, addr 0x3ffb65c, size 0x64, virtual
  /// false, abstract: false, final false
  static inline float_t ovrp_GetSystemVolume();

  /// @brief Method ovrp_GetTrackingOrientationEnabled, addr 0x3ffaebc, size
  /// 0x68, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetTrackingOrientationEnabled();

  /// @brief Method ovrp_GetTrackingOrientationSupported, addr 0x3ffae54, size
  /// 0x68, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetTrackingOrientationSupported();

  /// @brief Method ovrp_GetTrackingPositionEnabled, addr 0x3ffb008, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetTrackingPositionEnabled();

  /// @brief Method ovrp_GetTrackingPositionSupported, addr 0x3ffafa0, size
  /// 0x68, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetTrackingPositionSupported();

  /// @brief Method ovrp_GetUserEyeDepth, addr 0x3ffbda8, size 0x64, virtual
  /// false, abstract: false, final false
  static inline float_t ovrp_GetUserEyeDepth();

  /// @brief Method ovrp_GetUserEyeHeight, addr 0x3ffbe88, size 0x64, virtual
  /// false, abstract: false, final false
  static inline float_t ovrp_GetUserEyeHeight();

  /// @brief Method ovrp_GetUserIPD, addr 0x3ffbcc8, size 0x64, virtual false,
  /// abstract: false, final false
  static inline float_t ovrp_GetUserIPD();

  /// @brief Method ovrp_GetUserPresent, addr 0x3ffbc60, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_GetUserPresent();

  /// @brief Method ovrp_GetVersion, addr 0x3ffab34, size 0x84, virtual false,
  /// abstract: false, final false
  static inline ::StringW ovrp_GetVersion();

  /// @brief Method ovrp_SetAppMonoscopic, addr 0x3ffb9c0, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetAppMonoscopic(::GlobalNamespace::OVRPlugin_Bool value);

  /// @brief Method ovrp_SetEyeTextureScale, addr 0x3ffadd8, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetEyeTextureScale(float_t value);

  /// @brief Method ovrp_SetSystemCpuLevel, addr 0x3ffb3c8, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetSystemCpuLevel(int32_t value);

  /// @brief Method ovrp_SetSystemGpuLevel, addr 0x3ffb4ac, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetSystemGpuLevel(int32_t value);

  /// @brief Method ovrp_SetTrackingOrientationEnabled, addr 0x3ffaf24, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetTrackingOrientationEnabled(::GlobalNamespace::OVRPlugin_Bool value);

  /// @brief Method ovrp_SetTrackingPositionEnabled, addr 0x3ffb070, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetTrackingPositionEnabled(::GlobalNamespace::OVRPlugin_Bool value);

  /// @brief Method ovrp_SetUserEyeDepth, addr 0x3ffbe0c, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetUserEyeDepth(float_t value);

  /// @brief Method ovrp_SetUserEyeHeight, addr 0x3ffbeec, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetUserEyeHeight(float_t value);

  /// @brief Method ovrp_SetUserIPD, addr 0x3ffbd2c, size 0x7c, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetUserIPD(float_t value);

  /// @brief Method ovrp_ShowSystemUI, addr 0x3ffb8dc, size 0x7c, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_ShowSystemUI(::GlobalNamespace::OVRPlugin_PlatformUI ui);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_1_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_1_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_1_0(OVRPlugin_OVRP_1_1_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_1_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_1_0(OVRPlugin_OVRP_1_1_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8187};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_1_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_2_0
class CORDL_TYPE OVRPlugin_OVRP_1_2_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_SetSystemVSyncCount, addr 0x3ffbfe4, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetSystemVSyncCount(int32_t vsyncCount);

  /// @brief Method ovrpi_SetTrackingCalibratedOrigin, addr 0x3ffc060, size
  /// 0x68, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrpi_SetTrackingCalibratedOrigin();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_2_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_2_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_2_0(OVRPlugin_OVRP_1_2_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_2_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_2_0(OVRPlugin_OVRP_1_2_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8188};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_2_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_3_0
class CORDL_TYPE OVRPlugin_OVRP_1_3_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetEyeOcclusionMeshEnabled, addr 0x3ffc144, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetEyeOcclusionMeshEnabled();

  /// @brief Method ovrp_GetSystemHeadphonesPresent, addr 0x3ffc228, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetSystemHeadphonesPresent();

  /// @brief Method ovrp_SetEyeOcclusionMeshEnabled, addr 0x3ffc1ac, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetEyeOcclusionMeshEnabled(::GlobalNamespace::OVRPlugin_Bool value);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_3_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_3_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_3_0(OVRPlugin_OVRP_1_3_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_3_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_3_0(OVRPlugin_OVRP_1_3_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8189};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_3_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_5_0
class CORDL_TYPE OVRPlugin_OVRP_1_5_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetSystemRegion, addr 0x3ffc30c, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_SystemRegion
  ovrp_GetSystemRegion();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_5_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_5_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_5_0(OVRPlugin_OVRP_1_5_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_5_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_5_0(OVRPlugin_OVRP_1_5_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8190};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_5_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_6_0
class CORDL_TYPE OVRPlugin_OVRP_1_6_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetAppCpuStartToGpuEndTime, addr 0x3ffc7b8, size 0x64,
  /// virtual false, abstract: false, final false
  static inline float_t ovrp_GetAppCpuStartToGpuEndTime();

  /// @brief Method ovrp_GetControllerHapticsDesc, addr 0x3ffc4d4, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_HapticsDesc
  ovrp_GetControllerHapticsDesc(uint32_t controllerMask);

  /// @brief Method ovrp_GetControllerHapticsState, addr 0x3ffc558, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_HapticsState
  ovrp_GetControllerHapticsState(uint32_t controllerMask);

  /// @brief Method ovrp_GetEyeRecommendedResolutionScale, addr 0x3ffc754, size
  /// 0x64, virtual false, abstract: false, final false
  static inline float_t ovrp_GetEyeRecommendedResolutionScale();

  /// @brief Method ovrp_GetSystemRecommendedMSAALevel, addr 0x3ffc81c, size
  /// 0x68, virtual false, abstract: false, final false
  static inline int32_t ovrp_GetSystemRecommendedMSAALevel();

  /// @brief Method ovrp_GetTrackingIPDEnabled, addr 0x3ffc3f0, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_GetTrackingIPDEnabled();

  /// @brief Method ovrp_SetControllerHaptics, addr 0x3ffc5d4, size 0x94,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_SetControllerHaptics(
      uint32_t controllerMask,
      ::GlobalNamespace::OVRPlugin_HapticsBuffer hapticsBuffer);

  /// @brief Method ovrp_SetOverlayQuad3, addr 0x3ffc668, size 0xec, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetOverlayQuad3(uint32_t flags, ::System::IntPtr textureLeft,
                       ::System::IntPtr textureRight, ::System::IntPtr device,
                       ::GlobalNamespace::OVRPlugin_Posef pose,
                       ::GlobalNamespace::OVRPlugin_Vector3f scale,
                       int32_t layerIndex);

  /// @brief Method ovrp_SetTrackingIPDEnabled, addr 0x3ffc458, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetTrackingIPDEnabled(::GlobalNamespace::OVRPlugin_Bool value);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_6_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_6_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_6_0(OVRPlugin_OVRP_1_6_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_6_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_6_0(OVRPlugin_OVRP_1_6_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8191};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_6_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_7_0
class CORDL_TYPE OVRPlugin_OVRP_1_7_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetAppChromaticCorrection, addr 0x3ffc900, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetAppChromaticCorrection();

  /// @brief Method ovrp_SetAppChromaticCorrection, addr 0x3ffc968, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetAppChromaticCorrection(::GlobalNamespace::OVRPlugin_Bool value);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_7_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_7_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_7_0(OVRPlugin_OVRP_1_7_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_7_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_7_0(OVRPlugin_OVRP_1_7_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8192};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_7_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_8_0
class CORDL_TYPE OVRPlugin_OVRP_1_8_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetBoundaryConfigured, addr 0x3ffca60, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_GetBoundaryConfigured();

  /// @brief Method ovrp_GetBoundaryDimensions, addr 0x3ffcca8, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Vector3f
  ovrp_GetBoundaryDimensions(
      ::GlobalNamespace::OVRPlugin_BoundaryType boundaryType);

  /// @brief Method ovrp_GetBoundaryGeometry, addr 0x3ffcc08, size 0xa0, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_BoundaryGeometry
  ovrp_GetBoundaryGeometry(
      ::GlobalNamespace::OVRPlugin_BoundaryType boundaryType);

  /// @brief Method ovrp_GetBoundaryVisible, addr 0x3ffcd24, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_GetBoundaryVisible();

  /// @brief Method ovrp_GetNodeAcceleration2, addr 0x3ffcfc4, size 0x94,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  ovrp_GetNodeAcceleration2(int32_t stateId,
                            ::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method ovrp_GetNodePose2, addr 0x3ffce9c, size 0x94, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  ovrp_GetNodePose2(int32_t stateId, ::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method ovrp_GetNodeVelocity2, addr 0x3ffcf30, size 0x94, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  ovrp_GetNodeVelocity2(int32_t stateId,
                        ::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method ovrp_SetBoundaryVisible, addr 0x3ffcd8c, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetBoundaryVisible(::GlobalNamespace::OVRPlugin_Bool value);

  /// @brief Method ovrp_TestBoundaryNode, addr 0x3ffcac8, size 0x94, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_BoundaryTestResult
  ovrp_TestBoundaryNode(::GlobalNamespace::OVRPlugin_Node nodeId,
                        ::GlobalNamespace::OVRPlugin_BoundaryType boundaryType);

  /// @brief Method ovrp_TestBoundaryPoint, addr 0x3ffcb5c, size 0xac, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_BoundaryTestResult
  ovrp_TestBoundaryPoint(
      ::GlobalNamespace::OVRPlugin_Vector3f point,
      ::GlobalNamespace::OVRPlugin_BoundaryType boundaryType);

  /// @brief Method ovrp_Update2, addr 0x3ffce08, size 0x94, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_Update2(int32_t stateId, int32_t frameIndex, double_t predictionSeconds);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_8_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_8_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_8_0(OVRPlugin_OVRP_1_8_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_8_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_8_0(OVRPlugin_OVRP_1_8_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8193};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_8_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_9_0
class CORDL_TYPE OVRPlugin_OVRP_1_9_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetActiveController, addr 0x3ffd13c, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Controller
  ovrp_GetActiveController();

  /// @brief Method ovrp_GetAppPerfStats, addr 0x3ffd2a0, size 0x88, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_AppPerfStats
  ovrp_GetAppPerfStats();

  /// @brief Method ovrp_GetBoundaryGeometry2, addr 0x3ffd20c, size 0x94,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_GetBoundaryGeometry2(
      ::GlobalNamespace::OVRPlugin_BoundaryType boundaryType,
      ::System::IntPtr points, ::ByRef<int32_t> pointsCount);

  /// @brief Method ovrp_GetConnectedControllers, addr 0x3ffd1a4, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Controller
  ovrp_GetConnectedControllers();

  /// @brief Method ovrp_GetSystemHeadsetType, addr 0x3ffd0d4, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_SystemHeadset
  ovrp_GetSystemHeadsetType();

  /// @brief Method ovrp_ResetAppPerfStats, addr 0x3ffd328, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_ResetAppPerfStats();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_9_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_9_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_9_0(OVRPlugin_OVRP_1_9_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_9_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_9_0(OVRPlugin_OVRP_1_9_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8194};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_9_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_10_0
class CORDL_TYPE OVRPlugin_OVRP_1_10_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_10_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_10_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_10_0(OVRPlugin_OVRP_1_10_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_10_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_10_0(OVRPlugin_OVRP_1_10_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8195};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_10_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_11_0
class CORDL_TYPE OVRPlugin_OVRP_1_11_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetDesiredEyeTextureFormat, addr 0x3ffd504, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_EyeTextureFormat
  ovrp_GetDesiredEyeTextureFormat();

  /// @brief Method ovrp_SetDesiredEyeTextureFormat, addr 0x3ffd488, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_SetDesiredEyeTextureFormat(
      ::GlobalNamespace::OVRPlugin_EyeTextureFormat value);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_11_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_11_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_11_0(OVRPlugin_OVRP_1_11_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_11_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_11_0(OVRPlugin_OVRP_1_11_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8196};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_11_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_12_0
class CORDL_TYPE OVRPlugin_OVRP_1_12_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetAppFramerate, addr 0x3ffd5e8, size 0x64, virtual
  /// false, abstract: false, final false
  static inline float_t ovrp_GetAppFramerate();

  /// @brief Method ovrp_GetControllerState2, addr 0x3ffd6e0, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_ControllerState2
  ovrp_GetControllerState2(uint32_t controllerMask);

  /// @brief Method ovrp_GetNodePoseState, addr 0x3ffd64c, size 0x94, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_PoseStatef
  ovrp_GetNodePoseState(::GlobalNamespace::OVRPlugin_Step stepId,
                        ::GlobalNamespace::OVRPlugin_Node nodeId);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_12_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_12_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_12_0(OVRPlugin_OVRP_1_12_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_12_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_12_0(OVRPlugin_OVRP_1_12_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8197};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_12_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_15_0
class CORDL_TYPE OVRPlugin_OVRP_1_15_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_CalculateLayerDesc, addr 0x3ffdc14, size 0xcc, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_CalculateLayerDesc(
      ::GlobalNamespace::OVRPlugin_OverlayShape shape,
      ::GlobalNamespace::OVRPlugin_LayerLayout layout,
      ::ByRef<::GlobalNamespace::OVRPlugin_Sizei> textureSize,
      int32_t mipLevels, int32_t sampleCount,
      ::GlobalNamespace::OVRPlugin_EyeTextureFormat format, int32_t layerFlags,
      ::ByRef<::GlobalNamespace::OVRPlugin_LayerDescInternal> layerDesc);

  /// @brief Method ovrp_EnqueueDestroyLayer, addr 0x3ffdd64, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_EnqueueDestroyLayer(::System::IntPtr layerId);

  /// @brief Method ovrp_EnqueueSetupLayer, addr 0x3ffdce0, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_EnqueueSetupLayer(
      ::ByRef<::GlobalNamespace::OVRPlugin_LayerDescInternal> desc,
      ::System::IntPtr layerId);

  /// @brief Method ovrp_EnqueueSubmitLayer, addr 0x3ffdf00, size 0xcc, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_EnqueueSubmitLayer(
      uint32_t flags, ::System::IntPtr textureLeft,
      ::System::IntPtr textureRight, int32_t layerId, int32_t frameIndex,
      ::ByRef<::GlobalNamespace::OVRPlugin_Posef> pose,
      ::ByRef<::GlobalNamespace::OVRPlugin_Vector3f> scale, int32_t layerIndex);

  /// @brief Method ovrp_GetExternalCameraCount, addr 0x3ffd980, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetExternalCameraCount(::ByRef<int32_t> cameraCount);

  /// @brief Method ovrp_GetExternalCameraExtrinsics, addr 0x3ffdb90, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetExternalCameraExtrinsics(
      int32_t cameraId,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraExtrinsics> cameraExtrinsics);

  /// @brief Method ovrp_GetExternalCameraIntrinsics, addr 0x3ffdb0c, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetExternalCameraIntrinsics(
      int32_t cameraId,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraIntrinsics> cameraIntrinsics);

  /// @brief Method ovrp_GetExternalCameraName, addr 0x3ffd9fc, size 0x110,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetExternalCameraName(
      int32_t cameraId, ::ArrayW<char16_t, ::Array<char16_t> *> cameraName);

  /// @brief Method ovrp_GetEyeTextureArrayEnabled, addr 0x3ffe050, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetEyeTextureArrayEnabled();

  /// @brief Method ovrp_GetLayerTexturePtr, addr 0x3ffde64, size 0x9c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetLayerTexturePtr(int32_t layerId, int32_t stage,
                          ::GlobalNamespace::OVRPlugin_Eye eyeId,
                          ::ByRef<::System::IntPtr> textureHandle);

  /// @brief Method ovrp_GetLayerTextureStageCount, addr 0x3ffdde0, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetLayerTextureStageCount(int32_t layerId,
                                 ::ByRef<int32_t> layerTextureStageCount);

  /// @brief Method ovrp_GetMixedRealityInitialized, addr 0x3ffd8b0, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetMixedRealityInitialized();

  /// @brief Method ovrp_GetNodeFrustum2, addr 0x3ffdfcc, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetNodeFrustum2(
      ::GlobalNamespace::OVRPlugin_Node nodeId,
      ::ByRef<::GlobalNamespace::OVRPlugin_Frustumf2> nodeFrustum);

  /// @brief Method ovrp_InitializeMixedReality, addr 0x3ffd7e0, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_InitializeMixedReality();

  /// @brief Method ovrp_ShutdownMixedReality, addr 0x3ffd848, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_ShutdownMixedReality();

  /// @brief Method ovrp_UpdateExternalCamera, addr 0x3ffd918, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_UpdateExternalCamera();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_15_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_15_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_15_0(OVRPlugin_OVRP_1_15_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_15_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_15_0(OVRPlugin_OVRP_1_15_0 const &) = delete;

  /// @brief Field OVRP_EXTERNAL_CAMERA_NAME_SIZE offset 0xffffffff size 0x4
  static constexpr int32_t OVRP_EXTERNAL_CAMERA_NAME_SIZE{
      static_cast<int32_t>(0x20)};

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8198};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_15_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_16_0
class CORDL_TYPE OVRPlugin_OVRP_1_16_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_CloseCameraDevice, addr 0x3ffe318, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_CloseCameraDevice(
      ::GlobalNamespace::OVRPlugin_CameraDevice cameraDevice);

  /// @brief Method ovrp_GetCameraDeviceColorFrameBgraPixels, addr 0x3ffe510,
  /// size 0x94, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetCameraDeviceColorFrameBgraPixels(
      ::GlobalNamespace::OVRPlugin_CameraDevice cameraDevice,
      ::ByRef<::System::IntPtr> colorFrameBgraPixels,
      ::ByRef<int32_t> colorFrameRowPitch);

  /// @brief Method ovrp_GetCameraDeviceColorFrameSize, addr 0x3ffe48c, size
  /// 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetCameraDeviceColorFrameSize(
      ::GlobalNamespace::OVRPlugin_CameraDevice cameraDevice,
      ::ByRef<::GlobalNamespace::OVRPlugin_Sizei> colorFrameSize);

  /// @brief Method ovrp_GetControllerState4, addr 0x3ffe5a4, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetControllerState4(
      uint32_t controllerMask,
      ::ByRef<::GlobalNamespace::OVRPlugin_ControllerState4> controllerState);

  /// @brief Method ovrp_HasCameraDeviceOpened, addr 0x3ffe394, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_HasCameraDeviceOpened(
      ::GlobalNamespace::OVRPlugin_CameraDevice cameraDevice);

  /// @brief Method ovrp_IsCameraDeviceAvailable, addr 0x3ffe19c, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ovrp_IsCameraDeviceAvailable(
      ::GlobalNamespace::OVRPlugin_CameraDevice cameraDevice);

  /// @brief Method ovrp_IsCameraDeviceColorFrameAvailable, addr 0x3ffe410, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_IsCameraDeviceColorFrameAvailable(
      ::GlobalNamespace::OVRPlugin_CameraDevice cameraDevice);

  /// @brief Method ovrp_OpenCameraDevice, addr 0x3ffe29c, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_OpenCameraDevice(::GlobalNamespace::OVRPlugin_CameraDevice cameraDevice);

  /// @brief Method ovrp_SetCameraDevicePreferredColorFrameSize, addr 0x3ffe218,
  /// size 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetCameraDevicePreferredColorFrameSize(
      ::GlobalNamespace::OVRPlugin_CameraDevice cameraDevice,
      ::GlobalNamespace::OVRPlugin_Sizei preferredColorFrameSize);

  /// @brief Method ovrp_UpdateCameraDevices, addr 0x3ffe134, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_UpdateCameraDevices();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_16_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_16_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_16_0(OVRPlugin_OVRP_1_16_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_16_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_16_0(OVRPlugin_OVRP_1_16_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8199};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_16_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_17_0
class CORDL_TYPE OVRPlugin_OVRP_1_17_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_17_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_17_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_17_0(OVRPlugin_OVRP_1_17_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_17_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_17_0(OVRPlugin_OVRP_1_17_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8200};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_17_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_18_0
class CORDL_TYPE OVRPlugin_OVRP_1_18_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetAppHasInputFocus, addr 0x3ffe818, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetAppHasInputFocus(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> appHasInputFocus);

  /// @brief Method ovrp_GetHandNodePoseStateLatency, addr 0x3ffe79c, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetHandNodePoseStateLatency(::ByRef<double_t> latencyInSeconds);

  /// @brief Method ovrp_SetHandNodePoseStateLatency, addr 0x3ffe720, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetHandNodePoseStateLatency(double_t latencyInSeconds);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_18_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_18_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_18_0(OVRPlugin_OVRP_1_18_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_18_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_18_0(OVRPlugin_OVRP_1_18_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8201};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_18_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_19_0
class CORDL_TYPE OVRPlugin_OVRP_1_19_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_19_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_19_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_19_0(OVRPlugin_OVRP_1_19_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_19_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_19_0(OVRPlugin_OVRP_1_19_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8202};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_19_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_21_0
class CORDL_TYPE OVRPlugin_OVRP_1_21_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetAppAsymmetricFov, addr 0x3ffed74, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetAppAsymmetricFov(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> useAsymmetricFov);

  /// @brief Method ovrp_GetGPUUtilLevel, addr 0x3ffeb7c, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetGPUUtilLevel(::ByRef<float_t> gpuUtil);

  /// @brief Method ovrp_GetGPUUtilSupported, addr 0x3ffeb00, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetGPUUtilSupported(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> gpuUtilSupported);

  /// @brief Method ovrp_GetSystemDisplayAvailableFrequencies, addr 0x3ffec74,
  /// size 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetSystemDisplayAvailableFrequencies(
      ::System::IntPtr systemDisplayAvailableFrequencies,
      ::ByRef<int32_t> numFrequencies);

  /// @brief Method ovrp_GetSystemDisplayFrequency2, addr 0x3ffebf8, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetSystemDisplayFrequency2(::ByRef<float_t> systemDisplayFrequency);

  /// @brief Method ovrp_GetTiledMultiResLevel, addr 0x3ffea08, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetTiledMultiResLevel(
      ::ByRef<::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel> level);

  /// @brief Method ovrp_GetTiledMultiResSupported, addr 0x3ffe98c, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetTiledMultiResSupported(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> foveationSupported);

  /// @brief Method ovrp_SetSystemDisplayFrequency, addr 0x3ffecf8, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetSystemDisplayFrequency(float_t requestedFrequency);

  /// @brief Method ovrp_SetTiledMultiResLevel, addr 0x3ffea84, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_SetTiledMultiResLevel(
      ::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel level);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_21_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_21_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_21_0(OVRPlugin_OVRP_1_21_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_21_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_21_0(OVRPlugin_OVRP_1_21_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8203};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_21_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_28_0
class CORDL_TYPE OVRPlugin_OVRP_1_28_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_EnqueueSetupLayer2, addr 0x3ffef9c, size 0x94, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_EnqueueSetupLayer2(
      ::ByRef<::GlobalNamespace::OVRPlugin_LayerDescInternal> desc,
      int32_t compositionDepth, ::System::IntPtr layerId);

  /// @brief Method ovrp_GetDominantHand, addr 0x3ffee6c, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetDominantHand(
      ::ByRef<::GlobalNamespace::OVRPlugin_Handedness> dominantHand);

  /// @brief Method ovrp_SendEvent, addr 0x3ffeee8, size 0xb4, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SendEvent(::StringW name, ::StringW param);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_28_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_28_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_28_0(OVRPlugin_OVRP_1_28_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_28_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_28_0(OVRPlugin_OVRP_1_28_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8204};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_28_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_29_0
class CORDL_TYPE OVRPlugin_OVRP_1_29_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetHeadPoseModifier, addr 0x3fff1b4, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetHeadPoseModifier(
      ::ByRef<::GlobalNamespace::OVRPlugin_Quatf> relativeRotation,
      ::ByRef<::GlobalNamespace::OVRPlugin_Vector3f> relativeTranslation);

  /// @brief Method ovrp_GetLayerAndroidSurfaceObject, addr 0x3fff0ac, size
  /// 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetLayerAndroidSurfaceObject(int32_t layerId,
                                    ::ByRef<::System::IntPtr> surfaceObject);

  /// @brief Method ovrp_GetNodePoseStateRaw, addr 0x3fff238, size 0x9c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetNodePoseStateRaw(
      ::GlobalNamespace::OVRPlugin_Step stepId, int32_t frameIndex,
      ::GlobalNamespace::OVRPlugin_Node nodeId,
      ::ByRef<::GlobalNamespace::OVRPlugin_PoseStatef> nodePoseState);

  /// @brief Method ovrp_SetHeadPoseModifier, addr 0x3fff130, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_SetHeadPoseModifier(
      ::ByRef<::GlobalNamespace::OVRPlugin_Quatf> relativeRotation,
      ::ByRef<::GlobalNamespace::OVRPlugin_Vector3f> relativeTranslation);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_29_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_29_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_29_0(OVRPlugin_OVRP_1_29_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_29_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_29_0(OVRPlugin_OVRP_1_29_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8205};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_29_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_30_0
class CORDL_TYPE OVRPlugin_OVRP_1_30_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetCurrentTrackingTransformPose, addr 0x3fff350, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetCurrentTrackingTransformPose(
      ::ByRef<::GlobalNamespace::OVRPlugin_Posef> trackingTransformPose);

  /// @brief Method ovrp_GetPerfMetricsFloat, addr 0x3fff5a4, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetPerfMetricsFloat(::GlobalNamespace::OVRPlugin_PerfMetrics perfMetrics,
                           ::ByRef<float_t> value);

  /// @brief Method ovrp_GetPerfMetricsInt, addr 0x3fff628, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetPerfMetricsInt(::GlobalNamespace::OVRPlugin_PerfMetrics perfMetrics,
                         ::ByRef<int32_t> value);

  /// @brief Method ovrp_GetTrackingTransformRawPose, addr 0x3fff3cc, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetTrackingTransformRawPose(
      ::ByRef<::GlobalNamespace::OVRPlugin_Posef> trackingTransformRawPose);

  /// @brief Method ovrp_IsPerfMetricsSupported, addr 0x3fff520, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_IsPerfMetricsSupported(
      ::GlobalNamespace::OVRPlugin_PerfMetrics perfMetrics,
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> isSupported);

  /// @brief Method ovrp_SendEvent2, addr 0x3fff448, size 0xd8, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SendEvent2(::StringW name, ::StringW param, ::StringW source);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_30_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_30_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_30_0(OVRPlugin_OVRP_1_30_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_30_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_30_0(OVRPlugin_OVRP_1_30_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8206};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_30_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_31_0
class CORDL_TYPE OVRPlugin_OVRP_1_31_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetTimeInSeconds, addr 0x3fff728, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetTimeInSeconds(::ByRef<double_t> value);

  /// @brief Method ovrp_SetColorScaleAndOffset, addr 0x3fff7a4, size 0xdc,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_SetColorScaleAndOffset(
      ::UnityEngine::Vector4 colorScale, ::UnityEngine::Vector4 colorOffset,
      ::GlobalNamespace::OVRPlugin_Bool applyToAllLayers);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_31_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_31_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_31_0(OVRPlugin_OVRP_1_31_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_31_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_31_0(OVRPlugin_OVRP_1_31_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8207};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_31_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_32_0
class CORDL_TYPE OVRPlugin_OVRP_1_32_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_AddCustomMetadata, addr 0x3fff8fc, size 0xb4, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_AddCustomMetadata(::StringW name, ::StringW param);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_32_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_32_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_32_0(OVRPlugin_OVRP_1_32_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_32_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_32_0(OVRPlugin_OVRP_1_32_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8208};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_32_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_34_0
class CORDL_TYPE OVRPlugin_OVRP_1_34_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_EnqueueSubmitLayer2, addr 0x3fffa2c, size 0xf8, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_EnqueueSubmitLayer2(
      uint32_t flags, ::System::IntPtr textureLeft,
      ::System::IntPtr textureRight, int32_t layerId, int32_t frameIndex,
      ::ByRef<::GlobalNamespace::OVRPlugin_Posef> pose,
      ::ByRef<::GlobalNamespace::OVRPlugin_Vector3f> scale, int32_t layerIndex,
      ::GlobalNamespace::OVRPlugin_Bool overrideTextureRectMatrix,
      ::ByRef<::GlobalNamespace::OVRPlugin_TextureRectMatrixf>
          textureRectMatrix,
      ::GlobalNamespace::OVRPlugin_Bool overridePerLayerColorScaleAndOffset,
      ::ByRef<::UnityEngine::Vector4> colorScale,
      ::ByRef<::UnityEngine::Vector4> colorOffset);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_34_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_34_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_34_0(OVRPlugin_OVRP_1_34_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_34_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_34_0(OVRPlugin_OVRP_1_34_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8209};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_34_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_35_0
class CORDL_TYPE OVRPlugin_OVRP_1_35_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_35_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_35_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_35_0(OVRPlugin_OVRP_1_35_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_35_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_35_0(OVRPlugin_OVRP_1_35_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8210};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_35_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_36_0
class CORDL_TYPE OVRPlugin_OVRP_1_36_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_36_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_36_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_36_0(OVRPlugin_OVRP_1_36_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_36_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_36_0(OVRPlugin_OVRP_1_36_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8211};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_36_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_37_0
class CORDL_TYPE OVRPlugin_OVRP_1_37_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_37_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_37_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_37_0(OVRPlugin_OVRP_1_37_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_37_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_37_0(OVRPlugin_OVRP_1_37_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8212};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_37_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_38_0
class CORDL_TYPE OVRPlugin_OVRP_1_38_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetNodeOrientationValid, addr 0x3fffe14, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetNodeOrientationValid(
      ::GlobalNamespace::OVRPlugin_Node nodeId,
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> nodeOrientationValid);

  /// @brief Method ovrp_GetNodePositionValid, addr 0x3fffe98, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetNodePositionValid(
      ::GlobalNamespace::OVRPlugin_Node nodeId,
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> nodePositionValid);

  /// @brief Method ovrp_GetTrackingTransformRelativePose, addr 0x3fffd14, size
  /// 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetTrackingTransformRelativePose(
      ::ByRef<::GlobalNamespace::OVRPlugin_Posef> trackingTransformRelativePose,
      ::GlobalNamespace::OVRPlugin_TrackingOrigin trackingOrigin);

  /// @brief Method ovrp_Media_EncodeMrcFrame, addr 0x3ff71d0, size 0xbc,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_EncodeMrcFrame(::System::IntPtr rawBuffer,
                            ::System::IntPtr audioDataPtr, int32_t audioDataLen,
                            int32_t audioChannels, double_t timestamp,
                            ::ByRef<int32_t> outSyncId);

  /// @brief Method ovrp_Media_EncodeMrcFrameWithDualTextures, addr 0x3ff7358,
  /// size 0xc4, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_EncodeMrcFrameWithDualTextures(
      ::System::IntPtr backgroundTextureHandle,
      ::System::IntPtr foregroundTextureHandle, ::System::IntPtr audioData,
      int32_t audioDataLen, int32_t audioChannels, double_t timestamp,
      ::ByRef<int32_t> outSyncId);

  /// @brief Method ovrp_Media_GetInitialized, addr 0x3ff57c0, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_Media_GetInitialized(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> initialized);

  /// @brief Method ovrp_Media_GetMrcActivationMode, addr 0x3ff5a30, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetMrcActivationMode(
      ::ByRef<::GlobalNamespace::Media_OVRPlugin_MrcActivationMode>
          activationMode);

  /// @brief Method ovrp_Media_GetMrcAudioSampleRate, addr 0x3ff6ad4, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetMrcAudioSampleRate(::ByRef<int32_t> sampleRate);

  /// @brief Method ovrp_Media_GetMrcFrameImageFlipped, addr 0x3ff6d60, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetMrcFrameImageFlipped(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> flipped);

  /// @brief Method ovrp_Media_GetMrcFrameSize, addr 0x3ff6848, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetMrcFrameSize(::ByRef<int32_t> frameWidth,
                             ::ByRef<int32_t> frameHeight);

  /// @brief Method ovrp_Media_GetMrcInputVideoBufferType, addr 0x3ff6590, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetMrcInputVideoBufferType(
      ::ByRef<::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType>
          inputVideoBufferType);

  /// @brief Method ovrp_Media_Initialize, addr 0x3ff5560, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_Media_Initialize();

  /// @brief Method ovrp_Media_IsMrcActivated, addr 0x3ff61c0, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_Media_IsMrcActivated(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> mrcActivated);

  /// @brief Method ovrp_Media_IsMrcEnabled, addr 0x3ff6074, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_Media_IsMrcEnabled(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> mrcEnabled);

  /// @brief Method ovrp_Media_SetMrcActivationMode, addr 0x3ff5b74, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SetMrcActivationMode(
      ::GlobalNamespace::Media_OVRPlugin_MrcActivationMode activationMode);

  /// @brief Method ovrp_Media_SetMrcAudioSampleRate, addr 0x3ff6994, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SetMrcAudioSampleRate(int32_t sampleRate);

  /// @brief Method ovrp_Media_SetMrcFrameImageFlipped, addr 0x3ff6c18, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SetMrcFrameImageFlipped(::GlobalNamespace::OVRPlugin_Bool flipped);

  /// @brief Method ovrp_Media_SetMrcFrameSize, addr 0x3ff66e4, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SetMrcFrameSize(int32_t frameWidth, int32_t frameHeight);

  /// @brief Method ovrp_Media_SetMrcInputVideoBufferType, addr 0x3ff6450, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SetMrcInputVideoBufferType(
      ::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType
          inputVideoBufferType);

  /// @brief Method ovrp_Media_Shutdown, addr 0x3ff5688, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_Media_Shutdown();

  /// @brief Method ovrp_Media_SyncMrcFrame, addr 0x3ff79a0, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SyncMrcFrame(int32_t syncId);

  /// @brief Method ovrp_Media_Update, addr 0x3ff58fc, size 0x68, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_Media_Update();

  /// @brief Method ovrp_Media_UseMrcDebugCamera, addr 0x3ff630c, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_UseMrcDebugCamera(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> useMrcDebugCamera);

  /// @brief Method ovrp_SetDeveloperMode, addr 0x3fffd98, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetDeveloperMode(::GlobalNamespace::OVRPlugin_Bool active);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_38_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_38_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_38_0(OVRPlugin_OVRP_1_38_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_38_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_38_0(OVRPlugin_OVRP_1_38_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8213};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_38_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_39_0
class CORDL_TYPE OVRPlugin_OVRP_1_39_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_39_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_39_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_39_0(OVRPlugin_OVRP_1_39_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_39_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_39_0(OVRPlugin_OVRP_1_39_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8214};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_39_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_40_0
class CORDL_TYPE OVRPlugin_OVRP_1_40_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_40_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_40_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_40_0(OVRPlugin_OVRP_1_40_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_40_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_40_0(OVRPlugin_OVRP_1_40_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8215};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_40_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_41_0
class CORDL_TYPE OVRPlugin_OVRP_1_41_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_41_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_41_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_41_0(OVRPlugin_OVRP_1_41_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_41_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_41_0(OVRPlugin_OVRP_1_41_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8216};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_41_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_42_0
class CORDL_TYPE OVRPlugin_OVRP_1_42_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetAdaptiveGpuPerformanceScale2, addr 0x400010c, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetAdaptiveGpuPerformanceScale2(
      ::ByRef<float_t> adaptiveGpuPerformanceScale);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_42_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_42_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_42_0(OVRPlugin_OVRP_1_42_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_42_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_42_0(OVRPlugin_OVRP_1_42_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8217};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_42_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_43_0
class CORDL_TYPE OVRPlugin_OVRP_1_43_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_43_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_43_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_43_0(OVRPlugin_OVRP_1_43_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_43_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_43_0(OVRPlugin_OVRP_1_43_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8218};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_43_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_44_0
class CORDL_TYPE OVRPlugin_OVRP_1_44_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetHandState, addr 0x40002fc, size 0x94, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetHandState(
      ::GlobalNamespace::OVRPlugin_Step stepId,
      ::GlobalNamespace::OVRPlugin_Hand hand,
      ::ByRef<::GlobalNamespace::OVRPlugin_HandStateInternal> handState);

  /// @brief Method ovrp_GetHandTrackingEnabled, addr 0x4000280, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetHandTrackingEnabled(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> handTrackingEnabled);

  /// @brief Method ovrp_GetLocalTrackingSpaceRecenterCount, addr 0x4000814,
  /// size 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetLocalTrackingSpaceRecenterCount(::ByRef<int32_t> recenterCount);

  /// @brief Method ovrp_GetMesh, addr 0x4000450, size 0x80, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetMesh(::GlobalNamespace::OVRPlugin_MeshType meshType,
               ::System::IntPtr meshPtr);

  /// @brief Method ovrp_GetSkeleton, addr 0x4000390, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetSkeleton(::GlobalNamespace::OVRPlugin_SkeletonType skeletonType,
                   ::ByRef<::GlobalNamespace::OVRPlugin_Skeleton> skeleton);

  /// @brief Method ovrp_GetUseOverriddenExternalCameraFov, addr 0x4000564, size
  /// 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetUseOverriddenExternalCameraFov(
      int32_t cameraId,
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> useOverriddenFov);

  /// @brief Method ovrp_GetUseOverriddenExternalCameraStaticPose, addr
  /// 0x400067c, size 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetUseOverriddenExternalCameraStaticPose(
      int32_t cameraId,
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> useOverriddenStaticPose);

  /// @brief Method ovrp_OverrideExternalCameraFov, addr 0x40004d0, size 0x94,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_OverrideExternalCameraFov(
      int32_t cameraId, ::GlobalNamespace::OVRPlugin_Bool useOverriddenFov,
      ::ByRef<::GlobalNamespace::OVRPlugin_Fovf> fov);

  /// @brief Method ovrp_OverrideExternalCameraStaticPose, addr 0x40005e8, size
  /// 0x94, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_OverrideExternalCameraStaticPose(
      int32_t cameraId, ::GlobalNamespace::OVRPlugin_Bool useOverriddenPose,
      ::ByRef<::GlobalNamespace::OVRPlugin_Posef> poseInStageOrigin);

  /// @brief Method ovrp_ResetDefaultExternalCamera, addr 0x4000700, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_ResetDefaultExternalCamera();

  /// @brief Method ovrp_SetDefaultExternalCamera, addr 0x4000768, size 0xac,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetDefaultExternalCamera(
      ::StringW cameraName,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraIntrinsics> cameraIntrinsics,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraExtrinsics> cameraExtrinsics);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_44_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_44_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_44_0(OVRPlugin_OVRP_1_44_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_44_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_44_0(OVRPlugin_OVRP_1_44_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8219};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_44_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_45_0
class CORDL_TYPE OVRPlugin_OVRP_1_45_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetSystemHmd3DofModeEnabled, addr 0x400090c, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetSystemHmd3DofModeEnabled(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> enabled);

  /// @brief Method ovrp_Media_SetAvailableQueueIndexVulkan, addr 0x3ff7ae4,
  /// size 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SetAvailableQueueIndexVulkan(uint32_t queueIndexVk);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_45_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_45_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_45_0(OVRPlugin_OVRP_1_45_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_45_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_45_0(OVRPlugin_OVRP_1_45_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8220};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_45_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_46_0
class CORDL_TYPE OVRPlugin_OVRP_1_46_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetTiledMultiResDynamic, addr 0x4000a04, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetTiledMultiResDynamic(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> isDynamic);

  /// @brief Method ovrp_SetTiledMultiResDynamic, addr 0x4000a80, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetTiledMultiResDynamic(::GlobalNamespace::OVRPlugin_Bool isDynamic);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_46_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_46_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_46_0(OVRPlugin_OVRP_1_46_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_46_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_46_0(OVRPlugin_OVRP_1_46_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8221};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_46_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_47_0
class CORDL_TYPE OVRPlugin_OVRP_1_47_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_47_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_47_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_47_0(OVRPlugin_OVRP_1_47_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_47_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_47_0(OVRPlugin_OVRP_1_47_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8222};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_47_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_48_0
class CORDL_TYPE OVRPlugin_OVRP_1_48_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_SetExternalCameraProperties, addr 0x4000bf4, size 0xac,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetExternalCameraProperties(
      ::StringW cameraName,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraIntrinsics> cameraIntrinsics,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraExtrinsics> cameraExtrinsics);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_48_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_48_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_48_0(OVRPlugin_OVRP_1_48_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_48_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_48_0(OVRPlugin_OVRP_1_48_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8223};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_48_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_49_0
class CORDL_TYPE OVRPlugin_OVRP_1_49_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetHmdColorDesc, addr 0x4000d98, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetHmdColorDesc(
      ::ByRef<::GlobalNamespace::OVRPlugin_ColorSpace> colorSpace);

  /// @brief Method ovrp_Media_CreateCustomCameraAnchor, addr 0x400112c, size
  /// 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_CreateCustomCameraAnchor(::System::IntPtr anchorName,
                                      ::ByRef<::System::IntPtr> anchorHandle);

  /// @brief Method ovrp_Media_DestroyCustomCameraAnchor, addr 0x40011b0, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_DestroyCustomCameraAnchor(::System::IntPtr anchorHandle);

  /// @brief Method ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime, addr
  /// 0x3ff728c, size 0xcc, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_EncodeMrcFrameDualTexturesWithPoseTime(
      ::System::IntPtr backgroundTextureHandle,
      ::System::IntPtr foregroundTextureHandle, ::System::IntPtr audioData,
      int32_t audioDataLen, int32_t audioChannels, double_t timestamp,
      double_t poseTime, ::ByRef<int32_t> outSyncId);

  /// @brief Method ovrp_Media_EncodeMrcFrameWithPoseTime, addr 0x3ff710c, size
  /// 0xc4, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_EncodeMrcFrameWithPoseTime(::System::IntPtr rawBuffer,
                                        ::System::IntPtr audioDataPtr,
                                        int32_t audioDataLen,
                                        int32_t audioChannels,
                                        double_t timestamp, double_t poseTime,
                                        ::ByRef<int32_t> outSyncId);

  /// @brief Method ovrp_Media_EnumerateCameraAnchorHandles, addr 0x4000e14,
  /// size 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_EnumerateCameraAnchorHandles(
      ::ByRef<int32_t> anchorCount,
      ::ByRef<::System::IntPtr> CameraAnchorHandle);

  /// @brief Method ovrp_Media_GetCameraAnchorHandle, addr 0x4001024, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetCameraAnchorHandle(::System::IntPtr anchorName,
                                   ::ByRef<::System::IntPtr> anchorHandle);

  /// @brief Method ovrp_Media_GetCameraAnchorName, addr 0x4000f14, size 0x110,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetCameraAnchorName(
      ::System::IntPtr anchorHandle,
      ::ArrayW<char16_t, ::Array<char16_t> *> cameraName);

  /// @brief Method ovrp_Media_GetCameraAnchorType, addr 0x40010a8, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetCameraAnchorType(
      ::System::IntPtr anchorHandle,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraAnchorType> anchorType);

  /// @brief Method ovrp_Media_GetCameraMinMaxDistance, addr 0x4001340, size
  /// 0x94, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetCameraMinMaxDistance(::System::IntPtr anchorHandle,
                                     ::ByRef<double_t> minDistance,
                                     ::ByRef<double_t> maxDistance);

  /// @brief Method ovrp_Media_GetCurrentCameraAnchorHandle, addr 0x4000e98,
  /// size 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetCurrentCameraAnchorHandle(
      ::ByRef<::System::IntPtr> anchorHandle);

  /// @brief Method ovrp_Media_GetCustomCameraAnchorPose, addr 0x400122c, size
  /// 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetCustomCameraAnchorPose(
      ::System::IntPtr anchorHandle,
      ::ByRef<::GlobalNamespace::OVRPlugin_Posef> pose);

  /// @brief Method ovrp_Media_SetCameraMinMaxDistance, addr 0x40013d4, size
  /// 0x94, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SetCameraMinMaxDistance(::System::IntPtr anchorHandle,
                                     double_t minDistance,
                                     double_t maxDistance);

  /// @brief Method ovrp_Media_SetCustomCameraAnchorPose, addr 0x40012b0, size
  /// 0x90, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SetCustomCameraAnchorPose(::System::IntPtr anchorHandle,
                                       ::GlobalNamespace::OVRPlugin_Posef pose);

  /// @brief Method ovrp_Media_SetHeadsetControllerPose, addr 0x3ff7cac, size
  /// 0xc4, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SetHeadsetControllerPose(
      ::GlobalNamespace::OVRPlugin_Posef headsetPose,
      ::GlobalNamespace::OVRPlugin_Posef leftControllerPose,
      ::GlobalNamespace::OVRPlugin_Posef rightControllerPose);

  /// @brief Method ovrp_SetClientColorDesc, addr 0x4000d1c, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetClientColorDesc(::GlobalNamespace::OVRPlugin_ColorSpace colorSpace);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_49_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_49_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_49_0(OVRPlugin_OVRP_1_49_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_49_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_49_0(OVRPlugin_OVRP_1_49_0 const &) = delete;

  /// @brief Field OVRP_ANCHOR_NAME_SIZE offset 0xffffffff size 0x4
  static constexpr int32_t OVRP_ANCHOR_NAME_SIZE{static_cast<int32_t>(0x20)};

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8224};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_49_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_50_0
class CORDL_TYPE OVRPlugin_OVRP_1_50_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_50_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_50_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_50_0(OVRPlugin_OVRP_1_50_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_50_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_50_0(OVRPlugin_OVRP_1_50_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8225};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_50_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_51_0
class CORDL_TYPE OVRPlugin_OVRP_1_51_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_51_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_51_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_51_0(OVRPlugin_OVRP_1_51_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_51_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_51_0(OVRPlugin_OVRP_1_51_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8226};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_51_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_52_0
class CORDL_TYPE OVRPlugin_OVRP_1_52_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_52_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_52_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_52_0(OVRPlugin_OVRP_1_52_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_52_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_52_0(OVRPlugin_OVRP_1_52_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8227};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_52_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_53_0
class CORDL_TYPE OVRPlugin_OVRP_1_53_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_53_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_53_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_53_0(OVRPlugin_OVRP_1_53_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_53_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_53_0(OVRPlugin_OVRP_1_53_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8228};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_53_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_54_0
class CORDL_TYPE OVRPlugin_OVRP_1_54_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_Media_SetPlatformInitialized, addr 0x3ff5cb0, size
  /// 0x68, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SetPlatformInitialized();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_54_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_54_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_54_0(OVRPlugin_OVRP_1_54_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_54_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_54_0(OVRPlugin_OVRP_1_54_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8229};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_54_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_55_0
class CORDL_TYPE OVRPlugin_OVRP_1_55_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetNativeOpenXRHandles, addr 0x4001930, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetNativeOpenXRHandles(::ByRef<uint64_t> xrInstance,
                              ::ByRef<uint64_t> xrSession);

  /// @brief Method ovrp_GetNativeXrApiType, addr 0x40018b4, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetNativeXrApiType(::ByRef<::GlobalNamespace::OVRPlugin_XrApi> xrApi);

  /// @brief Method ovrp_GetSkeleton2, addr 0x4001750, size 0x84, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetSkeleton2(
      ::GlobalNamespace::OVRPlugin_SkeletonType skeletonType,
      ::ByRef<::GlobalNamespace::OVRPlugin_Skeleton2Internal> skeleton);

  /// @brief Method ovrp_PollEvent, addr 0x40017d4, size 0xe0, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_PollEvent(
      ::ByRef<::GlobalNamespace::OVRPlugin_EventDataBuffer> eventDataBuffer);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_55_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_55_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_55_0(OVRPlugin_OVRP_1_55_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_55_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_55_0(OVRPlugin_OVRP_1_55_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8230};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_55_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_55_1
class CORDL_TYPE OVRPlugin_OVRP_1_55_1 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_PollEvent2, addr 0x4001a30, size 0x84, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_PollEvent2(::ByRef<::GlobalNamespace::OVRPlugin_EventType> eventType,
                  ::ByRef<::System::IntPtr> eventData);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_55_1();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_55_1",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_55_1(OVRPlugin_OVRP_1_55_1 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_55_1",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_55_1(OVRPlugin_OVRP_1_55_1 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8231};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_55_1, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_56_0
class CORDL_TYPE OVRPlugin_OVRP_1_56_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_56_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_56_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_56_0(OVRPlugin_OVRP_1_56_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_56_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_56_0(OVRPlugin_OVRP_1_56_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8232};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_56_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_57_0
class CORDL_TYPE OVRPlugin_OVRP_1_57_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetEyeFovPremultipliedAlphaMode, addr 0x4001c28, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetEyeFovPremultipliedAlphaMode(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> enabled);

  /// @brief Method ovrp_Media_GetPlatformCameraMode, addr 0x3ff5de4, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_GetPlatformCameraMode(
      ::ByRef<::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode>
          platformCameraMode);

  /// @brief Method ovrp_Media_SetPlatformCameraMode, addr 0x3ff5f28, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_SetPlatformCameraMode(
      ::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode platformCameraMode);

  /// @brief Method ovrp_SetEyeFovPremultipliedAlphaMode, addr 0x4001bac, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetEyeFovPremultipliedAlphaMode(
      ::GlobalNamespace::OVRPlugin_Bool enabled);

  /// @brief Method ovrp_SetKeyboardOverlayUV, addr 0x4001ca4, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetKeyboardOverlayUV(::GlobalNamespace::OVRPlugin_Vector2f uv);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_57_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_57_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_57_0(OVRPlugin_OVRP_1_57_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_57_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_57_0(OVRPlugin_OVRP_1_57_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8233};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_57_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_58_0
class CORDL_TYPE OVRPlugin_OVRP_1_58_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_58_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_58_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_58_0(OVRPlugin_OVRP_1_58_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_58_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_58_0(OVRPlugin_OVRP_1_58_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8234};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_58_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_59_0
class CORDL_TYPE OVRPlugin_OVRP_1_59_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_59_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_59_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_59_0(OVRPlugin_OVRP_1_59_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_59_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_59_0(OVRPlugin_OVRP_1_59_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8235};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_59_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_60_0
class CORDL_TYPE OVRPlugin_OVRP_1_60_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_60_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_60_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_60_0(OVRPlugin_OVRP_1_60_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_60_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_60_0(OVRPlugin_OVRP_1_60_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8236};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_60_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_61_0
class CORDL_TYPE OVRPlugin_OVRP_1_61_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_61_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_61_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_61_0(OVRPlugin_OVRP_1_61_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_61_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_61_0(OVRPlugin_OVRP_1_61_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8237};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_61_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_62_0
class CORDL_TYPE OVRPlugin_OVRP_1_62_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_62_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_62_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_62_0(OVRPlugin_OVRP_1_62_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_62_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_62_0(OVRPlugin_OVRP_1_62_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8238};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_62_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_63_0
class CORDL_TYPE OVRPlugin_OVRP_1_63_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_AddInsightPassthroughSurfaceGeometry, addr 0x400230c,
  /// size 0xac, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_AddInsightPassthroughSurfaceGeometry(
      int32_t layerId, uint64_t meshHandle,
      ::UnityEngine::Matrix4x4 T_world_model,
      ::ByRef<uint64_t> geometryInstanceHandle);

  /// @brief Method ovrp_CreateInsightTriangleMesh, addr 0x40021dc, size 0xb4,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_CreateInsightTriangleMesh(int32_t layerId, ::System::IntPtr vertices,
                                 int32_t vertexCount,
                                 ::System::IntPtr triangles,
                                 int32_t triangleCount,
                                 ::ByRef<uint64_t> meshHandle);

  /// @brief Method ovrp_DestroyInsightPassthroughGeometryInstance, addr
  /// 0x40023b8, size 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_DestroyInsightPassthroughGeometryInstance(
      uint64_t geometryInstanceHandle);

  /// @brief Method ovrp_DestroyInsightTriangleMesh, addr 0x4002290, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_DestroyInsightTriangleMesh(uint64_t meshHandle);

  /// @brief Method ovrp_GetInsightPassthroughInitialized, addr 0x40020e0, size
  /// 0x68, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool
  ovrp_GetInsightPassthroughInitialized();

  /// @brief Method ovrp_InitializeInsightPassthrough, addr 0x4002010, size
  /// 0x68, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_InitializeInsightPassthrough();

  /// @brief Method ovrp_SetInsightPassthroughStyle, addr 0x4002148, size 0x94,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetInsightPassthroughStyle(
      int32_t layerId,
      ::GlobalNamespace::OVRPlugin_InsightPassthroughStyle style);

  /// @brief Method ovrp_ShutdownInsightPassthrough, addr 0x4002078, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_ShutdownInsightPassthrough();

  /// @brief Method ovrp_UpdateInsightPassthroughGeometryTransform, addr
  /// 0x4002434, size 0x94, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_UpdateInsightPassthroughGeometryTransform(
      uint64_t geometryInstanceHandle, ::UnityEngine::Matrix4x4 T_world_model);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_63_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_63_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_63_0(OVRPlugin_OVRP_1_63_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_63_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_63_0(OVRPlugin_OVRP_1_63_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8239};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_63_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_64_0
class CORDL_TYPE OVRPlugin_OVRP_1_64_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_LocateSpace, addr 0x4002544, size 0x94, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_LocateSpace(::ByRef<::GlobalNamespace::OVRPlugin_Posef> location,
                   ::ByRef<uint64_t> space,
                   ::GlobalNamespace::OVRPlugin_TrackingOrigin trackingOrigin);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_64_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_64_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_64_0(OVRPlugin_OVRP_1_64_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_64_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_64_0(OVRPlugin_OVRP_1_64_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8240};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_64_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_65_0
class CORDL_TYPE OVRPlugin_OVRP_1_65_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_DestroySpace, addr 0x4002654, size 0x7c, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_DestroySpace(::ByRef<uint64_t> space);

  /// @brief Method ovrp_KtxDestroy, addr 0x3ff8a9c, size 0x7c, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_KtxDestroy(::System::IntPtr texture);

  /// @brief Method ovrp_KtxGetTextureData, addr 0x3ff88dc, size 0x94, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_KtxGetTextureData(::System::IntPtr texture, ::System::IntPtr data,
                         uint32_t bufferSize);

  /// @brief Method ovrp_KtxLoadFromMemory, addr 0x3ff8010, size 0x94, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_KtxLoadFromMemory(::ByRef<::System::IntPtr> data, uint32_t length,
                         ::ByRef<::System::IntPtr> texture);

  /// @brief Method ovrp_KtxTextureHeight, addr 0x3ff8398, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_KtxTextureHeight(::System::IntPtr texture, ::ByRef<uint32_t> height);

  /// @brief Method ovrp_KtxTextureSize, addr 0x3ff8714, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_KtxTextureSize(::System::IntPtr texture, ::ByRef<uint32_t> size);

  /// @brief Method ovrp_KtxTextureWidth, addr 0x3ff81dc, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_KtxTextureWidth(::System::IntPtr texture, ::ByRef<uint32_t> width);

  /// @brief Method ovrp_KtxTranscode, addr 0x3ff8558, size 0x84, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_KtxTranscode(::System::IntPtr texture, uint32_t format);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_65_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_65_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_65_0(OVRPlugin_OVRP_1_65_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_65_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_65_0(OVRPlugin_OVRP_1_65_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8241};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_65_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_66_0
class CORDL_TYPE OVRPlugin_OVRP_1_66_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetInsightPassthroughInitializationState, addr
  /// 0x400274c, size 0x68, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetInsightPassthroughInitializationState();

  /// @brief Method ovrp_Media_IsCastingToRemoteClient, addr 0x3ff7e40, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_Media_IsCastingToRemoteClient(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> isCasting);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_66_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_66_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_66_0(OVRPlugin_OVRP_1_66_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_66_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_66_0(OVRPlugin_OVRP_1_66_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8242};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_66_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_67_0
class CORDL_TYPE OVRPlugin_OVRP_1_67_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_67_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_67_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_67_0(OVRPlugin_OVRP_1_67_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_67_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_67_0(OVRPlugin_OVRP_1_67_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8243};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_67_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_68_0
class CORDL_TYPE OVRPlugin_OVRP_1_68_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetKeyboardState, addr 0x4002d30, size 0x94, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetKeyboardState(
      ::GlobalNamespace::OVRPlugin_Step stepId, int32_t frameIndex,
      ::ByRef<::GlobalNamespace::OVRPlugin_KeyboardState> keyboardState);

  /// @brief Method ovrp_GetRenderModelPaths, addr 0x4002948, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetRenderModelPaths(uint32_t index, ::System::IntPtr path);

  /// @brief Method ovrp_GetRenderModelProperties, addr 0x40029cc, size 0xf8,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetRenderModelProperties(
      ::StringW path,
      ::ByRef<::GlobalNamespace::OVRPlugin_RenderModelPropertiesInternal>
          properties);

  /// @brief Method ovrp_GetSystemKeyboardDescription, addr 0x4002c3c, size
  /// 0xf4, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetSystemKeyboardDescription(
      ::GlobalNamespace::OVRPlugin_TrackedKeyboardQueryFlags keyboardQueryFlags,
      ::ByRef<::GlobalNamespace::OVRPlugin_KeyboardDescription>
          keyboardDescription);

  /// @brief Method ovrp_LoadRenderModel, addr 0x40028ac, size 0x9c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_LoadRenderModel(uint64_t modelKey, uint32_t bufferInputCapacity,
                       ::ByRef<uint32_t> bufferCountOutput,
                       ::System::IntPtr buffer);

  /// @brief Method ovrp_SetInsightPassthroughKeyboardHandsIntensity, addr
  /// 0x4002ac4, size 0x94, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetInsightPassthroughKeyboardHandsIntensity(
      int32_t layerId,
      ::GlobalNamespace::OVRPlugin_InsightPassthroughKeyboardHandsIntensity
          intensity);

  /// @brief Method ovrp_StartKeyboardTracking, addr 0x4002b58, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_StartKeyboardTracking(uint64_t trackedKeyboardId);

  /// @brief Method ovrp_StopKeyboardTracking, addr 0x4002bd4, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_StopKeyboardTracking();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_68_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_68_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_68_0(OVRPlugin_OVRP_1_68_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_68_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_68_0(OVRPlugin_OVRP_1_68_0 const &) = delete;

  /// @brief Field OVRP_RENDER_MODEL_MAX_NAME_LENGTH offset 0xffffffff size 0x4
  static constexpr int32_t OVRP_RENDER_MODEL_MAX_NAME_LENGTH{
      static_cast<int32_t>(0x40)};

  /// @brief Field OVRP_RENDER_MODEL_MAX_PATH_LENGTH offset 0xffffffff size 0x4
  static constexpr int32_t OVRP_RENDER_MODEL_MAX_PATH_LENGTH{
      static_cast<int32_t>(0x100)};

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8244};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_68_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_69_0
class CORDL_TYPE OVRPlugin_OVRP_1_69_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetNodePoseStateImmediate, addr 0x4002e40, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetNodePoseStateImmediate(
      ::GlobalNamespace::OVRPlugin_Node nodeId,
      ::ByRef<::GlobalNamespace::OVRPlugin_PoseStatef> nodePoseState);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_69_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_69_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_69_0(OVRPlugin_OVRP_1_69_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_69_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_69_0(OVRPlugin_OVRP_1_69_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8245};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_69_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_70_0
class CORDL_TYPE OVRPlugin_OVRP_1_70_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_SetLogCallback2, addr 0x4002f40, size 0x80, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_SetLogCallback2(
      ::GlobalNamespace::OVRPlugin_LogCallback2DelegateType *logCallback);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_70_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_70_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_70_0(OVRPlugin_OVRP_1_70_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_70_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_70_0(OVRPlugin_OVRP_1_70_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8246};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_70_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_71_0
class CORDL_TYPE OVRPlugin_OVRP_1_71_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetSuggestedCpuPerformanceLevel, addr 0x4003134, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetSuggestedCpuPerformanceLevel(
      ::ByRef<::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel>
          perfLevel);

  /// @brief Method ovrp_GetSuggestedGpuPerformanceLevel, addr 0x400322c, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetSuggestedGpuPerformanceLevel(
      ::ByRef<::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel>
          perfLevel);

  /// @brief Method ovrp_IsInsightPassthroughSupported, addr 0x400303c, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_IsInsightPassthroughSupported(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> supported);

  /// @brief Method ovrp_SetSuggestedCpuPerformanceLevel, addr 0x40030b8, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetSuggestedCpuPerformanceLevel(
      ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel perfLevel);

  /// @brief Method ovrp_SetSuggestedGpuPerformanceLevel, addr 0x40031b0, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetSuggestedGpuPerformanceLevel(
      ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel perfLevel);

  /// @brief Method ovrp_UnityOpenXR_HookGetInstanceProcAddr, addr 0x3ff8d68,
  /// size 0x7c, virtual false, abstract: false, final false
  static inline ::System::IntPtr
  ovrp_UnityOpenXR_HookGetInstanceProcAddr(::System::IntPtr func);

  /// @brief Method ovrp_UnityOpenXR_OnAppSpaceChange, addr 0x3ff9260, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline void ovrp_UnityOpenXR_OnAppSpaceChange(uint64_t xrSpace);

  /// @brief Method ovrp_UnityOpenXR_OnInstanceCreate, addr 0x3ff8eac, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_UnityOpenXR_OnInstanceCreate(uint64_t xrInstance);

  /// @brief Method ovrp_UnityOpenXR_OnInstanceDestroy, addr 0x3ff8fe8, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline void ovrp_UnityOpenXR_OnInstanceDestroy(uint64_t xrInstance);

  /// @brief Method ovrp_UnityOpenXR_OnSessionBegin, addr 0x3ff94f4, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline void ovrp_UnityOpenXR_OnSessionBegin(uint64_t xrSession);

  /// @brief Method ovrp_UnityOpenXR_OnSessionCreate, addr 0x3ff9124, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline void ovrp_UnityOpenXR_OnSessionCreate(uint64_t xrSession);

  /// @brief Method ovrp_UnityOpenXR_OnSessionDestroy, addr 0x3ff98a8, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline void ovrp_UnityOpenXR_OnSessionDestroy(uint64_t xrSession);

  /// @brief Method ovrp_UnityOpenXR_OnSessionEnd, addr 0x3ff9630, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline void ovrp_UnityOpenXR_OnSessionEnd(uint64_t xrSession);

  /// @brief Method ovrp_UnityOpenXR_OnSessionExiting, addr 0x3ff976c, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline void ovrp_UnityOpenXR_OnSessionExiting(uint64_t xrSession);

  /// @brief Method ovrp_UnityOpenXR_OnSessionStateChange, addr 0x3ff93b0, size
  /// 0x84, virtual false, abstract: false, final false
  static inline void ovrp_UnityOpenXR_OnSessionStateChange(int32_t oldState,
                                                           int32_t newState);

  /// @brief Method ovrp_UnityOpenXR_SetClientVersion, addr 0x3ff8c10, size
  /// 0x94, virtual false, abstract: false, final false
  static inline void ovrp_UnityOpenXR_SetClientVersion(int32_t majorVersion,
                                                       int32_t minorVersion,
                                                       int32_t patchVersion);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_71_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_71_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_71_0(OVRPlugin_OVRP_1_71_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_71_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_71_0(OVRPlugin_OVRP_1_71_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8247};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_71_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_72_0
class CORDL_TYPE OVRPlugin_OVRP_1_72_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_CreateSpatialAnchor, addr 0x4003324, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_CreateSpatialAnchor(
      ::ByRef<::GlobalNamespace::OVRPlugin_SpatialAnchorCreateInfo> createInfo,
      ::ByRef<uint64_t> requestId);

  /// @brief Method ovrp_EnumerateSpaceSupportedComponents, addr 0x40034ec, size
  /// 0xa4, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_EnumerateSpaceSupportedComponents(
      ::ByRef<uint64_t> space, uint32_t componentTypesCapacityInput,
      ::ByRef<uint32_t> componentTypesCountOutput,
      ::ByRef<
          ::ArrayW<::GlobalNamespace::OVRPlugin_SpaceComponentType,
                   ::Array<::GlobalNamespace::OVRPlugin_SpaceComponentType> *>>
          componentTypes);

  /// @brief Method ovrp_EraseSpace, addr 0x40037a4, size 0x94, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_EraseSpace(::ByRef<uint64_t> space,
                  ::GlobalNamespace::OVRPlugin_SpaceStorageLocation location,
                  ::ByRef<uint64_t> requestId);

  /// @brief Method ovrp_GetSpaceBoundary2D, addr 0x4003acc, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetSpaceBoundary2D(
      ::ByRef<uint64_t> space,
      ::ByRef<::GlobalNamespace::OVRPlugin_PolygonalBoundary2DInternal>
          boundaryInternal);

  /// @brief Method ovrp_GetSpaceBoundingBox2D, addr 0x40038bc, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetSpaceBoundingBox2D(::ByRef<uint64_t> space,
                             ::ByRef<::GlobalNamespace::OVRPlugin_Rectf> rect);

  /// @brief Method ovrp_GetSpaceBoundingBox3D, addr 0x4003940, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetSpaceBoundingBox3D(
      ::ByRef<uint64_t> space,
      ::ByRef<::GlobalNamespace::OVRPlugin_Boundsf> bounds);

  /// @brief Method ovrp_GetSpaceComponentStatus, addr 0x4003454, size 0x98,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetSpaceComponentStatus(
      ::ByRef<uint64_t> space,
      ::GlobalNamespace::OVRPlugin_SpaceComponentType componentType,
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> enabled,
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> changePending);

  /// @brief Method ovrp_GetSpaceContainer, addr 0x4003838, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetSpaceContainer(
      ::ByRef<uint64_t> space,
      ::ByRef<::GlobalNamespace::OVRPlugin_SpaceContainerInternal>
          containerInternal);

  /// @brief Method ovrp_GetSpaceRoomLayout, addr 0x4003a48, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetSpaceRoomLayout(
      ::ByRef<uint64_t> space,
      ::ByRef<::GlobalNamespace::OVRPlugin_RoomLayoutInternal>
          roomLayoutInternal);

  /// @brief Method ovrp_GetSpaceSemanticLabels, addr 0x40039c4, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetSpaceSemanticLabels(
      ::ByRef<uint64_t> space,
      ::ByRef<::GlobalNamespace::OVRPlugin_SpaceSemanticLabelInternal>
          labelsInternal);

  /// @brief Method ovrp_QuerySpaces, addr 0x400362c, size 0xdc, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_QuerySpaces(
      ::ByRef<::GlobalNamespace::OVRPlugin_SpaceQueryInfo> queryInfo,
      ::ByRef<uint64_t> requestId);

  /// @brief Method ovrp_RequestSceneCapture, addr 0x4003b50, size 0xdc, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_RequestSceneCapture(
      ::ByRef<::GlobalNamespace::OVRPlugin_SceneCaptureRequestInternal> request,
      ::ByRef<uint64_t> requestId);

  /// @brief Method ovrp_RetrieveSpaceQueryResults, addr 0x4003708, size 0x9c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_RetrieveSpaceQueryResults(::ByRef<uint64_t> requestId,
                                 uint32_t resultCapacityInput,
                                 ::ByRef<uint32_t> resultCountOutput,
                                 ::System::IntPtr results);

  /// @brief Method ovrp_SaveSpace, addr 0x4003590, size 0x9c, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SaveSpace(::ByRef<uint64_t> space,
                 ::GlobalNamespace::OVRPlugin_SpaceStorageLocation location,
                 ::GlobalNamespace::OVRPlugin_SpaceStoragePersistenceMode mode,
                 ::ByRef<uint64_t> requestId);

  /// @brief Method ovrp_SetSpaceComponentStatus, addr 0x40033a8, size 0xac,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetSpaceComponentStatus(
      ::ByRef<uint64_t> space,
      ::GlobalNamespace::OVRPlugin_SpaceComponentType componentType,
      ::GlobalNamespace::OVRPlugin_Bool enable, double_t timeout,
      ::ByRef<uint64_t> requestId);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_72_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_72_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_72_0(OVRPlugin_OVRP_1_72_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_72_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_72_0(OVRPlugin_OVRP_1_72_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8248};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_72_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_73_0
class CORDL_TYPE OVRPlugin_OVRP_1_73_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_73_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_73_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_73_0(OVRPlugin_OVRP_1_73_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_73_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_73_0(OVRPlugin_OVRP_1_73_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8249};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_73_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_74_0
class CORDL_TYPE OVRPlugin_OVRP_1_74_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_ChangeVirtualKeyboardTextContext, addr 0x4003f10, size
  /// 0x94, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_ChangeVirtualKeyboardTextContext(::StringW textContext);

  /// @brief Method ovrp_CreateVirtualKeyboard, addr 0x4003da8, size 0x6c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_CreateVirtualKeyboard(
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardCreateInfo createInfo);

  /// @brief Method ovrp_CreateVirtualKeyboardSpace, addr 0x4003fa4, size 0x8c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_CreateVirtualKeyboardSpace(
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardSpaceCreateInfo createInfo,
      ::ByRef<uint64_t> keyboardSpace);

  /// @brief Method ovrp_DestroyVirtualKeyboard, addr 0x4003e14, size 0x68,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_DestroyVirtualKeyboard();

  /// @brief Method ovrp_GetRenderModelProperties2, addr 0x4004138, size 0x100,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetRenderModelProperties2(
      ::StringW path, ::GlobalNamespace::OVRPlugin_RenderModelFlags flags,
      ::ByRef<::GlobalNamespace::OVRPlugin_RenderModelPropertiesInternal>
          properties);

  /// @brief Method ovrp_GetSpaceUuid, addr 0x4003d24, size 0x84, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetSpaceUuid(::ByRef<uint64_t> space, ::ByRef<::System::Guid> uuid);

  /// @brief Method ovrp_GetVirtualKeyboardScale, addr 0x40040bc, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetVirtualKeyboardScale(::ByRef<float_t> location);

  /// @brief Method ovrp_SendVirtualKeyboardInput, addr 0x4003e7c, size 0x94,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SendVirtualKeyboardInput(
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputInfo inputInfo,
      ::ByRef<::GlobalNamespace::OVRPlugin_Posef> interactorRootPose);

  /// @brief Method ovrp_SuggestVirtualKeyboardLocation, addr 0x4004030, size
  /// 0x8c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SuggestVirtualKeyboardLocation(
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationInfo locationInfo);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_74_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_74_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_74_0(OVRPlugin_OVRP_1_74_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_74_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_74_0(OVRPlugin_OVRP_1_74_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8250};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_74_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_75_0
class CORDL_TYPE OVRPlugin_OVRP_1_75_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_75_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_75_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_75_0(OVRPlugin_OVRP_1_75_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_75_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_75_0(OVRPlugin_OVRP_1_75_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8251};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_75_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_76_0
class CORDL_TYPE OVRPlugin_OVRP_1_76_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetNodePoseStateAtTime, addr 0x4004330, size 0x94,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetNodePoseStateAtTime(
      double_t time, ::GlobalNamespace::OVRPlugin_Node nodeId,
      ::ByRef<::GlobalNamespace::OVRPlugin_PoseStatef> nodePoseState);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_76_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_76_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_76_0(OVRPlugin_OVRP_1_76_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_76_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_76_0(OVRPlugin_OVRP_1_76_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8252};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_76_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_78_0
class CORDL_TYPE OVRPlugin_OVRP_1_78_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetBodyState, addr 0x4004a90, size 0x94, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetBodyState(
      ::GlobalNamespace::OVRPlugin_Step stepId, int32_t frameIndex,
      ::ByRef<::GlobalNamespace::OVRPlugin_BodyStateInternal> bodyState);

  /// @brief Method ovrp_GetBodyTrackingEnabled, addr 0x4004998, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetBodyTrackingEnabled(::ByRef<::GlobalNamespace::OVRPlugin_Bool> value);

  /// @brief Method ovrp_GetBodyTrackingSupported, addr 0x4004a14, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetBodyTrackingSupported(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> value);

  /// @brief Method ovrp_GetControllerSampleRateHz, addr 0x400517c, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetControllerSampleRateHz(
      ::GlobalNamespace::OVRPlugin_Controller controller,
      ::ByRef<float_t> sampleRateHz);

  /// @brief Method ovrp_GetControllerState5, addr 0x4004d44, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetControllerState5(
      uint32_t controllerMask,
      ::ByRef<::GlobalNamespace::OVRPlugin_ControllerState5> controllerState);

  /// @brief Method ovrp_GetCurrentInteractionProfile, addr 0x4004fd8, size
  /// 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetCurrentInteractionProfile(
      ::GlobalNamespace::OVRPlugin_Hand hand,
      ::ByRef<::GlobalNamespace::OVRPlugin_InteractionProfile>
          interactionProfile);

  /// @brief Method ovrp_GetEyeGazesState, addr 0x4004cb0, size 0x94, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetEyeGazesState(
      ::GlobalNamespace::OVRPlugin_Step stepId, int32_t frameIndex,
      ::ByRef<::GlobalNamespace::OVRPlugin_EyeGazesStateInternal>
          eyeGazesState);

  /// @brief Method ovrp_GetEyeTrackingEnabled, addr 0x4004c34, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetEyeTrackingEnabled(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> eyeTrackingEnabled);

  /// @brief Method ovrp_GetEyeTrackingSupported, addr 0x40048a0, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetEyeTrackingSupported(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> eyeTrackingSupported);

  /// @brief Method ovrp_GetFaceState, addr 0x4004ba0, size 0x94, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetFaceState(
      ::GlobalNamespace::OVRPlugin_Step stepId, int32_t frameIndex,
      ::ByRef<::GlobalNamespace::OVRPlugin_FaceStateInternal> faceState);

  /// @brief Method ovrp_GetFaceTrackingEnabled, addr 0x4004b24, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetFaceTrackingEnabled(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> faceTrackingEnabled);

  /// @brief Method ovrp_GetFaceTrackingSupported, addr 0x400491c, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetFaceTrackingSupported(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> faceTrackingSupported);

  /// @brief Method ovrp_GetFoveationEyeTracked, addr 0x4004538, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetFoveationEyeTracked(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> isEyeTrackedFoveation);

  /// @brief Method ovrp_GetFoveationEyeTrackedSupported, addr 0x40044bc, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetFoveationEyeTrackedSupported(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> foveationSupported);

  /// @brief Method ovrp_GetLocalDimming, addr 0x4004f5c, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetLocalDimming(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> localDimmingMode);

  /// @brief Method ovrp_GetLocalDimmingSupported, addr 0x4004e64, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetLocalDimmingSupported(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> localDimmingSupported);

  /// @brief Method ovrp_GetPassthroughCapabilityFlags, addr 0x4004440, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetPassthroughCapabilityFlags(
      ::ByRef<::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags>
          capabilityFlags);

  /// @brief Method ovrp_SetControllerHapticsAmplitudeEnvelope, addr 0x400505c,
  /// size 0x94, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetControllerHapticsAmplitudeEnvelope(
      ::GlobalNamespace::OVRPlugin_Controller controllerMask,
      ::GlobalNamespace::OVRPlugin_HapticsAmplitudeEnvelopeVibration
          hapticsVibration);

  /// @brief Method ovrp_SetControllerHapticsPcm, addr 0x40050f0, size 0x8c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetControllerHapticsPcm(
      ::GlobalNamespace::OVRPlugin_Controller controllerMask,
      ::GlobalNamespace::OVRPlugin_HapticsPcmVibration hapticsVibration);

  /// @brief Method ovrp_SetControllerLocalizedVibration, addr 0x4004dc8, size
  /// 0x9c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetControllerLocalizedVibration(
      ::GlobalNamespace::OVRPlugin_Controller controllerMask,
      ::GlobalNamespace::OVRPlugin_HapticsLocation hapticsLocationMask,
      float_t frequency, float_t amplitude);

  /// @brief Method ovrp_SetFoveationEyeTracked, addr 0x40045b4, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_SetFoveationEyeTracked(
      ::GlobalNamespace::OVRPlugin_Bool isEyeTrackedFoveation);

  /// @brief Method ovrp_SetLocalDimming, addr 0x4004ee0, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetLocalDimming(::GlobalNamespace::OVRPlugin_Bool localDimmingMode);

  /// @brief Method ovrp_StartBodyTracking, addr 0x4004700, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_StartBodyTracking();

  /// @brief Method ovrp_StartEyeTracking, addr 0x40047d0, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_StartEyeTracking();

  /// @brief Method ovrp_StartFaceTracking, addr 0x4004630, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_StartFaceTracking();

  /// @brief Method ovrp_StopBodyTracking, addr 0x4004768, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_StopBodyTracking();

  /// @brief Method ovrp_StopEyeTracking, addr 0x4004838, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_StopEyeTracking();

  /// @brief Method ovrp_StopFaceTracking, addr 0x4004698, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_StopFaceTracking();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_78_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_78_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_78_0(OVRPlugin_OVRP_1_78_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_78_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_78_0(OVRPlugin_OVRP_1_78_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8253};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_78_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_79_0
class CORDL_TYPE OVRPlugin_OVRP_1_79_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_CreateSpaceUser, addr 0x4005448, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_CreateSpaceUser(::ByRef<uint64_t> spaceUserId,
                       ::ByRef<uint64_t> spaceUserHandle);

  /// @brief Method ovrp_DeclareUser, addr 0x40055dc, size 0x80, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_DeclareUser(::ByRef<uint64_t> userId, ::ByRef<uint64_t> userHandle);

  /// @brief Method ovrp_DestroySpaceUser, addr 0x40054cc, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_DestroySpaceUser(::ByRef<uint64_t> userHandle);

  /// @brief Method ovrp_GetSpaceUserId, addr 0x40053c4, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetSpaceUserId(::ByRef<uint64_t> spaceUserHandle,
                      ::ByRef<uint64_t> spaceUserId);

  /// @brief Method ovrp_LocateSpace2, addr 0x4005548, size 0x94, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_LocateSpace2(
      ::ByRef<::GlobalNamespace::OVRPlugin_SpaceLocationf> location,
      ::ByRef<uint64_t> space,
      ::GlobalNamespace::OVRPlugin_TrackingOrigin trackingOrigin);

  /// @brief Method ovrp_QplCreateMarkerHandle, addr 0x3ffa048, size 0x9c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_QplCreateMarkerHandle(::StringW name, ::ByRef<int32_t> nameHandle);

  /// @brief Method ovrp_QplDestroyMarkerHandle, addr 0x3ffa1ac, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_QplDestroyMarkerHandle(int32_t nameHandle);

  /// @brief Method ovrp_QplMarkerAnnotation, addr 0x3ff9ea4, size 0xc8, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_QplMarkerAnnotation(int32_t markerId, ::StringW annotationKey,
                           ::StringW annotationValue, int32_t instanceKey);

  /// @brief Method ovrp_QplMarkerEnd, addr 0x3ff9b8c, size 0x9c, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_QplMarkerEnd(int32_t markerId,
                    ::GlobalNamespace::Qpl_OVRPlugin_ResultType resultTypeId,
                    int32_t instanceKey, int64_t timestampMs);

  /// @brief Method ovrp_QplMarkerPointCached, addr 0x3ff9d18, size 0x9c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_QplMarkerPointCached(int32_t markerId, int32_t nameHandle,
                            int32_t instanceKey, int64_t timestampMs);

  /// @brief Method ovrp_QplMarkerStart, addr 0x3ff9a08, size 0x94, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_QplMarkerStart(int32_t markerId, int32_t instanceKey,
                      int64_t timestampMs);

  /// @brief Method ovrp_SaveSpaceList, addr 0x4005328, size 0x9c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SaveSpaceList(::cordl_internals::Ptr<uint64_t> spaces,
                     uint32_t numSpaces,
                     ::GlobalNamespace::OVRPlugin_SpaceStorageLocation location,
                     ::ByRef<uint64_t> requestId);

  /// @brief Method ovrp_ShareSpaces, addr 0x400527c, size 0xac, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_ShareSpaces(::cordl_internals::Ptr<uint64_t> spaces, uint32_t numSpaces,
                   ::cordl_internals::Ptr<uint64_t> userHandles,
                   uint32_t numUsers, ::ByRef<uint64_t> requestId);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_79_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_79_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_79_0(OVRPlugin_OVRP_1_79_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_79_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_79_0(OVRPlugin_OVRP_1_79_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8254};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_79_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_81_0
class CORDL_TYPE OVRPlugin_OVRP_1_81_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_81_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_81_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_81_0(OVRPlugin_OVRP_1_81_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_81_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_81_0(OVRPlugin_OVRP_1_81_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8255};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_81_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_82_0
class CORDL_TYPE OVRPlugin_OVRP_1_82_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetSpaceTriangleMesh, addr 0x4005754, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetSpaceTriangleMesh(
      ::ByRef<uint64_t> space,
      ::ByRef<::GlobalNamespace::OVRPlugin_TriangleMeshInternal>
          triangleMeshInternal);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_82_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_82_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_82_0(OVRPlugin_OVRP_1_82_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_82_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_82_0(OVRPlugin_OVRP_1_82_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8256};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_82_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_83_0
class CORDL_TYPE OVRPlugin_OVRP_1_83_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetControllerState6, addr 0x4005854, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetControllerState6(
      uint32_t controllerMask,
      ::ByRef<::GlobalNamespace::OVRPlugin_ControllerState6> controllerState);

  /// @brief Method ovrp_GetVirtualKeyboardDirtyTextures, addr 0x4005954, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetVirtualKeyboardDirtyTextures(
      ::ByRef<::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIdsInternal>
          textureIds);

  /// @brief Method ovrp_GetVirtualKeyboardModelAnimationStates, addr 0x40058d8,
  /// size 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetVirtualKeyboardModelAnimationStates(
      ::ByRef<::GlobalNamespace::
                  OVRPlugin_VirtualKeyboardModelAnimationStatesInternal>
          animationStates);

  /// @brief Method ovrp_GetVirtualKeyboardTextureData, addr 0x40059d0, size
  /// 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetVirtualKeyboardTextureData(
      uint64_t textureId,
      ::ByRef<::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureData>
          textureData);

  /// @brief Method ovrp_SetVirtualKeyboardModelVisibility, addr 0x4005a54, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetVirtualKeyboardModelVisibility(
      ::ByRef<::GlobalNamespace::OVRPlugin_VirtualKeyboardModelVisibility>
          visibility);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_83_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_83_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_83_0(OVRPlugin_OVRP_1_83_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_83_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_83_0(OVRPlugin_OVRP_1_83_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8257};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_83_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_84_0
class CORDL_TYPE OVRPlugin_OVRP_1_84_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_CreatePassthroughColorLut, addr 0x4005b4c, size 0xac,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_CreatePassthroughColorLut(
      ::GlobalNamespace::OVRPlugin_PassthroughColorLutChannels channels,
      uint32_t resolution,
      ::GlobalNamespace::OVRPlugin_PassthroughColorLutData data,
      ::ByRef<uint64_t> colorLut);

  /// @brief Method ovrp_DestroyPassthroughColorLut, addr 0x4005bf8, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_DestroyPassthroughColorLut(uint64_t colorLut);

  /// @brief Method ovrp_GetEyeLayerRecommendedResolution, addr 0x4005e10, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetEyeLayerRecommendedResolution(
      ::ByRef<::GlobalNamespace::OVRPlugin_Sizei> recommendedDimensions);

  /// @brief Method ovrp_GetLayerRecommendedResolution, addr 0x4005d8c, size
  /// 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetLayerRecommendedResolution(
      int32_t layerId,
      ::ByRef<::GlobalNamespace::OVRPlugin_Sizei> recommendedDimensions);

  /// @brief Method ovrp_SetInsightPassthroughStyle2, addr 0x4005d08, size 0x84,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetInsightPassthroughStyle2(
      int32_t layerId,
      ::ByRef<::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2> style);

  /// @brief Method ovrp_UpdatePassthroughColorLut, addr 0x4005c74, size 0x94,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_UpdatePassthroughColorLut(
      uint64_t colorLut,
      ::GlobalNamespace::OVRPlugin_PassthroughColorLutData data);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_84_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_84_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_84_0(OVRPlugin_OVRP_1_84_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_84_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_84_0(OVRPlugin_OVRP_1_84_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8258};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_84_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_85_0
class CORDL_TYPE OVRPlugin_OVRP_1_85_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_GetPassthroughCapabilities, addr 0x4005f70, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetPassthroughCapabilities(
      ::ByRef<::GlobalNamespace::OVRPlugin_PassthroughCapabilities>
          capabilityFlags);

  /// @brief Method ovrp_OnEditorShutdown, addr 0x4005f08, size 0x68, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_OnEditorShutdown();

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_85_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_85_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_85_0(OVRPlugin_OVRP_1_85_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_85_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_85_0(OVRPlugin_OVRP_1_85_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8259};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_85_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_86_0
class CORDL_TYPE OVRPlugin_OVRP_1_86_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_AreHandPosesGeneratedByControllerData, addr 0x4006160,
  /// size 0x94, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_AreHandPosesGeneratedByControllerData(
      ::GlobalNamespace::OVRPlugin_Step stepId,
      ::GlobalNamespace::OVRPlugin_Node nodeId,
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> isGeneratedByControllerData);

  /// @brief Method ovrp_GetControllerIsInHand, addr 0x4006370, size 0x94,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result ovrp_GetControllerIsInHand(
      ::GlobalNamespace::OVRPlugin_Step stepId,
      ::GlobalNamespace::OVRPlugin_Node nodeId,
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> isInHand);

  /// @brief Method ovrp_GetCurrentDetachedInteractionProfile, addr 0x40062ec,
  /// size 0x84, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetCurrentDetachedInteractionProfile(
      ::GlobalNamespace::OVRPlugin_Hand hand,
      ::ByRef<::GlobalNamespace::OVRPlugin_InteractionProfile>
          interactionProfile);

  /// @brief Method ovrp_IsControllerDrivenHandPosesEnabled, addr 0x40060e4,
  /// size 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_IsControllerDrivenHandPosesEnabled(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> enabled);

  /// @brief Method ovrp_IsMultimodalHandsControllersSupported, addr 0x4006270,
  /// size 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_IsMultimodalHandsControllersSupported(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> supported);

  /// @brief Method ovrp_SetControllerDrivenHandPoses, addr 0x4006068, size
  /// 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetControllerDrivenHandPoses(
      ::GlobalNamespace::OVRPlugin_Bool controllerDrivenHandPoses);

  /// @brief Method ovrp_SetMultimodalHandsControllersSupported, addr 0x40061f4,
  /// size 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetMultimodalHandsControllersSupported(
      ::GlobalNamespace::OVRPlugin_Bool supported);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_86_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_86_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_86_0(OVRPlugin_OVRP_1_86_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_86_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_86_0(OVRPlugin_OVRP_1_86_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8260};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_86_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_87_0
class CORDL_TYPE OVRPlugin_OVRP_1_87_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_AreControllerDrivenHandPosesNatural, addr 0x40065f4,
  /// size 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_AreControllerDrivenHandPosesNatural(
      ::ByRef<::GlobalNamespace::OVRPlugin_Bool> natural);

  /// @brief Method ovrp_GetPassthroughPreferences, addr 0x4006480, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_GetPassthroughPreferences(
      ::ByRef<::GlobalNamespace::OVRPlugin_PassthroughPreferences> preferences);

  /// @brief Method ovrp_SetControllerDrivenHandPosesAreNatural, addr 0x4006578,
  /// size 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetControllerDrivenHandPosesAreNatural(
      ::GlobalNamespace::OVRPlugin_Bool controllerDrivenHandPosesAreNatural);

  /// @brief Method ovrp_SetEyeBufferSharpenType, addr 0x40064fc, size 0x7c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetEyeBufferSharpenType(
      ::GlobalNamespace::OVRPlugin_LayerSharpenType sharpenType);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_87_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_87_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_87_0(OVRPlugin_OVRP_1_87_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_87_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_87_0(OVRPlugin_OVRP_1_87_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8261};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_87_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin/OVRP_1_88_0
class CORDL_TYPE OVRPlugin_OVRP_1_88_0 : public ::System::Object {
public:
  // Declarations
  /// @brief Field version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF_version,
                      put = setStaticF_version)) ::System::Version *version;

  static inline ::System::Version *getStaticF_version();

  /// @brief Method ovrp_SetSimultaneousHandsAndControllersEnabled, addr
  /// 0x40066ec, size 0x7c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ovrp_SetSimultaneousHandsAndControllersEnabled(
      ::GlobalNamespace::OVRPlugin_Bool enabled);

  static inline void setStaticF_version(::System::Version *value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin_OVRP_1_88_0();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_88_0",
  // modifiers: "&&", def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin_OVRP_1_88_0(OVRPlugin_OVRP_1_88_0 &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin_OVRP_1_88_0",
  // modifiers: "const&", def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin_OVRP_1_88_0(OVRPlugin_OVRP_1_88_0 const &) = delete;

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8262};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(::cordl_internals::size_check_v<
                  ::GlobalNamespace::OVRPlugin_OVRP_1_88_0, 0x10>,
              "Size mismatch!");

} // namespace GlobalNamespace
// Dependencies OVRPlugin::EyeGazesStateInternal, OVRPlugin::FaceStateInternal,
// OVRPlugin::HandStateInternal, OVRPlugin::Skeleton,
// OVRPlugin::Skeleton2Internal, OVRPlugin::XrApi, System.Guid,
// System.Nullable`1<T>, System.Object
namespace GlobalNamespace {
// Is value type: false
// CS Name: OVRPlugin
class CORDL_TYPE OVRPlugin : public ::System::Object {
public:
  // Declarations
  using AppPerfFrameStats = ::GlobalNamespace::OVRPlugin_AppPerfFrameStats;

  using AppPerfStats = ::GlobalNamespace::OVRPlugin_AppPerfStats;

  using BatteryStatus = ::GlobalNamespace::OVRPlugin_BatteryStatus;

  using BlendFactor = ::GlobalNamespace::OVRPlugin_BlendFactor;

  using BodyJointLocation = ::GlobalNamespace::OVRPlugin_BodyJointLocation;

  using BodyState = ::GlobalNamespace::OVRPlugin_BodyState;

  using BodyStateInternal = ::GlobalNamespace::OVRPlugin_BodyStateInternal;

  using Bone = ::GlobalNamespace::OVRPlugin_Bone;

  using BoneCapsule = ::GlobalNamespace::OVRPlugin_BoneCapsule;

  using BoneId = ::GlobalNamespace::OVRPlugin_BoneId;

  using Bool = ::GlobalNamespace::OVRPlugin_Bool;

  using BoundaryGeometry = ::GlobalNamespace::OVRPlugin_BoundaryGeometry;

  using BoundaryTestResult = ::GlobalNamespace::OVRPlugin_BoundaryTestResult;

  using BoundaryType = ::GlobalNamespace::OVRPlugin_BoundaryType;

  using Boundsf = ::GlobalNamespace::OVRPlugin_Boundsf;

  using CameraAnchorType = ::GlobalNamespace::OVRPlugin_CameraAnchorType;

  using CameraDevice = ::GlobalNamespace::OVRPlugin_CameraDevice;

  using CameraDeviceDepthQuality =
      ::GlobalNamespace::OVRPlugin_CameraDeviceDepthQuality;

  using CameraDeviceDepthSensingMode =
      ::GlobalNamespace::OVRPlugin_CameraDeviceDepthSensingMode;

  using CameraDeviceIntrinsicsParameters =
      ::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters;

  using CameraExtrinsics = ::GlobalNamespace::OVRPlugin_CameraExtrinsics;

  using CameraIntrinsics = ::GlobalNamespace::OVRPlugin_CameraIntrinsics;

  using CameraStatus = ::GlobalNamespace::OVRPlugin_CameraStatus;

  using ColorSpace = ::GlobalNamespace::OVRPlugin_ColorSpace;

  using Colorf = ::GlobalNamespace::OVRPlugin_Colorf;

  using Controller = ::GlobalNamespace::OVRPlugin_Controller;

  using ControllerState = ::GlobalNamespace::OVRPlugin_ControllerState;

  using ControllerState2 = ::GlobalNamespace::OVRPlugin_ControllerState2;

  using ControllerState4 = ::GlobalNamespace::OVRPlugin_ControllerState4;

  using ControllerState5 = ::GlobalNamespace::OVRPlugin_ControllerState5;

  using ControllerState6 = ::GlobalNamespace::OVRPlugin_ControllerState6;

  using EventDataBuffer = ::GlobalNamespace::OVRPlugin_EventDataBuffer;

  using EventType = ::GlobalNamespace::OVRPlugin_EventType;

  using Eye = ::GlobalNamespace::OVRPlugin_Eye;

  using EyeGazeState = ::GlobalNamespace::OVRPlugin_EyeGazeState;

  using EyeGazesState = ::GlobalNamespace::OVRPlugin_EyeGazesState;

  using EyeGazesStateInternal =
      ::GlobalNamespace::OVRPlugin_EyeGazesStateInternal;

  using EyeTextureFormat = ::GlobalNamespace::OVRPlugin_EyeTextureFormat;

  using FaceConstants = ::GlobalNamespace::OVRPlugin_FaceConstants;

  using FaceExpression = ::GlobalNamespace::OVRPlugin_FaceExpression;

  using FaceExpressionStatus =
      ::GlobalNamespace::OVRPlugin_FaceExpressionStatus;

  using FaceExpressionStatusInternal =
      ::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal;

  using FaceRegionConfidence =
      ::GlobalNamespace::OVRPlugin_FaceRegionConfidence;

  using FaceState = ::GlobalNamespace::OVRPlugin_FaceState;

  using FaceState2Internal = ::GlobalNamespace::OVRPlugin_FaceState2Internal;

  using FaceStateInternal = ::GlobalNamespace::OVRPlugin_FaceStateInternal;

  using FeatureType = ::GlobalNamespace::OVRPlugin_FeatureType;

  using FixedFoveatedRenderingLevel =
      ::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel;

  using FoveatedRenderingLevel =
      ::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel;

  using Fovf = ::GlobalNamespace::OVRPlugin_Fovf;

  using Frustumf = ::GlobalNamespace::OVRPlugin_Frustumf;

  using Frustumf2 = ::GlobalNamespace::OVRPlugin_Frustumf2;

  using GUID = ::GlobalNamespace::OVRPlugin_GUID;

  using Hand = ::GlobalNamespace::OVRPlugin_Hand;

  using HandFinger = ::GlobalNamespace::OVRPlugin_HandFinger;

  using HandFingerPinch = ::GlobalNamespace::OVRPlugin_HandFingerPinch;

  using HandState = ::GlobalNamespace::OVRPlugin_HandState;

  using HandStateInternal = ::GlobalNamespace::OVRPlugin_HandStateInternal;

  using HandStatus = ::GlobalNamespace::OVRPlugin_HandStatus;

  using Handedness = ::GlobalNamespace::OVRPlugin_Handedness;

  using HapticsAmplitudeEnvelopeVibration =
      ::GlobalNamespace::OVRPlugin_HapticsAmplitudeEnvelopeVibration;

  using HapticsBuffer = ::GlobalNamespace::OVRPlugin_HapticsBuffer;

  using HapticsConstants = ::GlobalNamespace::OVRPlugin_HapticsConstants;

  using HapticsDesc = ::GlobalNamespace::OVRPlugin_HapticsDesc;

  using HapticsLocation = ::GlobalNamespace::OVRPlugin_HapticsLocation;

  using HapticsPcmVibration = ::GlobalNamespace::OVRPlugin_HapticsPcmVibration;

  using HapticsState = ::GlobalNamespace::OVRPlugin_HapticsState;

  using InsightPassthroughColorMapType =
      ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType;

  using InsightPassthroughKeyboardHandsIntensity =
      ::GlobalNamespace::OVRPlugin_InsightPassthroughKeyboardHandsIntensity;

  using InsightPassthroughStyle =
      ::GlobalNamespace::OVRPlugin_InsightPassthroughStyle;

  using InsightPassthroughStyle2 =
      ::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2;

  using InsightPassthroughStyleFlags =
      ::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags;

  using InteractionProfile = ::GlobalNamespace::OVRPlugin_InteractionProfile;

  using KeyboardDescription = ::GlobalNamespace::OVRPlugin_KeyboardDescription;

  using KeyboardDescriptionConstants =
      ::GlobalNamespace::OVRPlugin_KeyboardDescriptionConstants;

  using KeyboardState = ::GlobalNamespace::OVRPlugin_KeyboardState;

  using Ktx = ::GlobalNamespace::OVRPlugin_Ktx;

  using LayerDesc = ::GlobalNamespace::OVRPlugin_LayerDesc;

  using LayerDescInternal = ::GlobalNamespace::OVRPlugin_LayerDescInternal;

  using LayerFlags = ::GlobalNamespace::OVRPlugin_LayerFlags;

  using LayerLayout = ::GlobalNamespace::OVRPlugin_LayerLayout;

  using LayerSharpenType = ::GlobalNamespace::OVRPlugin_LayerSharpenType;

  using LayerSubmit = ::GlobalNamespace::OVRPlugin_LayerSubmit;

  using LayerSuperSamplingType =
      ::GlobalNamespace::OVRPlugin_LayerSuperSamplingType;

  using LogCallback2DelegateType =
      ::GlobalNamespace::OVRPlugin_LogCallback2DelegateType;

  using LogLevel = ::GlobalNamespace::OVRPlugin_LogLevel;

  using Media = ::GlobalNamespace::OVRPlugin_Media;

  using Mesh = ::GlobalNamespace::OVRPlugin_Mesh;

  using MeshConstants = ::GlobalNamespace::OVRPlugin_MeshConstants;

  using MeshType = ::GlobalNamespace::OVRPlugin_MeshType;

  using Node = ::GlobalNamespace::OVRPlugin_Node;

  using OVRP_0_1_0 = ::GlobalNamespace::OVRPlugin_OVRP_0_1_0;

  using OVRP_0_1_1 = ::GlobalNamespace::OVRPlugin_OVRP_0_1_1;

  using OVRP_0_1_2 = ::GlobalNamespace::OVRPlugin_OVRP_0_1_2;

  using OVRP_0_1_3 = ::GlobalNamespace::OVRPlugin_OVRP_0_1_3;

  using OVRP_0_5_0 = ::GlobalNamespace::OVRPlugin_OVRP_0_5_0;

  using OVRP_1_0_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_0_0;

  using OVRP_1_10_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_10_0;

  using OVRP_1_11_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_11_0;

  using OVRP_1_12_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_12_0;

  using OVRP_1_15_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_15_0;

  using OVRP_1_16_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_16_0;

  using OVRP_1_17_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_17_0;

  using OVRP_1_18_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_18_0;

  using OVRP_1_19_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_19_0;

  using OVRP_1_1_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_1_0;

  using OVRP_1_21_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_21_0;

  using OVRP_1_28_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_28_0;

  using OVRP_1_29_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_29_0;

  using OVRP_1_2_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_2_0;

  using OVRP_1_30_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_30_0;

  using OVRP_1_31_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_31_0;

  using OVRP_1_32_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_32_0;

  using OVRP_1_34_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_34_0;

  using OVRP_1_35_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_35_0;

  using OVRP_1_36_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_36_0;

  using OVRP_1_37_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_37_0;

  using OVRP_1_38_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_38_0;

  using OVRP_1_39_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_39_0;

  using OVRP_1_3_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_3_0;

  using OVRP_1_40_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_40_0;

  using OVRP_1_41_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_41_0;

  using OVRP_1_42_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_42_0;

  using OVRP_1_43_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_43_0;

  using OVRP_1_44_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_44_0;

  using OVRP_1_45_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_45_0;

  using OVRP_1_46_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_46_0;

  using OVRP_1_47_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_47_0;

  using OVRP_1_48_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_48_0;

  using OVRP_1_49_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_49_0;

  using OVRP_1_50_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_50_0;

  using OVRP_1_51_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_51_0;

  using OVRP_1_52_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_52_0;

  using OVRP_1_53_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_53_0;

  using OVRP_1_54_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_54_0;

  using OVRP_1_55_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_55_0;

  using OVRP_1_55_1 = ::GlobalNamespace::OVRPlugin_OVRP_1_55_1;

  using OVRP_1_56_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_56_0;

  using OVRP_1_57_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_57_0;

  using OVRP_1_58_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_58_0;

  using OVRP_1_59_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_59_0;

  using OVRP_1_5_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_5_0;

  using OVRP_1_60_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_60_0;

  using OVRP_1_61_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_61_0;

  using OVRP_1_62_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_62_0;

  using OVRP_1_63_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_63_0;

  using OVRP_1_64_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_64_0;

  using OVRP_1_65_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_65_0;

  using OVRP_1_66_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_66_0;

  using OVRP_1_67_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_67_0;

  using OVRP_1_68_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_68_0;

  using OVRP_1_69_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_69_0;

  using OVRP_1_6_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_6_0;

  using OVRP_1_70_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_70_0;

  using OVRP_1_71_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_71_0;

  using OVRP_1_72_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_72_0;

  using OVRP_1_73_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_73_0;

  using OVRP_1_74_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_74_0;

  using OVRP_1_75_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_75_0;

  using OVRP_1_76_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_76_0;

  using OVRP_1_78_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_78_0;

  using OVRP_1_79_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_79_0;

  using OVRP_1_7_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_7_0;

  using OVRP_1_81_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_81_0;

  using OVRP_1_82_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_82_0;

  using OVRP_1_83_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_83_0;

  using OVRP_1_84_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_84_0;

  using OVRP_1_85_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_85_0;

  using OVRP_1_86_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_86_0;

  using OVRP_1_87_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_87_0;

  using OVRP_1_88_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_88_0;

  using OVRP_1_8_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_8_0;

  using OVRP_1_9_0 = ::GlobalNamespace::OVRPlugin_OVRP_1_9_0;

  using OverlayFlag = ::GlobalNamespace::OVRPlugin_OverlayFlag;

  using OverlayShape = ::GlobalNamespace::OVRPlugin_OverlayShape;

  using PassthroughCapabilities =
      ::GlobalNamespace::OVRPlugin_PassthroughCapabilities;

  using PassthroughCapabilityFields =
      ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFields;

  using PassthroughCapabilityFlags =
      ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags;

  using PassthroughColorLutChannels =
      ::GlobalNamespace::OVRPlugin_PassthroughColorLutChannels;

  using PassthroughColorLutData =
      ::GlobalNamespace::OVRPlugin_PassthroughColorLutData;

  using PassthroughPreferenceFields =
      ::GlobalNamespace::OVRPlugin_PassthroughPreferenceFields;

  using PassthroughPreferenceFlags =
      ::GlobalNamespace::OVRPlugin_PassthroughPreferenceFlags;

  using PassthroughPreferences =
      ::GlobalNamespace::OVRPlugin_PassthroughPreferences;

  using PerfMetrics = ::GlobalNamespace::OVRPlugin_PerfMetrics;

  template <typename T>
  using PinnedArray_1 = ::GlobalNamespace::OVRPlugin_PinnedArray_1<T>;

  using PlatformUI = ::GlobalNamespace::OVRPlugin_PlatformUI;

  using PolygonalBoundary2DInternal =
      ::GlobalNamespace::OVRPlugin_PolygonalBoundary2DInternal;

  using PoseStatef = ::GlobalNamespace::OVRPlugin_PoseStatef;

  using Posef = ::GlobalNamespace::OVRPlugin_Posef;

  using ProcessorPerformanceLevel =
      ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel;

  using Qpl = ::GlobalNamespace::OVRPlugin_Qpl;

  using Quatf = ::GlobalNamespace::OVRPlugin_Quatf;

  using RecenterFlags = ::GlobalNamespace::OVRPlugin_RecenterFlags;

  using Rectf = ::GlobalNamespace::OVRPlugin_Rectf;

  using Recti = ::GlobalNamespace::OVRPlugin_Recti;

  using RenderModelFlags = ::GlobalNamespace::OVRPlugin_RenderModelFlags;

  using RenderModelProperties =
      ::GlobalNamespace::OVRPlugin_RenderModelProperties;

  using RenderModelPropertiesInternal =
      ::GlobalNamespace::OVRPlugin_RenderModelPropertiesInternal;

  using Result = ::GlobalNamespace::OVRPlugin_Result;

  using RoomLayout = ::GlobalNamespace::OVRPlugin_RoomLayout;

  using RoomLayoutInternal = ::GlobalNamespace::OVRPlugin_RoomLayoutInternal;

  using SceneCaptureRequestInternal =
      ::GlobalNamespace::OVRPlugin_SceneCaptureRequestInternal;

  using Size3f = ::GlobalNamespace::OVRPlugin_Size3f;

  using Sizef = ::GlobalNamespace::OVRPlugin_Sizef;

  using Sizei = ::GlobalNamespace::OVRPlugin_Sizei;

  using Skeleton = ::GlobalNamespace::OVRPlugin_Skeleton;

  using Skeleton2 = ::GlobalNamespace::OVRPlugin_Skeleton2;

  using Skeleton2Internal = ::GlobalNamespace::OVRPlugin_Skeleton2Internal;

  using SkeletonConstants = ::GlobalNamespace::OVRPlugin_SkeletonConstants;

  using SkeletonType = ::GlobalNamespace::OVRPlugin_SkeletonType;

  using SpaceComponentType = ::GlobalNamespace::OVRPlugin_SpaceComponentType;

  using SpaceContainerInternal =
      ::GlobalNamespace::OVRPlugin_SpaceContainerInternal;

  using SpaceFilterInfoComponents =
      ::GlobalNamespace::OVRPlugin_SpaceFilterInfoComponents;

  using SpaceFilterInfoIds = ::GlobalNamespace::OVRPlugin_SpaceFilterInfoIds;

  using SpaceLocationFlags = ::GlobalNamespace::OVRPlugin_SpaceLocationFlags;

  using SpaceLocationf = ::GlobalNamespace::OVRPlugin_SpaceLocationf;

  using SpaceQueryActionType =
      ::GlobalNamespace::OVRPlugin_SpaceQueryActionType;

  using SpaceQueryFilterType =
      ::GlobalNamespace::OVRPlugin_SpaceQueryFilterType;

  using SpaceQueryInfo = ::GlobalNamespace::OVRPlugin_SpaceQueryInfo;

  using SpaceQueryResult = ::GlobalNamespace::OVRPlugin_SpaceQueryResult;

  using SpaceQueryType = ::GlobalNamespace::OVRPlugin_SpaceQueryType;

  using SpaceSemanticLabelInternal =
      ::GlobalNamespace::OVRPlugin_SpaceSemanticLabelInternal;

  using SpaceStorageLocation =
      ::GlobalNamespace::OVRPlugin_SpaceStorageLocation;

  using SpaceStoragePersistenceMode =
      ::GlobalNamespace::OVRPlugin_SpaceStoragePersistenceMode;

  using SpatialAnchorCreateInfo =
      ::GlobalNamespace::OVRPlugin_SpatialAnchorCreateInfo;

  using Step = ::GlobalNamespace::OVRPlugin_Step;

  using SystemHeadset = ::GlobalNamespace::OVRPlugin_SystemHeadset;

  using SystemRegion = ::GlobalNamespace::OVRPlugin_SystemRegion;

  using TextureRectMatrixf = ::GlobalNamespace::OVRPlugin_TextureRectMatrixf;

  using TiledMultiResLevel = ::GlobalNamespace::OVRPlugin_TiledMultiResLevel;

  using TrackedKeyboardFlags =
      ::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags;

  using TrackedKeyboardPresentationStyles =
      ::GlobalNamespace::OVRPlugin_TrackedKeyboardPresentationStyles;

  using TrackedKeyboardQueryFlags =
      ::GlobalNamespace::OVRPlugin_TrackedKeyboardQueryFlags;

  using Tracker = ::GlobalNamespace::OVRPlugin_Tracker;

  using TrackingConfidence = ::GlobalNamespace::OVRPlugin_TrackingConfidence;

  using TrackingOrigin = ::GlobalNamespace::OVRPlugin_TrackingOrigin;

  using TriangleMeshInternal =
      ::GlobalNamespace::OVRPlugin_TriangleMeshInternal;

  using UnityOpenXR = ::GlobalNamespace::OVRPlugin_UnityOpenXR;

  using Vector2f = ::GlobalNamespace::OVRPlugin_Vector2f;

  using Vector2i = ::GlobalNamespace::OVRPlugin_Vector2i;

  using Vector3f = ::GlobalNamespace::OVRPlugin_Vector3f;

  using Vector4f = ::GlobalNamespace::OVRPlugin_Vector4f;

  using Vector4s = ::GlobalNamespace::OVRPlugin_Vector4s;

  using VirtualKeyboardCreateInfo =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardCreateInfo;

  using VirtualKeyboardInputInfo =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputInfo;

  using VirtualKeyboardInputSource =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource;

  using VirtualKeyboardInputStateFlags =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputStateFlags;

  using VirtualKeyboardLocationInfo =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationInfo;

  using VirtualKeyboardLocationType =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType;

  using VirtualKeyboardModelAnimationState =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationState;

  using VirtualKeyboardModelAnimationStates =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationStates;

  using VirtualKeyboardModelAnimationStatesInternal =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationStatesInternal;

  using VirtualKeyboardModelVisibility =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelVisibility;

  using VirtualKeyboardSpaceCreateInfo =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardSpaceCreateInfo;

  using VirtualKeyboardTextureData =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureData;

  using VirtualKeyboardTextureIds =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIds;

  using VirtualKeyboardTextureIdsInternal =
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIdsInternal;

  using XrApi = ::GlobalNamespace::OVRPlugin_XrApi;

  /// @brief Field MAX_CPU_CORES, offset 0xffffffff, size 0x4
  __declspec(property(get = getStaticF_MAX_CPU_CORES,
                      put = setStaticF_MAX_CPU_CORES)) int32_t MAX_CPU_CORES;

  /// @brief Field _cachedAudioInGuid, offset 0xffffffff, size 0x10
  __declspec(property(
      get = getStaticF__cachedAudioInGuid,
      put = setStaticF__cachedAudioInGuid)) ::System::Guid _cachedAudioInGuid;

  /// @brief Field _cachedAudioInString, offset 0xffffffff, size 0x8
  __declspec(property(
      get = getStaticF__cachedAudioInString,
      put = setStaticF__cachedAudioInString)) ::StringW _cachedAudioInString;

  /// @brief Field _cachedAudioOutGuid, offset 0xffffffff, size 0x10
  __declspec(property(
      get = getStaticF__cachedAudioOutGuid,
      put = setStaticF__cachedAudioOutGuid)) ::System::Guid _cachedAudioOutGuid;

  /// @brief Field _cachedAudioOutString, offset 0xffffffff, size 0x8
  __declspec(property(
      get = getStaticF__cachedAudioOutString,
      put = setStaticF__cachedAudioOutString)) ::StringW _cachedAudioOutString;

  /// @brief Field _cachedSystemDisplayFrequenciesAvailable, offset 0xffffffff,
  /// size 0x8
  __declspec(property(
      get = getStaticF__cachedSystemDisplayFrequenciesAvailable,
      put = setStaticF__cachedSystemDisplayFrequenciesAvailable)) ::
      ArrayW<float_t, ::Array<float_t> *>
          _cachedSystemDisplayFrequenciesAvailable;

  /// @brief Field _nativeAudioInGuid, offset 0xffffffff, size 0x8
  __declspec(property(
      get = getStaticF__nativeAudioInGuid,
      put = setStaticF__nativeAudioInGuid)) ::GlobalNamespace::OVRPlugin_GUID
      *_nativeAudioInGuid;

  /// @brief Field _nativeAudioOutGuid, offset 0xffffffff, size 0x8
  __declspec(property(
      get = getStaticF__nativeAudioOutGuid,
      put = setStaticF__nativeAudioOutGuid)) ::GlobalNamespace::OVRPlugin_GUID
      *_nativeAudioOutGuid;

  /// @brief Field _nativeSDKVersion, offset 0xffffffff, size 0x8
  __declspec(property(
      get = getStaticF__nativeSDKVersion,
      put = setStaticF__nativeSDKVersion)) ::System::Version *_nativeSDKVersion;

  /// @brief Field _nativeSystemDisplayFrequenciesAvailable, offset 0xffffffff,
  /// size 0x8
  __declspec(property(
      get = getStaticF__nativeSystemDisplayFrequenciesAvailable,
      put = setStaticF__nativeSystemDisplayFrequenciesAvailable)) ::
      GlobalNamespace::OVRNativeBuffer
          *_nativeSystemDisplayFrequenciesAvailable;

  /// @brief Field _nativeXrApi, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF__nativeXrApi,
                      put = setStaticF__nativeXrApi)) ::System::
      Nullable_1<::GlobalNamespace::OVRPlugin_XrApi>
          _nativeXrApi;

  /// @brief Field _version, offset 0xffffffff, size 0x8
  __declspec(property(get = getStaticF__version,
                      put = setStaticF__version)) ::System::Version *_version;

  /// @brief Field _versionZero, offset 0xffffffff, size 0x8
  __declspec(property(
      get = getStaticF__versionZero,
      put = setStaticF__versionZero)) ::System::Version *_versionZero;

  /// @brief Field cachedEyeGazesState, offset 0xffffffff, size 0x50
  __declspec(property(get = getStaticF_cachedEyeGazesState,
                      put = setStaticF_cachedEyeGazesState)) ::GlobalNamespace::
      OVRPlugin_EyeGazesStateInternal cachedEyeGazesState;

  /// @brief Field cachedFaceState, offset 0xffffffff, size 0x118
  __declspec(property(get = getStaticF_cachedFaceState,
                      put = setStaticF_cachedFaceState)) ::GlobalNamespace::
      OVRPlugin_FaceStateInternal cachedFaceState;

  /// @brief Field cachedHandState, offset 0xffffffff, size 0x200
  __declspec(property(get = getStaticF_cachedHandState,
                      put = setStaticF_cachedHandState)) ::GlobalNamespace::
      OVRPlugin_HandStateInternal cachedHandState;

  /// @brief Field cachedSkeleton, offset 0xffffffff, size 0x20
  __declspec(property(
      get = getStaticF_cachedSkeleton,
      put = setStaticF_cachedSkeleton)) ::GlobalNamespace::OVRPlugin_Skeleton
      cachedSkeleton;

  /// @brief Field cachedSkeleton2, offset 0xffffffff, size 0xc44
  __declspec(property(get = getStaticF_cachedSkeleton2,
                      put = setStaticF_cachedSkeleton2)) ::GlobalNamespace::
      OVRPlugin_Skeleton2Internal cachedSkeleton2;

  /// @brief Field perfStatWarningPrinted, offset 0xffffffff, size 0x1
  __declspec(property(
      get = getStaticF_perfStatWarningPrinted,
      put = setStaticF_perfStatWarningPrinted)) bool perfStatWarningPrinted;

  /// @brief Field resetPerfStatWarningPrinted, offset 0xffffffff, size 0x1
  __declspec(property(get = getStaticF_resetPerfStatWarningPrinted,
                      put = setStaticF_resetPerfStatWarningPrinted)) bool
      resetPerfStatWarningPrinted;

  /// @brief Field wrapperVersion, offset 0xffffffff, size 0x8
  __declspec(property(
      get = getStaticF_wrapperVersion,
      put = setStaticF_wrapperVersion)) ::System::Version *wrapperVersion;

  /// @brief Method AddCustomMetadata, addr 0x3fe8428, size 0xd8, virtual false,
  /// abstract: false, final false
  static inline bool AddCustomMetadata(::StringW name, ::StringW param);

  /// @brief Method AddInsightPassthroughSurfaceGeometry, addr 0x3fd99f4, size
  /// 0x11c, virtual false, abstract: false, final false
  static inline bool AddInsightPassthroughSurfaceGeometry(
      int32_t layerId, uint64_t meshHandle,
      ::UnityEngine::Matrix4x4 T_world_model,
      ::ByRef<uint64_t> geometryInstanceHandle);

  /// @brief Method AreControllerDrivenHandPosesNatural, addr 0x3fe41cc, size
  /// 0xd0, virtual false, abstract: false, final false
  static inline bool AreControllerDrivenHandPosesNatural();

  /// @brief Method AreHandPosesGeneratedByControllerData, addr 0x3fe1fac, size
  /// 0xf0, virtual false, abstract: false, final false
  static inline bool AreHandPosesGeneratedByControllerData(
      ::GlobalNamespace::OVRPlugin_Step stepId,
      ::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method CalculateLayerDesc, addr 0x3fe08e4, size 0x198, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_LayerDesc
  CalculateLayerDesc(::GlobalNamespace::OVRPlugin_OverlayShape shape,
                     ::GlobalNamespace::OVRPlugin_LayerLayout layout,
                     ::GlobalNamespace::OVRPlugin_Sizei textureSize,
                     int32_t mipLevels, int32_t sampleCount,
                     ::GlobalNamespace::OVRPlugin_EyeTextureFormat format,
                     int32_t layerFlags);

  /// @brief Method ChangeVirtualKeyboardTextContext, addr 0x3fedcbc, size 0xc4,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ChangeVirtualKeyboardTextContext(::StringW textContext);

  /// @brief Method CreateInsightTriangleMesh, addr 0x3fd984c, size 0x1a8,
  /// virtual false, abstract: false, final false
  static inline bool CreateInsightTriangleMesh(
      int32_t layerId,
      ::ArrayW<::UnityEngine::Vector3, ::Array<::UnityEngine::Vector3> *>
          vertices,
      ::ArrayW<int32_t, ::Array<int32_t> *> triangles,
      ::ByRef<uint64_t> meshHandle);

  /// @brief Method CreatePassthroughColorLut, addr 0x3fe56d0, size 0x120,
  /// virtual false, abstract: false, final false
  static inline bool CreatePassthroughColorLut(
      ::GlobalNamespace::OVRPlugin_PassthroughColorLutChannels channels,
      uint32_t resolution,
      ::GlobalNamespace::OVRPlugin_PassthroughColorLutData data,
      ::ByRef<uint64_t> colorLut);

  /// @brief Method CreateSpaceUser, addr 0x3ff131c, size 0xdc, virtual false,
  /// abstract: false, final false
  static inline bool CreateSpaceUser(uint64_t spaceUserId,
                                     ::ByRef<uint64_t> spaceUserHandle);

  /// @brief Method CreateSpatialAnchor, addr 0x3ff00f8, size 0xdc, virtual
  /// false, abstract: false, final false
  static inline bool CreateSpatialAnchor(
      ::GlobalNamespace::OVRPlugin_SpatialAnchorCreateInfo createInfo,
      ::ByRef<uint64_t> requestId);

  /// @brief Method CreateVirtualKeyboard, addr 0x3feda4c, size 0xbc, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result CreateVirtualKeyboard(
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardCreateInfo createInfo);

  /// @brief Method CreateVirtualKeyboardSpace, addr 0x3fedd80, size 0xec,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result CreateVirtualKeyboardSpace(
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardSpaceCreateInfo createInfo,
      ::ByRef<uint64_t> keyboardSpace);

  /// @brief Method DestroyInsightPassthroughGeometryInstance, addr 0x3fd7f60,
  /// size 0xc8, virtual false, abstract: false, final false
  static inline bool
  DestroyInsightPassthroughGeometryInstance(uint64_t geometryInstanceHandle);

  /// @brief Method DestroyInsightTriangleMesh, addr 0x3fd8028, size 0xc8,
  /// virtual false, abstract: false, final false
  static inline bool DestroyInsightTriangleMesh(uint64_t meshHandle);

  /// @brief Method DestroyPassthroughColorLut, addr 0x3fe57f0, size 0xe8,
  /// virtual false, abstract: false, final false
  static inline bool DestroyPassthroughColorLut(uint64_t colorLut);

  /// @brief Method DestroySpace, addr 0x3ff1a10, size 0xc8, virtual false,
  /// abstract: false, final false
  static inline bool DestroySpace(uint64_t space);

  /// @brief Method DestroySpaceUser, addr 0x3ff13f8, size 0xc8, virtual false,
  /// abstract: false, final false
  static inline bool DestroySpaceUser(uint64_t spaceUserHandle);

  /// @brief Method DestroyVirtualKeyboard, addr 0x3fedb08, size 0xbc, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result DestroyVirtualKeyboard();

  /// @brief Method EnqueueDestroyLayer, addr 0x3fe0c84, size 0xe0, virtual
  /// false, abstract: false, final false
  static inline bool EnqueueDestroyLayer(::System::IntPtr layerID);

  /// @brief Method EnqueueSetupLayer, addr 0x3fe0a7c, size 0x208, virtual
  /// false, abstract: false, final false
  static inline bool
  EnqueueSetupLayer(::GlobalNamespace::OVRPlugin_LayerDesc desc,
                    int32_t compositionDepth, ::System::IntPtr layerID);

  /// @brief Method EnqueueSubmitLayer, addr 0x3fe0398, size 0x54c, virtual
  /// false, abstract: false, final false
  static inline bool EnqueueSubmitLayer(
      bool onTop, bool headLocked, bool noDepthBufferTesting,
      ::System::IntPtr leftTexture, ::System::IntPtr rightTexture,
      int32_t layerId, int32_t frameIndex,
      ::GlobalNamespace::OVRPlugin_Posef pose,
      ::GlobalNamespace::OVRPlugin_Vector3f scale, int32_t layerIndex,
      ::GlobalNamespace::OVRPlugin_OverlayShape shape,
      bool overrideTextureRectMatrix,
      ::GlobalNamespace::OVRPlugin_TextureRectMatrixf textureRectMatrix,
      bool overridePerLayerColorScaleAndOffset,
      ::UnityEngine::Vector4 colorScale, ::UnityEngine::Vector4 colorOffset,
      bool expensiveSuperSample, bool bicubic, bool efficientSuperSample,
      bool efficientSharpen, bool expensiveSharpen, bool hidden,
      bool secureContent, bool automaticFiltering);

  /// @brief Method EnumerateSpaceSupportedComponents, addr 0x3ff0554, size
  /// 0xf0, virtual false, abstract: false, final false
  static inline bool EnumerateSpaceSupportedComponents(
      uint64_t space, ::ByRef<uint32_t> numSupportedComponents,
      ::ArrayW<::GlobalNamespace::OVRPlugin_SpaceComponentType,
               ::Array<::GlobalNamespace::OVRPlugin_SpaceComponentType> *>
          supportedComponents);

  /// @brief Method EraseSpace, addr 0x3ff0738, size 0x194, virtual false,
  /// abstract: false, final false
  static inline bool
  EraseSpace(uint64_t space,
             ::GlobalNamespace::OVRPlugin_SpaceStorageLocation location,
             ::ByRef<uint64_t> requestId);

  /// @brief Method GetActiveController, addr 0x3fe605c, size 0xbc, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Controller GetActiveController();

  /// @brief Method GetAdaptiveGPUPerformanceScale, addr 0x3fe85c8, size 0xd0,
  /// virtual false, abstract: false, final false
  static inline float_t GetAdaptiveGPUPerformanceScale();

  /// @brief Method GetAppCpuStartToGpuEndTime, addr 0x3fe34ec, size 0xbc,
  /// virtual false, abstract: false, final false
  static inline float_t GetAppCpuStartToGpuEndTime();

  /// @brief Method GetAppFramerate, addr 0x3fe3d0c, size 0xbc, virtual false,
  /// abstract: false, final false
  static inline float_t GetAppFramerate();

  /// @brief Method GetAppPerfStats, addr 0x3fe3a30, size 0x178, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_AppPerfStats GetAppPerfStats();

  /// @brief Method GetBodyState, addr 0x3feb314, size 0x2220, virtual false,
  /// abstract: false, final false
  static inline bool
  GetBodyState(::GlobalNamespace::OVRPlugin_Step stepId,
               ::ByRef<::GlobalNamespace::OVRPlugin_BodyState> bodyState);

  /// @brief Method GetBoundaryConfigured, addr 0x3fe35a8, size 0xc0, virtual
  /// false, abstract: false, final false
  static inline bool GetBoundaryConfigured();

  /// @brief Method GetBoundaryDimensions, addr 0x3fe5d38, size 0xc4, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Vector3f
  GetBoundaryDimensions(::GlobalNamespace::OVRPlugin_BoundaryType boundaryType);

  /// @brief Method GetBoundaryGeometry, addr 0x3fe3860, size 0xec, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_BoundaryGeometry
  GetBoundaryGeometry(::GlobalNamespace::OVRPlugin_BoundaryType boundaryType);

  /// @brief Method GetBoundaryGeometry2, addr 0x3fe394c, size 0xe4, virtual
  /// false, abstract: false, final false
  static inline bool
  GetBoundaryGeometry2(::GlobalNamespace::OVRPlugin_BoundaryType boundaryType,
                       ::System::IntPtr points, ::ByRef<int32_t> pointsCount);

  /// @brief Method GetBoundaryVisible, addr 0x3fe5dfc, size 0xc0, virtual
  /// false, abstract: false, final false
  static inline bool GetBoundaryVisible();

  /// @brief Method GetConnectedControllers, addr 0x3fe6118, size 0xbc, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Controller
  GetConnectedControllers();

  /// @brief Method GetControllerHapticsDesc, addr 0x3fe31a0, size 0xec, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_HapticsDesc
  GetControllerHapticsDesc(uint32_t controllerMask);

  /// @brief Method GetControllerHapticsState, addr 0x3fe328c, size 0xc4,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_HapticsState
  GetControllerHapticsState(uint32_t controllerMask);

  /// @brief Method GetControllerIsInHand, addr 0x3fe2168, size 0xec, virtual
  /// false, abstract: false, final false
  static inline bool
  GetControllerIsInHand(::GlobalNamespace::OVRPlugin_Step stepId,
                        ::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method GetControllerSampleRateHz, addr 0x3fe30c4, size 0xdc,
  /// virtual false, abstract: false, final false
  static inline bool GetControllerSampleRateHz(
      ::GlobalNamespace::OVRPlugin_Controller controllerMask,
      ::ByRef<float_t> sampleRateHz);

  /// @brief Method GetControllerState, addr 0x3fe25f4, size 0x84, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_ControllerState
  GetControllerState(uint32_t controllerMask);

  /// @brief Method GetControllerState2, addr 0x3fe2678, size 0x144, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_ControllerState2
  GetControllerState2(uint32_t controllerMask);

  /// @brief Method GetControllerState4, addr 0x3fe27bc, size 0x158, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_ControllerState4
  GetControllerState4(uint32_t controllerMask);

  /// @brief Method GetControllerState5, addr 0x3fe2914, size 0x164, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_ControllerState5
  GetControllerState5(uint32_t controllerMask);

  /// @brief Method GetControllerState6, addr 0x3fe2a78, size 0x168, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_ControllerState6
  GetControllerState6(uint32_t controllerMask);

  /// @brief Method GetCurrentDetachedInteractionProfile, addr 0x3fe2cb4, size
  /// 0xd4, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_InteractionProfile
  GetCurrentDetachedInteractionProfile(::GlobalNamespace::OVRPlugin_Hand hand);

  /// @brief Method GetCurrentInteractionProfile, addr 0x3fe2be0, size 0xd4,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_InteractionProfile
  GetCurrentInteractionProfile(::GlobalNamespace::OVRPlugin_Hand hand);

  /// @brief Method GetCurrentTrackingTransformPose, addr 0x3fe2254, size 0x120,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  GetCurrentTrackingTransformPose();

  /// @brief Method GetDesiredEyeTextureFormat, addr 0x3fe429c, size 0xc0,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_EyeTextureFormat
  GetDesiredEyeTextureFormat();

  /// @brief Method GetDominantHand, addr 0x3fe7a8c, size 0xcc, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Handedness GetDominantHand();

  /// @brief Method GetExternalCameraCount, addr 0x3fe46a0, size 0xe0, virtual
  /// false, abstract: false, final false
  static inline int32_t GetExternalCameraCount();

  /// @brief Method GetEyeFrustum, addr 0x3fdff80, size 0x58, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Frustumf
  GetEyeFrustum(::GlobalNamespace::OVRPlugin_Eye eyeId);

  /// @brief Method GetEyeGazesState, addr 0x3fef19c, size 0x274, virtual false,
  /// abstract: false, final false
  static inline bool GetEyeGazesState(
      ::GlobalNamespace::OVRPlugin_Step stepId, int32_t frameIndex,
      ::ByRef<::GlobalNamespace::OVRPlugin_EyeGazesState> eyeGazesState);

  /// @brief Method GetEyeLayerRecommendedResolution, addr 0x3ff3028, size 0xcc,
  /// virtual false, abstract: false, final false
  static inline bool GetEyeLayerRecommendedResolution(
      ::ByRef<::GlobalNamespace::OVRPlugin_Sizei> recommendedSize);

  /// @brief Method GetEyeRecommendedResolutionScale, addr 0x3fe3430, size 0xbc,
  /// virtual false, abstract: false, final false
  static inline float_t GetEyeRecommendedResolutionScale();

  /// @brief Method GetEyeTextureSize, addr 0x3fdffd8, size 0x58, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Sizei
  GetEyeTextureSize(::GlobalNamespace::OVRPlugin_Eye eyeId);

  /// @brief Method GetFaceState, addr 0x3feef7c, size 0x150, virtual false,
  /// abstract: false, final false
  static inline bool
  GetFaceState(::GlobalNamespace::OVRPlugin_Step stepId, int32_t frameIndex,
               ::ByRef<::GlobalNamespace::OVRPlugin_FaceState> faceState);

  /// @brief Method GetFaceStateInternal, addr 0x3fee9f8, size 0x584, virtual
  /// false, abstract: false, final false
  static inline bool GetFaceStateInternal(
      ::GlobalNamespace::OVRPlugin_Step stepId, int32_t frameIndex,
      ::ByRef<::GlobalNamespace::OVRPlugin_FaceState> faceState);

  /// @brief Method GetHandNodePoseStateLatency, addr 0x3fe3e98, size 0xcc,
  /// virtual false, abstract: false, final false
  static inline double_t GetHandNodePoseStateLatency();

  /// @brief Method GetHandState, addr 0x3fe8768, size 0x6a8, virtual false,
  /// abstract: false, final false
  static inline bool
  GetHandState(::GlobalNamespace::OVRPlugin_Step stepId,
               ::GlobalNamespace::OVRPlugin_Hand hand,
               ::ByRef<::GlobalNamespace::OVRPlugin_HandState> handState);

  /// @brief Method GetHandTrackingEnabled, addr 0x3fe8698, size 0xd0, virtual
  /// false, abstract: false, final false
  static inline bool GetHandTrackingEnabled();

  /// @brief Method GetHeadPoseModifier, addr 0x3fe7dc4, size 0x14c, virtual
  /// false, abstract: false, final false
  static inline bool GetHeadPoseModifier(
      ::ByRef<::GlobalNamespace::OVRPlugin_Quatf> relativeRotation,
      ::ByRef<::GlobalNamespace::OVRPlugin_Vector3f> relativeTranslation);

  /// @brief Method GetHmdColorDesc, addr 0x3fefb40, size 0x138, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_ColorSpace GetHmdColorDesc();

  /// @brief Method GetInsightPassthroughInitializationState, addr 0x3fe54fc,
  /// size 0xbc, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  GetInsightPassthroughInitializationState();

  /// @brief Method GetKeyboardState, addr 0x3fed878, size 0xf0, virtual false,
  /// abstract: false, final false
  static inline bool GetKeyboardState(
      ::GlobalNamespace::OVRPlugin_Step stepId,
      ::ByRef<::GlobalNamespace::OVRPlugin_KeyboardState> keyboardState);

  /// @brief Method GetLayerAndroidSurfaceObject, addr 0x3fe0f68, size 0xf4,
  /// virtual false, abstract: false, final false
  static inline ::System::IntPtr GetLayerAndroidSurfaceObject(int32_t layerId);

  /// @brief Method GetLayerRecommendedResolution, addr 0x3ff2f4c, size 0xdc,
  /// virtual false, abstract: false, final false
  static inline bool GetLayerRecommendedResolution(
      int32_t layerId,
      ::ByRef<::GlobalNamespace::OVRPlugin_Sizei> recommendedSize);

  /// @brief Method GetLayerTexture, addr 0x3fe0d64, size 0x10c, virtual false,
  /// abstract: false, final false
  static inline ::System::IntPtr
  GetLayerTexture(int32_t layerId, int32_t stage,
                  ::GlobalNamespace::OVRPlugin_Eye eyeId);

  /// @brief Method GetLayerTextureStageCount, addr 0x3fe0e70, size 0xf8,
  /// virtual false, abstract: false, final false
  static inline int32_t GetLayerTextureStageCount(int32_t layerId);

  /// @brief Method GetLocalTrackingSpaceRecenterCount, addr 0x3fef890, size
  /// 0xcc, virtual false, abstract: false, final false
  static inline int32_t GetLocalTrackingSpaceRecenterCount();

  /// @brief Method GetMesh, addr 0x3fed534, size 0x1bc, virtual false,
  /// abstract: false, final false
  static inline bool GetMesh(::GlobalNamespace::OVRPlugin_MeshType meshType,
                             ::ByRef<::GlobalNamespace::OVRPlugin_Mesh *> mesh);

  /// @brief Method GetMixedRealityCameraInfo, addr 0x3fe4854, size 0x134,
  /// virtual false, abstract: false, final false
  static inline bool GetMixedRealityCameraInfo(
      int32_t cameraId,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraExtrinsics> cameraExtrinsics,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraIntrinsics> cameraIntrinsics);

  /// @brief Method GetNativeOpenXRInstance, addr 0x3fefe68, size 0xdc, virtual
  /// false, abstract: false, final false
  static inline uint64_t GetNativeOpenXRInstance();

  /// @brief Method GetNativeOpenXRSession, addr 0x3feff44, size 0xdc, virtual
  /// false, abstract: false, final false
  static inline uint64_t GetNativeOpenXRSession();

  /// @brief Method GetNodeAcceleration, addr 0x3fe1494, size 0x20c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Vector3f
  GetNodeAcceleration(::GlobalNamespace::OVRPlugin_Node nodeId,
                      ::GlobalNamespace::OVRPlugin_Step stepId);

  /// @brief Method GetNodeAngularAcceleration, addr 0x3fe16a0, size 0x150,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Vector3f
  GetNodeAngularAcceleration(::GlobalNamespace::OVRPlugin_Node nodeId,
                             ::GlobalNamespace::OVRPlugin_Step stepId);

  /// @brief Method GetNodeAngularVelocity, addr 0x3fe1344, size 0x150, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Vector3f
  GetNodeAngularVelocity(::GlobalNamespace::OVRPlugin_Node nodeId,
                         ::GlobalNamespace::OVRPlugin_Step stepId);

  /// @brief Method GetNodeFrustum2, addr 0x3fe7574, size 0xe0, virtual false,
  /// abstract: false, final false
  static inline bool
  GetNodeFrustum2(::GlobalNamespace::OVRPlugin_Node nodeId,
                  ::ByRef<::GlobalNamespace::OVRPlugin_Frustumf2> frustum);

  /// @brief Method GetNodeOrientationTracked, addr 0x3fe1854, size 0x64,
  /// virtual false, abstract: false, final false
  static inline bool
  GetNodeOrientationTracked(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method GetNodeOrientationValid, addr 0x3fe18b8, size 0x100, virtual
  /// false, abstract: false, final false
  static inline bool
  GetNodeOrientationValid(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method GetNodePose, addr 0x3fe00b4, size 0x228, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  GetNodePose(::GlobalNamespace::OVRPlugin_Node nodeId,
              ::GlobalNamespace::OVRPlugin_Step stepId);

  /// @brief Method GetNodePoseStateAtTime, addr 0x3fe1d4c, size 0x138, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_PoseStatef
  GetNodePoseStateAtTime(double_t time,
                         ::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method GetNodePoseStateImmediate, addr 0x3fe1e84, size 0x128,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_PoseStatef
  GetNodePoseStateImmediate(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method GetNodePoseStateRaw, addr 0x3fe1b1c, size 0x230, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_PoseStatef
  GetNodePoseStateRaw(::GlobalNamespace::OVRPlugin_Node nodeId,
                      ::GlobalNamespace::OVRPlugin_Step stepId);

  /// @brief Method GetNodePositionTracked, addr 0x3fe19b8, size 0x64, virtual
  /// false, abstract: false, final false
  static inline bool
  GetNodePositionTracked(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method GetNodePositionValid, addr 0x3fe1a1c, size 0x100, virtual
  /// false, abstract: false, final false
  static inline bool
  GetNodePositionValid(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method GetNodePresent, addr 0x3fe17f0, size 0x64, virtual false,
  /// abstract: false, final false
  static inline bool GetNodePresent(::GlobalNamespace::OVRPlugin_Node nodeId);

  /// @brief Method GetNodeVelocity, addr 0x3fe1138, size 0x20c, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Vector3f
  GetNodeVelocity(::GlobalNamespace::OVRPlugin_Node nodeId,
                  ::GlobalNamespace::OVRPlugin_Step stepId);

  /// @brief Method GetPassthroughCapabilities, addr 0x3fe5c6c, size 0xcc,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result GetPassthroughCapabilities(
      ::ByRef<::GlobalNamespace::OVRPlugin_PassthroughCapabilities>
          outCapabilities);

  /// @brief Method GetPassthroughCapabilityFlags, addr 0x3fe5ab8, size 0x1b4,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags
  GetPassthroughCapabilityFlags();

  /// @brief Method GetPassthroughPreferences, addr 0x3ff374c, size 0xc8,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result GetPassthroughPreferences(
      ::ByRef<::GlobalNamespace::OVRPlugin_PassthroughPreferences> preferences);

  /// @brief Method GetPerfMetricsFloat, addr 0x3fe7ff0, size 0x104, virtual
  /// false, abstract: false, final false
  static inline ::System::Nullable_1<float_t>
  GetPerfMetricsFloat(::GlobalNamespace::OVRPlugin_PerfMetrics perfMetrics);

  /// @brief Method GetPerfMetricsInt, addr 0x3fe80f4, size 0x104, virtual
  /// false, abstract: false, final false
  static inline ::System::Nullable_1<int32_t>
  GetPerfMetricsInt(::GlobalNamespace::OVRPlugin_PerfMetrics perfMetrics);

  /// @brief Method GetRenderModelPaths, addr 0x3ff30f4, size 0x220, virtual
  /// false, abstract: false, final false
  static inline ::ArrayW<::StringW, ::Array<::StringW> *> GetRenderModelPaths();

  /// @brief Method GetRenderModelProperties, addr 0x3ff3314, size 0x1a4,
  /// virtual false, abstract: false, final false
  static inline bool GetRenderModelProperties(
      ::StringW modelPath,
      ::ByRef<::GlobalNamespace::OVRPlugin_RenderModelProperties>
          modelProperties);

  /// @brief Method GetSkeleton, addr 0x3fe8e38, size 0xe0, virtual false,
  /// abstract: false, final false
  static inline bool
  GetSkeleton(::GlobalNamespace::OVRPlugin_SkeletonType skeletonType,
              ::ByRef<::GlobalNamespace::OVRPlugin_Skeleton> skeleton);

  /// @brief Method GetSkeleton2, addr 0x3fe8f18, size 0x232c, virtual false,
  /// abstract: false, final false
  static inline bool
  GetSkeleton2(::GlobalNamespace::OVRPlugin_SkeletonType skeletonType,
               ::ByRef<::GlobalNamespace::OVRPlugin_Skeleton2> skeleton);

  /// @brief Method GetSpaceBoundary2D, addr 0x3ff25a4, size 0x1a0, virtual
  /// false, abstract: false, final false
  static inline ::Unity::Collections::NativeArray_1<::UnityEngine::Vector2>
  GetSpaceBoundary2D(uint64_t space, ::Unity::Collections::Allocator allocator);

  /// @brief Method GetSpaceBoundary2D, addr 0x3ff2744, size 0x328, virtual
  /// false, abstract: false, final false
  static inline bool GetSpaceBoundary2D(
      uint64_t space,
      ::ByRef<
          ::ArrayW<::UnityEngine::Vector2, ::Array<::UnityEngine::Vector2> *>>
          boundary);

  /// @brief Method GetSpaceBoundary2D, addr 0x3ff23f8, size 0x84, virtual
  /// false, abstract: false, final false
  static inline bool GetSpaceBoundary2D(
      uint64_t space,
      ::Unity::Collections::NativeArray_1<::UnityEngine::Vector2> boundary);

  /// @brief Method GetSpaceBoundary2D, addr 0x3ff247c, size 0x128, virtual
  /// false, abstract: false, final false
  static inline bool GetSpaceBoundary2D(
      uint64_t space,
      ::Unity::Collections::NativeArray_1<::UnityEngine::Vector2> boundary,
      ::ByRef<int32_t> count);

  /// @brief Method GetSpaceBoundary2DCount, addr 0x3ff230c, size 0xec, virtual
  /// false, abstract: false, final false
  static inline bool GetSpaceBoundary2DCount(uint64_t space,
                                             ::ByRef<int32_t> count);

  /// @brief Method GetSpaceBoundingBox2D, addr 0x3ff1d68, size 0xdc, virtual
  /// false, abstract: false, final false
  static inline bool
  GetSpaceBoundingBox2D(uint64_t space,
                        ::ByRef<::GlobalNamespace::OVRPlugin_Rectf> rect);

  /// @brief Method GetSpaceBoundingBox3D, addr 0x3ff1e44, size 0xe0, virtual
  /// false, abstract: false, final false
  static inline bool
  GetSpaceBoundingBox3D(uint64_t space,
                        ::ByRef<::GlobalNamespace::OVRPlugin_Boundsf> bounds);

  /// @brief Method GetSpaceComponentStatus, addr 0x3ff03b8, size 0x88, virtual
  /// false, abstract: false, final false
  static inline bool GetSpaceComponentStatus(
      uint64_t space,
      ::GlobalNamespace::OVRPlugin_SpaceComponentType componentType,
      ::ByRef<bool> enabled, ::ByRef<bool> changePending);

  /// @brief Method GetSpaceComponentStatusInternal, addr 0x3ff0440, size 0x114,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  GetSpaceComponentStatusInternal(
      uint64_t space,
      ::GlobalNamespace::OVRPlugin_SpaceComponentType componentType,
      ::ByRef<bool> enabled, ::ByRef<bool> changePending);

  /// @brief Method GetSpaceContainer, addr 0x3ff1ad8, size 0x290, virtual
  /// false, abstract: false, final false
  static inline bool
  GetSpaceContainer(uint64_t space,
                    ::ByRef<::ArrayW<::System::Guid, ::Array<::System::Guid> *>>
                        containerUuids);

  /// @brief Method GetSpaceRoomLayout, addr 0x3ff20b4, size 0x258, virtual
  /// false, abstract: false, final false
  static inline bool GetSpaceRoomLayout(
      uint64_t space,
      ::ByRef<::GlobalNamespace::OVRPlugin_RoomLayout> roomLayout);

  /// @brief Method GetSpaceSemanticLabels, addr 0x3ff1f24, size 0x190, virtual
  /// false, abstract: false, final false
  static inline bool GetSpaceSemanticLabels(uint64_t space,
                                            ::ByRef<::StringW> labels);

  /// @brief Method GetSpaceTriangleMesh, addr 0x3ff2d4c, size 0x200, virtual
  /// false, abstract: false, final false
  static inline bool GetSpaceTriangleMesh(
      uint64_t space,
      ::Unity::Collections::NativeArray_1<::UnityEngine::Vector3> vertices,
      ::Unity::Collections::NativeArray_1<int32_t> triangles);

  /// @brief Method GetSpaceTriangleMeshCounts, addr 0x3ff2b8c, size 0x1c0,
  /// virtual false, abstract: false, final false
  static inline bool GetSpaceTriangleMeshCounts(uint64_t space,
                                                ::ByRef<int32_t> vertexCount,
                                                ::ByRef<int32_t> triangleCount);

  /// @brief Method GetSpaceUserId, addr 0x3ff1240, size 0xdc, virtual false,
  /// abstract: false, final false
  static inline bool GetSpaceUserId(uint64_t spaceUserHandle,
                                    ::ByRef<uint64_t> spaceUserId);

  /// @brief Method GetSpaceUuid, addr 0x3ff08cc, size 0xdc, virtual false,
  /// abstract: false, final false
  static inline bool GetSpaceUuid(uint64_t space, ::ByRef<::System::Guid> uuid);

  /// @brief Method GetSystemHeadsetType, addr 0x3fe5fa0, size 0xbc, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_SystemHeadset
  GetSystemHeadsetType();

  /// @brief Method GetSystemHmd3DofModeEnabled, addr 0x3fef95c, size 0xd0,
  /// virtual false, abstract: false, final false
  static inline bool GetSystemHmd3DofModeEnabled();

  /// @brief Method GetSystemKeyboardDescription, addr 0x3fed968, size 0xe4,
  /// virtual false, abstract: false, final false
  static inline bool GetSystemKeyboardDescription(
      ::GlobalNamespace::OVRPlugin_TrackedKeyboardQueryFlags keyboardQueryFlags,
      ::ByRef<::GlobalNamespace::OVRPlugin_KeyboardDescription>
          keyboardDescription);

  /// @brief Method GetTimeInSeconds, addr 0x3fe81f8, size 0xcc, virtual false,
  /// abstract: false, final false
  static inline double_t GetTimeInSeconds();

  /// @brief Method GetTrackerFrustum, addr 0x3fe02dc, size 0x58, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Frustumf
  GetTrackerFrustum(::GlobalNamespace::OVRPlugin_Tracker trackerId);

  /// @brief Method GetTrackerPose, addr 0x3fe0030, size 0x84, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  GetTrackerPose(::GlobalNamespace::OVRPlugin_Tracker trackerId);

  /// @brief Method GetTrackingCalibratedOrigin, addr 0x3fe6288, size 0x74,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  GetTrackingCalibratedOrigin();

  /// @brief Method GetTrackingOriginType, addr 0x3fe61d4, size 0x50, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_TrackingOrigin
  GetTrackingOriginType();

  /// @brief Method GetTrackingTransformRawPose, addr 0x3fe2374, size 0x120,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  GetTrackingTransformRawPose();

  /// @brief Method GetTrackingTransformRelativePose, addr 0x3fe2494, size
  /// 0x160, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  GetTrackingTransformRelativePose(
      ::GlobalNamespace::OVRPlugin_TrackingOrigin trackingOrigin);

  /// @brief Method GetUseOverriddenExternalCameraFov, addr 0x3fe4a74, size
  /// 0xe8, virtual false, abstract: false, final false
  static inline bool GetUseOverriddenExternalCameraFov(int32_t cameraId);

  /// @brief Method GetUseOverriddenExternalCameraStaticPose, addr 0x3fe4c3c,
  /// size 0xe8, virtual false, abstract: false, final false
  static inline bool GetUseOverriddenExternalCameraStaticPose(int32_t cameraId);

  /// @brief Method GetVirtualKeyboardDirtyTextures, addr 0x3fee4a8, size 0x2e4,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  GetVirtualKeyboardDirtyTextures(
      ::ByRef<::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIds>
          textureIds);

  /// @brief Method GetVirtualKeyboardModelAnimationStates, addr 0x3fee01c, size
  /// 0x48c, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  GetVirtualKeyboardModelAnimationStates(
      ::ByRef<::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationStates>
          animationStates);

  /// @brief Method GetVirtualKeyboardScale, addr 0x3fedf54, size 0xc8, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  GetVirtualKeyboardScale(::ByRef<float_t> scale);

  /// @brief Method GetVirtualKeyboardTextureData, addr 0x3fee78c, size 0xd8,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  GetVirtualKeyboardTextureData(
      uint64_t textureId,
      ::ByRef<::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureData>
          textureData);

  /// @brief Method GuidToUuidString, addr 0x3fddd60, size 0x138, virtual false,
  /// abstract: false, final false
  static inline ::StringW GuidToUuidString(::System::Guid guid);

  /// @brief Method InitializeInsightPassthrough, addr 0x3fe52bc, size 0xc0,
  /// virtual false, abstract: false, final false
  static inline bool InitializeInsightPassthrough();

  /// @brief Method InitializeMixedReality, addr 0x3fe4424, size 0xd4, virtual
  /// false, abstract: false, final false
  static inline bool InitializeMixedReality();

  /// @brief Method IsControllerDrivenHandPosesEnabled, addr 0x3fe40fc, size
  /// 0xd0, virtual false, abstract: false, final false
  static inline bool IsControllerDrivenHandPosesEnabled();

  /// @brief Method IsInsightPassthroughInitialized, addr 0x3fe543c, size 0xc0,
  /// virtual false, abstract: false, final false
  static inline bool IsInsightPassthroughInitialized();

  /// @brief Method IsInsightPassthroughSupported, addr 0x3fe5154, size 0x168,
  /// virtual false, abstract: false, final false
  static inline bool IsInsightPassthroughSupported();

  /// @brief Method IsMixedRealityInitialized, addr 0x3fe45cc, size 0xd4,
  /// virtual false, abstract: false, final false
  static inline bool IsMixedRealityInitialized();

  /// @brief Method IsMultimodalHandsControllersSupported, addr 0x3fe5084, size
  /// 0xd0, virtual false, abstract: false, final false
  static inline bool IsMultimodalHandsControllersSupported();

  /// @brief Method IsOrientationTracked, addr 0x3fddd58, size 0x8, virtual
  /// false, abstract: false, final false
  static inline bool
  IsOrientationTracked(::GlobalNamespace::OVRPlugin_SpaceLocationFlags value);

  /// @brief Method IsOrientationValid, addr 0x3fddd48, size 0x8, virtual false,
  /// abstract: false, final false
  static inline bool
  IsOrientationValid(::GlobalNamespace::OVRPlugin_SpaceLocationFlags value);

  /// @brief Method IsPassthroughShape, addr 0x3fddd1c, size 0x24, virtual
  /// false, abstract: false, final false
  static inline bool
  IsPassthroughShape(::GlobalNamespace::OVRPlugin_OverlayShape shape);

  /// @brief Method IsPerfMetricsSupported, addr 0x3fe7f10, size 0xe0, virtual
  /// false, abstract: false, final false
  static inline bool
  IsPerfMetricsSupported(::GlobalNamespace::OVRPlugin_PerfMetrics perfMetrics);

  /// @brief Method IsPositionTracked, addr 0x3fddd50, size 0x8, virtual false,
  /// abstract: false, final false
  static inline bool
  IsPositionTracked(::GlobalNamespace::OVRPlugin_SpaceLocationFlags value);

  /// @brief Method IsPositionValid, addr 0x3fddd40, size 0x8, virtual false,
  /// abstract: false, final false
  static inline bool
  IsPositionValid(::GlobalNamespace::OVRPlugin_SpaceLocationFlags value);

  /// @brief Method IsSuccess, addr 0x3fddc08, size 0xc, virtual false,
  /// abstract: false, final false
  static inline bool IsSuccess(::GlobalNamespace::OVRPlugin_Result result);

  /// @brief Method IsValidBone, addr 0x3fe8e10, size 0x28, virtual false,
  /// abstract: false, final false
  static inline bool
  IsValidBone(::GlobalNamespace::OVRPlugin_BoneId bone,
              ::GlobalNamespace::OVRPlugin_SkeletonType skeletonType);

  /// @brief Method LoadRenderModel, addr 0x3ff34b8, size 0x1dc, virtual false,
  /// abstract: false, final false
  static inline ::ArrayW<uint8_t, ::Array<uint8_t> *>
  LoadRenderModel(uint64_t modelKey);

  /// @brief Method LocateSpace, addr 0x3ff17e0, size 0xc8, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Posef
  LocateSpace(uint64_t space,
              ::GlobalNamespace::OVRPlugin_TrackingOrigin baseOrigin);

  /// @brief Method OnEditorShutdown, addr 0x3ff3694, size 0xb8, virtual false,
  /// abstract: false, final false
  static inline void OnEditorShutdown();

  /// @brief Method OverrideExternalCameraFov, addr 0x3fe4988, size 0xec,
  /// virtual false, abstract: false, final false
  static inline bool
  OverrideExternalCameraFov(int32_t cameraId, bool useOverriddenFov,
                            ::GlobalNamespace::OVRPlugin_Fovf fov);

  /// @brief Method OverrideExternalCameraStaticPose, addr 0x3fe4b5c, size 0xe0,
  /// virtual false, abstract: false, final false
  static inline bool OverrideExternalCameraStaticPose(
      int32_t cameraId, bool useOverriddenPose,
      ::GlobalNamespace::OVRPlugin_Posef poseInStageOrigin);

  /// @brief Method PollEvent, addr 0x3fefc78, size 0x1f0, virtual false,
  /// abstract: false, final false
  static inline bool PollEvent(
      ::ByRef<::GlobalNamespace::OVRPlugin_EventDataBuffer> eventDataBuffer);

  /// @brief Method QuerySpaces, addr 0x3ff09a8, size 0x228, virtual false,
  /// abstract: false, final false
  static inline bool
  QuerySpaces(::GlobalNamespace::OVRPlugin_SpaceQueryInfo queryInfo,
              ::ByRef<uint64_t> requestId);

  /// @brief Method RecenterTrackingOrigin, addr 0x3fe6358, size 0x64, virtual
  /// false, abstract: false, final false
  static inline bool
  RecenterTrackingOrigin(::GlobalNamespace::OVRPlugin_RecenterFlags flags);

  /// @brief Method RequestSceneCapture, addr 0x3ff2a6c, size 0x120, virtual
  /// false, abstract: false, final false
  static inline bool RequestSceneCapture(::StringW requestString,
                                         ::ByRef<uint64_t> requestId);

  /// @brief Method ResetAppPerfStats, addr 0x3fe3ba8, size 0x164, virtual
  /// false, abstract: false, final false
  static inline bool ResetAppPerfStats();

  /// @brief Method ResetDefaultExternalCamera, addr 0x3fe4d24, size 0xc0,
  /// virtual false, abstract: false, final false
  static inline bool ResetDefaultExternalCamera();

  /// @brief Method RetrieveSpaceQueryResults, addr 0x3ff0d80, size 0x39c,
  /// virtual false, abstract: false, final false
  static inline bool RetrieveSpaceQueryResults(
      uint64_t requestId,
      ::ByRef<
          ::ArrayW<::GlobalNamespace::OVRPlugin_SpaceQueryResult,
                   ::Array<::GlobalNamespace::OVRPlugin_SpaceQueryResult> *>>
          results);

  /// @brief Method RetrieveSpaceQueryResults, addr 0x3ff0bd0, size 0x1b0,
  /// virtual false, abstract: false, final false
  static inline bool
  RetrieveSpaceQueryResults(uint64_t requestId,
                            ::ByRef<::Unity::Collections::NativeArray_1<
                                ::GlobalNamespace::OVRPlugin_SpaceQueryResult>>
                                results,
                            ::Unity::Collections::Allocator allocator);

  /// @brief Method SaveSpace, addr 0x3ff0644, size 0xf4, virtual false,
  /// abstract: false, final false
  static inline bool
  SaveSpace(uint64_t space,
            ::GlobalNamespace::OVRPlugin_SpaceStorageLocation location,
            ::GlobalNamespace::OVRPlugin_SpaceStoragePersistenceMode mode,
            ::ByRef<uint64_t> requestId);

  /// @brief Method SaveSpaceList, addr 0x3ff111c, size 0x124, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  SaveSpaceList(::Unity::Collections::NativeArray_1<uint64_t> spaces,
                ::GlobalNamespace::OVRPlugin_SpaceStorageLocation location,
                ::ByRef<uint64_t> requestId);

  /// @brief Method SendEvent, addr 0x3fe7b58, size 0x194, virtual false,
  /// abstract: false, final false
  static inline bool SendEvent(::StringW name, ::StringW param,
                               ::StringW source);

  /// @brief Method SendVirtualKeyboardInput, addr 0x3fedbc4, size 0xf8, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result SendVirtualKeyboardInput(
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputInfo inputInfo,
      ::ByRef<::GlobalNamespace::OVRPlugin_Posef> interactorRootPose);

  /// @brief Method SetBoundaryVisible, addr 0x3fe5ebc, size 0xe4, virtual
  /// false, abstract: false, final false
  static inline bool SetBoundaryVisible(bool value);

  /// @brief Method SetClientColorDesc, addr 0x3fefa2c, size 0x114, virtual
  /// false, abstract: false, final false
  static inline bool
  SetClientColorDesc(::GlobalNamespace::OVRPlugin_ColorSpace colorSpace);

  /// @brief Method SetColorScaleAndOffset, addr 0x3fe82c4, size 0x164, virtual
  /// false, abstract: false, final false
  static inline bool SetColorScaleAndOffset(::UnityEngine::Vector4 colorScale,
                                            ::UnityEngine::Vector4 colorOffset,
                                            bool applyToAllLayers);

  /// @brief Method SetControllerDrivenHandPoses, addr 0x3fe3f64, size 0xcc,
  /// virtual false, abstract: false, final false
  static inline bool
  SetControllerDrivenHandPoses(bool controllerDrivenHandPoses);

  /// @brief Method SetControllerDrivenHandPosesAreNatural, addr 0x3fe4030, size
  /// 0xcc, virtual false, abstract: false, final false
  static inline bool SetControllerDrivenHandPosesAreNatural(
      bool controllerDrivenHandPosesAreNatural);

  /// @brief Method SetControllerHaptics, addr 0x3fe3350, size 0xe0, virtual
  /// false, abstract: false, final false
  static inline bool SetControllerHaptics(
      uint32_t controllerMask,
      ::GlobalNamespace::OVRPlugin_HapticsBuffer hapticsBuffer);

  /// @brief Method SetControllerHapticsAmplitudeEnvelope, addr 0x3fe2ef4, size
  /// 0xe0, virtual false, abstract: false, final false
  static inline bool SetControllerHapticsAmplitudeEnvelope(
      ::GlobalNamespace::OVRPlugin_Controller controllerMask,
      ::GlobalNamespace::OVRPlugin_HapticsAmplitudeEnvelopeVibration
          hapticsVibration);

  /// @brief Method SetControllerHapticsPcm, addr 0x3fe2fd4, size 0xf0, virtual
  /// false, abstract: false, final false
  static inline bool SetControllerHapticsPcm(
      ::GlobalNamespace::OVRPlugin_Controller controllerMask,
      ::GlobalNamespace::OVRPlugin_HapticsPcmVibration hapticsVibration);

  /// @brief Method SetControllerLocalizedVibration, addr 0x3fe2e04, size 0xf0,
  /// virtual false, abstract: false, final false
  static inline bool SetControllerLocalizedVibration(
      ::GlobalNamespace::OVRPlugin_Controller controllerMask,
      ::GlobalNamespace::OVRPlugin_HapticsLocation hapticsLocationMask,
      float_t frequency, float_t amplitude);

  /// @brief Method SetControllerVibration, addr 0x3fe2d88, size 0x7c, virtual
  /// false, abstract: false, final false
  static inline bool SetControllerVibration(uint32_t controllerMask,
                                            float_t frequency,
                                            float_t amplitude);

  /// @brief Method SetDefaultExternalCamera, addr 0x3fe4de4, size 0xe0, virtual
  /// false, abstract: false, final false
  static inline bool SetDefaultExternalCamera(
      ::StringW cameraName,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraIntrinsics> cameraIntrinsics,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraExtrinsics> cameraExtrinsics);

  /// @brief Method SetDesiredEyeTextureFormat, addr 0x3fe435c, size 0xc8,
  /// virtual false, abstract: false, final false
  static inline bool SetDesiredEyeTextureFormat(
      ::GlobalNamespace::OVRPlugin_EyeTextureFormat value);

  /// @brief Method SetDeveloperMode, addr 0x3fe8500, size 0xc8, virtual false,
  /// abstract: false, final false
  static inline bool SetDeveloperMode(::GlobalNamespace::OVRPlugin_Bool active);

  /// @brief Method SetExternalCameraProperties, addr 0x3fe4ec4, size 0xe0,
  /// virtual false, abstract: false, final false
  static inline bool SetExternalCameraProperties(
      ::StringW cameraName,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraIntrinsics> cameraIntrinsics,
      ::ByRef<::GlobalNamespace::OVRPlugin_CameraExtrinsics> cameraExtrinsics);

  /// @brief Method SetEyeBufferSharpenType, addr 0x3ff3814, size 0xc8, virtual
  /// false, abstract: false, final false
  static inline bool SetEyeBufferSharpenType(
      ::GlobalNamespace::OVRPlugin_LayerSharpenType sharpenType);

  /// @brief Method SetHandNodePoseStateLatency, addr 0x3fe3dc8, size 0xd0,
  /// virtual false, abstract: false, final false
  static inline bool SetHandNodePoseStateLatency(double_t latencyInSeconds);

  /// @brief Method SetHeadPoseModifier, addr 0x3fe7cec, size 0xd8, virtual
  /// false, abstract: false, final false
  static inline bool SetHeadPoseModifier(
      ::ByRef<::GlobalNamespace::OVRPlugin_Quatf> relativeRotation,
      ::ByRef<::GlobalNamespace::OVRPlugin_Vector3f> relativeTranslation);

  /// @brief Method SetInsightPassthroughKeyboardHandsIntensity, addr 0x3fe59d8,
  /// size 0xe0, virtual false, abstract: false, final false
  static inline bool SetInsightPassthroughKeyboardHandsIntensity(
      int32_t layerId,
      ::GlobalNamespace::OVRPlugin_InsightPassthroughKeyboardHandsIntensity
          intensity);

  /// @brief Method SetInsightPassthroughStyle, addr 0x3fe55b8, size 0x118,
  /// virtual false, abstract: false, final false
  static inline bool SetInsightPassthroughStyle(
      int32_t layerId,
      ::GlobalNamespace::OVRPlugin_InsightPassthroughStyle style);

  /// @brief Method SetInsightPassthroughStyle, addr 0x3fdaaac, size 0x214,
  /// virtual false, abstract: false, final false
  static inline bool SetInsightPassthroughStyle(
      int32_t layerId,
      ::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2 style);

  /// @brief Method SetKeyboardOverlayUV, addr 0x3ff0020, size 0xd8, virtual
  /// false, abstract: false, final false
  static inline bool
  SetKeyboardOverlayUV(::GlobalNamespace::OVRPlugin_Vector2f uv);

  /// @brief Method SetLogCallback2, addr 0x3fddc14, size 0x108, virtual false,
  /// abstract: false, final false
  static inline void SetLogCallback2(
      ::GlobalNamespace::OVRPlugin_LogCallback2DelegateType *logCallback);

  /// @brief Method SetMultimodalHandsControllersSupported, addr 0x3fe4fa4, size
  /// 0xe0, virtual false, abstract: false, final false
  static inline bool SetMultimodalHandsControllersSupported(bool value);

  /// @brief Method SetSimultaneousHandsAndControllersEnabled, addr 0x3fe209c,
  /// size 0xcc, virtual false, abstract: false, final false
  static inline bool SetSimultaneousHandsAndControllersEnabled(bool enabled);

  /// @brief Method SetSpaceComponentStatus, addr 0x3ff01d4, size 0x1e4, virtual
  /// false, abstract: false, final false
  static inline bool SetSpaceComponentStatus(
      uint64_t space,
      ::GlobalNamespace::OVRPlugin_SpaceComponentType componentType,
      bool enable, double_t timeout, ::ByRef<uint64_t> requestId);

  /// @brief Method SetTrackingCalibratedOrigin, addr 0x3fe62fc, size 0x5c,
  /// virtual false, abstract: false, final false
  static inline bool SetTrackingCalibratedOrigin();

  /// @brief Method SetTrackingOriginType, addr 0x3fe6224, size 0x64, virtual
  /// false, abstract: false, final false
  static inline bool
  SetTrackingOriginType(::GlobalNamespace::OVRPlugin_TrackingOrigin originType);

  /// @brief Method SetVirtualKeyboardModelVisibility, addr 0x3fee864, size
  /// 0xc4, virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  SetVirtualKeyboardModelVisibility(
      ::ByRef<::GlobalNamespace::OVRPlugin_VirtualKeyboardModelVisibility>
          visibility);

  /// @brief Method ShareSpaces, addr 0x3ff14c0, size 0x140, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  ShareSpaces(::Unity::Collections::NativeArray_1<uint64_t> spaces,
              ::Unity::Collections::NativeArray_1<uint64_t> userHandles,
              ::ByRef<uint64_t> requestId);

  /// @brief Method ShowUI, addr 0x3fe0334, size 0x64, virtual false, abstract:
  /// false, final false
  static inline bool ShowUI(::GlobalNamespace::OVRPlugin_PlatformUI ui);

  /// @brief Method ShutdownInsightPassthrough, addr 0x3fe537c, size 0xc0,
  /// virtual false, abstract: false, final false
  static inline bool ShutdownInsightPassthrough();

  /// @brief Method ShutdownMixedReality, addr 0x3fe44f8, size 0xd4, virtual
  /// false, abstract: false, final false
  static inline bool ShutdownMixedReality();

  /// @brief Method StartBodyTracking, addr 0x3fef710, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline bool StartBodyTracking();

  /// @brief Method StartEyeTracking, addr 0x3fef410, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline bool StartEyeTracking();

  /// @brief Method StartFaceTracking, addr 0x3fef590, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline bool StartFaceTracking();

  /// @brief Method StartKeyboardTracking, addr 0x3fed6f0, size 0xc8, virtual
  /// false, abstract: false, final false
  static inline bool StartKeyboardTracking(uint64_t trackedKeyboardId);

  /// @brief Method StopBodyTracking, addr 0x3fef7d0, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline bool StopBodyTracking();

  /// @brief Method StopEyeTracking, addr 0x3fef4d0, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline bool StopEyeTracking();

  /// @brief Method StopFaceTracking, addr 0x3fef650, size 0xc0, virtual false,
  /// abstract: false, final false
  static inline bool StopFaceTracking();

  /// @brief Method StopKeyboardTracking, addr 0x3fed7b8, size 0xc0, virtual
  /// false, abstract: false, final false
  static inline bool StopKeyboardTracking();

  /// @brief Method SuggestVirtualKeyboardLocation, addr 0x3fede6c, size 0xe8,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_Result
  SuggestVirtualKeyboardLocation(
      ::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationInfo locationInfo);

  /// @brief Method TestBoundaryNode, addr 0x3fe3668, size 0xec, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_BoundaryTestResult
  TestBoundaryNode(::GlobalNamespace::OVRPlugin_Node nodeId,
                   ::GlobalNamespace::OVRPlugin_BoundaryType boundaryType);

  /// @brief Method TestBoundaryPoint, addr 0x3fe3754, size 0x10c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_BoundaryTestResult
  TestBoundaryPoint(::GlobalNamespace::OVRPlugin_Vector3f point,
                    ::GlobalNamespace::OVRPlugin_BoundaryType boundaryType);

  /// @brief Method ToBool, addr 0x3fde260, size 0x8, virtual false, abstract:
  /// false, final false
  static inline ::GlobalNamespace::OVRPlugin_Bool ToBool(bool b);

  /// @brief Method TryLocateSpace, addr 0x3ff1600, size 0x1e0, virtual false,
  /// abstract: false, final false
  static inline bool
  TryLocateSpace(uint64_t space,
                 ::GlobalNamespace::OVRPlugin_TrackingOrigin baseOrigin,
                 ::ByRef<::GlobalNamespace::OVRPlugin_Posef> pose);

  /// @brief Method TryLocateSpace, addr 0x3ff18a8, size 0x168, virtual false,
  /// abstract: false, final false
  static inline bool TryLocateSpace(
      uint64_t space, ::GlobalNamespace::OVRPlugin_TrackingOrigin baseOrigin,
      ::ByRef<::GlobalNamespace::OVRPlugin_Posef> pose,
      ::ByRef<::GlobalNamespace::OVRPlugin_SpaceLocationFlags> locationFlags);

  /// @brief Method UpdateExternalCamera, addr 0x3fe4780, size 0xd4, virtual
  /// false, abstract: false, final false
  static inline bool UpdateExternalCamera();

  /// @brief Method UpdateInsightPassthroughGeometryTransform, addr 0x3fda23c,
  /// size 0x100, virtual false, abstract: false, final false
  static inline bool
  UpdateInsightPassthroughGeometryTransform(uint64_t geometryInstanceHandle,
                                            ::UnityEngine::Matrix4x4 transform);

  /// @brief Method UpdateNodePhysicsPoses, addr 0x3fe105c, size 0xdc, virtual
  /// false, abstract: false, final false
  static inline bool UpdateNodePhysicsPoses(int32_t frameIndex,
                                            double_t predictionSeconds);

  /// @brief Method UpdatePassthroughColorLut, addr 0x3fe58d8, size 0x100,
  /// virtual false, abstract: false, final false
  static inline bool UpdatePassthroughColorLut(
      uint64_t colorLut,
      ::GlobalNamespace::OVRPlugin_PassthroughColorLutData data);

  static inline int32_t getStaticF_MAX_CPU_CORES();

  static inline ::System::Guid getStaticF__cachedAudioInGuid();

  static inline ::StringW getStaticF__cachedAudioInString();

  static inline ::System::Guid getStaticF__cachedAudioOutGuid();

  static inline ::StringW getStaticF__cachedAudioOutString();

  static inline ::ArrayW<float_t, ::Array<float_t> *>
  getStaticF__cachedSystemDisplayFrequenciesAvailable();

  static inline ::GlobalNamespace::OVRPlugin_GUID *
  getStaticF__nativeAudioInGuid();

  static inline ::GlobalNamespace::OVRPlugin_GUID *
  getStaticF__nativeAudioOutGuid();

  static inline ::System::Version *getStaticF__nativeSDKVersion();

  static inline ::GlobalNamespace::OVRNativeBuffer *
  getStaticF__nativeSystemDisplayFrequenciesAvailable();

  static inline ::System::Nullable_1<::GlobalNamespace::OVRPlugin_XrApi>
  getStaticF__nativeXrApi();

  static inline ::System::Version *getStaticF__version();

  static inline ::System::Version *getStaticF__versionZero();

  static inline ::GlobalNamespace::OVRPlugin_EyeGazesStateInternal
  getStaticF_cachedEyeGazesState();

  static inline ::GlobalNamespace::OVRPlugin_FaceStateInternal
  getStaticF_cachedFaceState();

  static inline ::GlobalNamespace::OVRPlugin_HandStateInternal
  getStaticF_cachedHandState();

  static inline ::GlobalNamespace::OVRPlugin_Skeleton
  getStaticF_cachedSkeleton();

  static inline ::GlobalNamespace::OVRPlugin_Skeleton2Internal
  getStaticF_cachedSkeleton2();

  static inline bool getStaticF_perfStatWarningPrinted();

  static inline bool getStaticF_resetPerfStatWarningPrinted();

  static inline ::System::Version *getStaticF_wrapperVersion();

  /// @brief Method get_AsymmetricFovEnabled, addr 0x3fe7654, size 0xd0, virtual
  /// false, abstract: false, final false
  static inline bool get_AsymmetricFovEnabled();

  /// @brief Method get_EyeTextureArrayEnabled, addr 0x3fe7724, size 0xc0,
  /// virtual false, abstract: false, final false
  static inline bool get_EyeTextureArrayEnabled();

  /// @brief Method get_audioInId, addr 0x3fdefd8, size 0x2ec, virtual false,
  /// abstract: false, final false
  static inline ::StringW get_audioInId();

  /// @brief Method get_audioOutId, addr 0x3fdece4, size 0x2ec, virtual false,
  /// abstract: false, final false
  static inline ::StringW get_audioOutId();

  /// @brief Method get_batteryLevel, addr 0x3fdf744, size 0x50, virtual false,
  /// abstract: false, final false
  static inline float_t get_batteryLevel();

  /// @brief Method get_batteryStatus, addr 0x3fdff30, size 0x50, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_BatteryStatus get_batteryStatus();

  /// @brief Method get_batteryTemperature, addr 0x3fdf794, size 0x50, virtual
  /// false, abstract: false, final false
  static inline float_t get_batteryTemperature();

  /// @brief Method get_bodyTrackingEnabled, addr 0x3feb244, size 0xd0, virtual
  /// false, abstract: false, final false
  static inline bool get_bodyTrackingEnabled();

  /// @brief Method get_bodyTrackingSupported, addr 0x3fdc4cc, size 0xd0,
  /// virtual false, abstract: false, final false
  static inline bool get_bodyTrackingSupported();

  /// @brief Method get_chromatic, addr 0x3fde090, size 0xd8, virtual false,
  /// abstract: false, final false
  static inline bool get_chromatic();

  /// @brief Method get_cpuLevel, addr 0x3fdfb04, size 0x50, virtual false,
  /// abstract: false, final false
  static inline int32_t get_cpuLevel();

  /// @brief Method get_eyeDepth, addr 0x3fdf5a8, size 0x8c, virtual false,
  /// abstract: false, final false
  static inline float_t get_eyeDepth();

  /// @brief Method get_eyeFovPremultipliedAlphaModeEnabled, addr 0x3fe73c4,
  /// size 0xd0, virtual false, abstract: false, final false
  static inline bool get_eyeFovPremultipliedAlphaModeEnabled();

  /// @brief Method get_eyeHeight, addr 0x3fdf694, size 0x50, virtual false,
  /// abstract: false, final false
  static inline float_t get_eyeHeight();

  /// @brief Method get_eyeTrackedFoveatedRenderingEnabled, addr 0x3fe65cc, size
  /// 0xec, virtual false, abstract: false, final false
  static inline bool get_eyeTrackedFoveatedRenderingEnabled();

  /// @brief Method get_eyeTrackedFoveatedRenderingSupported, addr 0x3fe6500,
  /// size 0xcc, virtual false, abstract: false, final false
  static inline bool get_eyeTrackedFoveatedRenderingSupported();

  /// @brief Method get_eyeTrackingEnabled, addr 0x3fef0cc, size 0xd0, virtual
  /// false, abstract: false, final false
  static inline bool get_eyeTrackingEnabled();

  /// @brief Method get_eyeTrackingSupported, addr 0x3fdc59c, size 0xd0, virtual
  /// false, abstract: false, final false
  static inline bool get_eyeTrackingSupported();

  /// @brief Method get_faceTrackingEnabled, addr 0x3fee928, size 0xd0, virtual
  /// false, abstract: false, final false
  static inline bool get_faceTrackingEnabled();

  /// @brief Method get_faceTrackingSupported, addr 0x3fdc3fc, size 0xd0,
  /// virtual false, abstract: false, final false
  static inline bool get_faceTrackingSupported();

  /// @brief Method get_fixedFoveatedRenderingLevel, addr 0x3fe6968, size 0x4c,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel
  get_fixedFoveatedRenderingLevel();

  /// @brief Method get_fixedFoveatedRenderingSupported, addr 0x3fe6430, size
  /// 0xd0, virtual false, abstract: false, final false
  static inline bool get_fixedFoveatedRenderingSupported();

  /// @brief Method get_foveatedRenderingLevel, addr 0x3fe67a0, size 0xe4,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel
  get_foveatedRenderingLevel();

  /// @brief Method get_foveatedRenderingSupported, addr 0x3fe63bc, size 0x74,
  /// virtual false, abstract: false, final false
  static inline bool get_foveatedRenderingSupported();

  /// @brief Method get_gpuLevel, addr 0x3fdfbac, size 0x50, virtual false,
  /// abstract: false, final false
  static inline int32_t get_gpuLevel();

  /// @brief Method get_gpuUtilLevel, addr 0x3fe6e38, size 0xf0, virtual false,
  /// abstract: false, final false
  static inline float_t get_gpuUtilLevel();

  /// @brief Method get_gpuUtilSupported, addr 0x3fe6d68, size 0xd0, virtual
  /// false, abstract: false, final false
  static inline bool get_gpuUtilSupported();

  /// @brief Method get_hasInputFocus, addr 0x3fdf320, size 0xd8, virtual false,
  /// abstract: false, final false
  static inline bool get_hasInputFocus();

  /// @brief Method get_hasVrFocus, addr 0x3fdf2c4, size 0x5c, virtual false,
  /// abstract: false, final false
  static inline bool get_hasVrFocus();

  /// @brief Method get_headphonesPresent, addr 0x3fdeaac, size 0x90, virtual
  /// false, abstract: false, final false
  static inline bool get_headphonesPresent();

  /// @brief Method get_hmdPresent, addr 0x3fde988, size 0x94, virtual false,
  /// abstract: false, final false
  static inline bool get_hmdPresent();

  /// @brief Method get_initialized, addr 0x3fdde98, size 0x5c, virtual false,
  /// abstract: false, final false
  static inline bool get_initialized();

  /// @brief Method get_ipd, addr 0x3fdfd4c, size 0x50, virtual false, abstract:
  /// false, final false
  static inline float_t get_ipd();

  /// @brief Method get_latency, addr 0x3fdf500, size 0xa8, virtual false,
  /// abstract: false, final false
  static inline ::StringW get_latency();

  /// @brief Method get_localDimming, addr 0x3fe78b4, size 0xf0, virtual false,
  /// abstract: false, final false
  static inline bool get_localDimming();

  /// @brief Method get_localDimmingSupported, addr 0x3fe77e4, size 0xd0,
  /// virtual false, abstract: false, final false
  static inline bool get_localDimmingSupported();

  /// @brief Method get_monoscopic, addr 0x3fde268, size 0x90, virtual false,
  /// abstract: false, final false
  static inline bool get_monoscopic();

  /// @brief Method get_nativeSDKVersion, addr 0x3fdd958, size 0x2b0, virtual
  /// false, abstract: false, final false
  static inline ::System::Version *get_nativeSDKVersion();

  /// @brief Method get_nativeXrApi, addr 0x3fddef4, size 0x19c, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_XrApi get_nativeXrApi();

  /// @brief Method get_occlusionMesh, addr 0x3fdfdfc, size 0x90, virtual false,
  /// abstract: false, final false
  static inline bool get_occlusionMesh();

  /// @brief Method get_position, addr 0x3fde4d0, size 0x90, virtual false,
  /// abstract: false, final false
  static inline bool get_position();

  /// @brief Method get_positionSupported, addr 0x3fde7d4, size 0x90, virtual
  /// false, abstract: false, final false
  static inline bool get_positionSupported();

  /// @brief Method get_positionTracked, addr 0x3fde864, size 0x94, virtual
  /// false, abstract: false, final false
  static inline bool get_positionTracked();

  /// @brief Method get_powerSaving, addr 0x3fde8f8, size 0x90, virtual false,
  /// abstract: false, final false
  static inline bool get_powerSaving();

  /// @brief Method get_productName, addr 0x3fdf4b0, size 0x50, virtual false,
  /// abstract: false, final false
  static inline ::StringW get_productName();

  /// @brief Method get_recommendedMSAALevel, addr 0x3fdeb3c, size 0xd4, virtual
  /// false, abstract: false, final false
  static inline int32_t get_recommendedMSAALevel();

  /// @brief Method get_rotation, addr 0x3fde39c, size 0x90, virtual false,
  /// abstract: false, final false
  static inline bool get_rotation();

  /// @brief Method get_shouldQuit, addr 0x3fdf3f8, size 0x5c, virtual false,
  /// abstract: false, final false
  static inline bool get_shouldQuit();

  /// @brief Method get_shouldRecenter, addr 0x3fdf454, size 0x5c, virtual
  /// false, abstract: false, final false
  static inline bool get_shouldRecenter();

  /// @brief Method get_suggestedCpuPerfLevel, addr 0x3fdf7e4, size 0xd0,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel
  get_suggestedCpuPerfLevel();

  /// @brief Method get_suggestedGpuPerfLevel, addr 0x3fdf974, size 0xd0,
  /// virtual false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel
  get_suggestedGpuPerfLevel();

  /// @brief Method get_systemDisplayFrequenciesAvailable, addr 0x3fe6f28, size
  /// 0x284, virtual false, abstract: false, final false
  static inline ::ArrayW<float_t, ::Array<float_t> *>
  get_systemDisplayFrequenciesAvailable();

  /// @brief Method get_systemDisplayFrequency, addr 0x3fe71ac, size 0x14c,
  /// virtual false, abstract: false, final false
  static inline float_t get_systemDisplayFrequency();

  /// @brief Method get_systemRegion, addr 0x3fdec10, size 0xd4, virtual false,
  /// abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_SystemRegion get_systemRegion();

  /// @brief Method get_systemVolume, addr 0x3fdfcfc, size 0x50, virtual false,
  /// abstract: false, final false
  static inline float_t get_systemVolume();

  /// @brief Method get_tiledMultiResLevel, addr 0x3fe6cc8, size 0x4c, virtual
  /// false, abstract: false, final false
  static inline ::GlobalNamespace::OVRPlugin_TiledMultiResLevel
  get_tiledMultiResLevel();

  /// @brief Method get_tiledMultiResSupported, addr 0x3fe6c7c, size 0x4c,
  /// virtual false, abstract: false, final false
  static inline bool get_tiledMultiResSupported();

  /// @brief Method get_useDynamicFixedFoveatedRendering, addr 0x3fe6bdc, size
  /// 0x4c, virtual false, abstract: false, final false
  static inline bool get_useDynamicFixedFoveatedRendering();

  /// @brief Method get_useDynamicFoveatedRendering, addr 0x3fe6a08, size 0xec,
  /// virtual false, abstract: false, final false
  static inline bool get_useDynamicFoveatedRendering();

  /// @brief Method get_useIPDInPositionTracking, addr 0x3fde604, size 0xd8,
  /// virtual false, abstract: false, final false
  static inline bool get_useIPDInPositionTracking();

  /// @brief Method get_userPresent, addr 0x3fdea1c, size 0x90, virtual false,
  /// abstract: false, final false
  static inline bool get_userPresent();

  /// @brief Method get_version, addr 0x3fdd4b0, size 0x4a8, virtual false,
  /// abstract: false, final false
  static inline ::System::Version *get_version();

  /// @brief Method get_vsyncCount, addr 0x3fdfc54, size 0x50, virtual false,
  /// abstract: false, final false
  static inline int32_t get_vsyncCount();

  static inline void setStaticF_MAX_CPU_CORES(int32_t value);

  static inline void setStaticF__cachedAudioInGuid(::System::Guid value);

  static inline void setStaticF__cachedAudioInString(::StringW value);

  static inline void setStaticF__cachedAudioOutGuid(::System::Guid value);

  static inline void setStaticF__cachedAudioOutString(::StringW value);

  static inline void setStaticF__cachedSystemDisplayFrequenciesAvailable(
      ::ArrayW<float_t, ::Array<float_t> *> value);

  static inline void
  setStaticF__nativeAudioInGuid(::GlobalNamespace::OVRPlugin_GUID *value);

  static inline void
  setStaticF__nativeAudioOutGuid(::GlobalNamespace::OVRPlugin_GUID *value);

  static inline void setStaticF__nativeSDKVersion(::System::Version *value);

  static inline void setStaticF__nativeSystemDisplayFrequenciesAvailable(
      ::GlobalNamespace::OVRNativeBuffer *value);

  static inline void setStaticF__nativeXrApi(
      ::System::Nullable_1<::GlobalNamespace::OVRPlugin_XrApi> value);

  static inline void setStaticF__version(::System::Version *value);

  static inline void setStaticF__versionZero(::System::Version *value);

  static inline void setStaticF_cachedEyeGazesState(
      ::GlobalNamespace::OVRPlugin_EyeGazesStateInternal value);

  static inline void setStaticF_cachedFaceState(
      ::GlobalNamespace::OVRPlugin_FaceStateInternal value);

  static inline void setStaticF_cachedHandState(
      ::GlobalNamespace::OVRPlugin_HandStateInternal value);

  static inline void
  setStaticF_cachedSkeleton(::GlobalNamespace::OVRPlugin_Skeleton value);

  static inline void setStaticF_cachedSkeleton2(
      ::GlobalNamespace::OVRPlugin_Skeleton2Internal value);

  static inline void setStaticF_perfStatWarningPrinted(bool value);

  static inline void setStaticF_resetPerfStatWarningPrinted(bool value);

  static inline void setStaticF_wrapperVersion(::System::Version *value);

  /// @brief Method set_chromatic, addr 0x3fde168, size 0xf8, virtual false,
  /// abstract: false, final false
  static inline void set_chromatic(bool value);

  /// @brief Method set_cpuLevel, addr 0x3fdfb54, size 0x58, virtual false,
  /// abstract: false, final false
  static inline void set_cpuLevel(int32_t value);

  /// @brief Method set_eyeDepth, addr 0x3fdf634, size 0x60, virtual false,
  /// abstract: false, final false
  static inline void set_eyeDepth(float_t value);

  /// @brief Method set_eyeFovPremultipliedAlphaModeEnabled, addr 0x3fe7494,
  /// size 0xe0, virtual false, abstract: false, final false
  static inline void set_eyeFovPremultipliedAlphaModeEnabled(bool value);

  /// @brief Method set_eyeHeight, addr 0x3fdf6e4, size 0x60, virtual false,
  /// abstract: false, final false
  static inline void set_eyeHeight(float_t value);

  /// @brief Method set_eyeTrackedFoveatedRenderingEnabled, addr 0x3fe66b8, size
  /// 0xe8, virtual false, abstract: false, final false
  static inline void set_eyeTrackedFoveatedRenderingEnabled(bool value);

  /// @brief Method set_fixedFoveatedRenderingLevel, addr 0x3fe69b4, size 0x54,
  /// virtual false, abstract: false, final false
  static inline void set_fixedFoveatedRenderingLevel(
      ::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel value);

  /// @brief Method set_foveatedRenderingLevel, addr 0x3fe6884, size 0xe4,
  /// virtual false, abstract: false, final false
  static inline void set_foveatedRenderingLevel(
      ::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel value);

  /// @brief Method set_gpuLevel, addr 0x3fdfbfc, size 0x58, virtual false,
  /// abstract: false, final false
  static inline void set_gpuLevel(int32_t value);

  /// @brief Method set_ipd, addr 0x3fdfd9c, size 0x60, virtual false, abstract:
  /// false, final false
  static inline void set_ipd(float_t value);

  /// @brief Method set_localDimming, addr 0x3fe79a4, size 0xe8, virtual false,
  /// abstract: false, final false
  static inline void set_localDimming(bool value);

  /// @brief Method set_monoscopic, addr 0x3fde2f8, size 0xa4, virtual false,
  /// abstract: false, final false
  static inline void set_monoscopic(bool value);

  /// @brief Method set_occlusionMesh, addr 0x3fdfe8c, size 0xa4, virtual false,
  /// abstract: false, final false
  static inline void set_occlusionMesh(bool value);

  /// @brief Method set_position, addr 0x3fde560, size 0xa4, virtual false,
  /// abstract: false, final false
  static inline void set_position(bool value);

  /// @brief Method set_rotation, addr 0x3fde42c, size 0xa4, virtual false,
  /// abstract: false, final false
  static inline void set_rotation(bool value);

  /// @brief Method set_suggestedCpuPerfLevel, addr 0x3fdf8b4, size 0xc0,
  /// virtual false, abstract: false, final false
  static inline void set_suggestedCpuPerfLevel(
      ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel value);

  /// @brief Method set_suggestedGpuPerfLevel, addr 0x3fdfa44, size 0xc0,
  /// virtual false, abstract: false, final false
  static inline void set_suggestedGpuPerfLevel(
      ::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel value);

  /// @brief Method set_systemDisplayFrequency, addr 0x3fe72f8, size 0xcc,
  /// virtual false, abstract: false, final false
  static inline void set_systemDisplayFrequency(float_t value);

  /// @brief Method set_tiledMultiResLevel, addr 0x3fe6d14, size 0x54, virtual
  /// false, abstract: false, final false
  static inline void
  set_tiledMultiResLevel(::GlobalNamespace::OVRPlugin_TiledMultiResLevel value);

  /// @brief Method set_useDynamicFixedFoveatedRendering, addr 0x3fe6c28, size
  /// 0x54, virtual false, abstract: false, final false
  static inline void set_useDynamicFixedFoveatedRendering(bool value);

  /// @brief Method set_useDynamicFoveatedRendering, addr 0x3fe6af4, size 0xe8,
  /// virtual false, abstract: false, final false
  static inline void set_useDynamicFoveatedRendering(bool value);

  /// @brief Method set_useIPDInPositionTracking, addr 0x3fde6dc, size 0xf8,
  /// virtual false, abstract: false, final false
  static inline void set_useIPDInPositionTracking(bool value);

  /// @brief Method set_vsyncCount, addr 0x3fdfca4, size 0x58, virtual false,
  /// abstract: false, final false
  static inline void set_vsyncCount(int32_t value);

protected:
  // Ctor Parameters []
  // @brief default ctor
  constexpr OVRPlugin();

public:
  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin", modifiers: "&&",
  // def_value: None }]
  // @brief delete move ctor to prevent accidental deref moves
  OVRPlugin(OVRPlugin &&) = delete;

  // Ctor Parameters [CppParam { name: "", ty: "OVRPlugin", modifiers: "const&",
  // def_value: None }]
  // @brief delete copy ctor to prevent accidental deref copies
  OVRPlugin(OVRPlugin const &) = delete;

  /// @brief Field AppPerfFrameStatsMaxCount offset 0xffffffff size 0x4
  static constexpr int32_t AppPerfFrameStatsMaxCount{static_cast<int32_t>(0x5)};

  /// @brief Field EventDataBufferSize offset 0xffffffff size 0x4
  static constexpr int32_t EventDataBufferSize{static_cast<int32_t>(0xfa0)};

  /// @brief Field OverlayShapeFlagShift offset 0xffffffff size 0x4
  static constexpr int32_t OverlayShapeFlagShift{static_cast<int32_t>(0x4)};

  /// @brief Field RENDER_MODEL_NULL_KEY offset 0xffffffff size 0x4
  static constexpr int32_t RENDER_MODEL_NULL_KEY{static_cast<int32_t>(0x0)};

  /// @brief Field SpaceFilterInfoComponentsMaxSize offset 0xffffffff size 0x4
  static constexpr int32_t SpaceFilterInfoComponentsMaxSize{
      static_cast<int32_t>(0x10)};

  /// @brief Field SpaceFilterInfoIdsMaxSize offset 0xffffffff size 0x4
  static constexpr int32_t SpaceFilterInfoIdsMaxSize{
      static_cast<int32_t>(0x400)};

  /// @brief Field SpatialEntityMaxQueryResultsPerEvent offset 0xffffffff size
  /// 0x4
  static constexpr int32_t SpatialEntityMaxQueryResultsPerEvent{
      static_cast<int32_t>(0x80)};

  /// @brief IL2CPP Metadata Type Index
  static constexpr uint32_t __IL2CPP_TYPE_DEFINITION_INDEX{8263};

  /// @brief Field isSupportedPlatform offset 0xffffffff size 0x1
  static constexpr bool isSupportedPlatform{true};

  /// @brief Field pluginName offset 0xffffffff size 0x8
  static constexpr ::ConstString pluginName{u"OVRPlugin"};

  static constexpr bool __IL2CPP_IS_VALUE_TYPE = false;
};
// Non member Declarations
static_assert(
    ::cordl_internals::size_check_v<::GlobalNamespace::OVRPlugin, 0x10>,
    "Size mismatch!");

} // namespace GlobalNamespace
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Media_OVRPlugin_InputVideoBufferType,
                       "", "OVRPlugin/Media/InputVideoBufferType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Media_OVRPlugin_MrcActivationMode, "",
                       "OVRPlugin/Media/MrcActivationMode");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Media_OVRPlugin_PlatformCameraMode,
                       "", "OVRPlugin/Media/PlatformCameraMode");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_BatteryStatus, "",
                       "OVRPlugin/BatteryStatus");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_BlendFactor, "",
                       "OVRPlugin/BlendFactor");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_BoneId, "",
                       "OVRPlugin/BoneId");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Bool, "", "OVRPlugin/Bool");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_BoundaryType, "",
                       "OVRPlugin/BoundaryType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_CameraAnchorType, "",
                       "OVRPlugin/CameraAnchorType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_CameraDevice, "",
                       "OVRPlugin/CameraDevice");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_CameraDeviceDepthQuality,
                       "", "OVRPlugin/CameraDeviceDepthQuality");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_CameraDeviceDepthSensingMode, "",
    "OVRPlugin/CameraDeviceDepthSensingMode");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_CameraStatus, "",
                       "OVRPlugin/CameraStatus");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_ColorSpace, "",
                       "OVRPlugin/ColorSpace");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Controller, "",
                       "OVRPlugin/Controller");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_EventType, "",
                       "OVRPlugin/EventType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Eye, "", "OVRPlugin/Eye");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_EyeTextureFormat, "",
                       "OVRPlugin/EyeTextureFormat");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_FaceConstants, "",
                       "OVRPlugin/FaceConstants");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_FaceExpression, "",
                       "OVRPlugin/FaceExpression");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_FaceRegionConfidence, "",
                       "OVRPlugin/FaceRegionConfidence");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_FeatureType, "",
                       "OVRPlugin/FeatureType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_FixedFoveatedRenderingLevel,
                       "", "OVRPlugin/FixedFoveatedRenderingLevel");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_FoveatedRenderingLevel, "",
                       "OVRPlugin/FoveatedRenderingLevel");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Hand, "", "OVRPlugin/Hand");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_HandFinger, "",
                       "OVRPlugin/HandFinger");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_HandFingerPinch, "",
                       "OVRPlugin/HandFingerPinch");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_HandStatus, "",
                       "OVRPlugin/HandStatus");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Handedness, "",
                       "OVRPlugin/Handedness");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_HapticsConstants, "",
                       "OVRPlugin/HapticsConstants");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_HapticsLocation, "",
                       "OVRPlugin/HapticsLocation");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_InsightPassthroughColorMapType, "",
    "OVRPlugin/InsightPassthroughColorMapType");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_InsightPassthroughStyleFlags, "",
    "OVRPlugin/InsightPassthroughStyleFlags");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_InteractionProfile, "",
                       "OVRPlugin/InteractionProfile");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_KeyboardDescriptionConstants, "",
    "OVRPlugin/KeyboardDescriptionConstants");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_LayerFlags, "",
                       "OVRPlugin/LayerFlags");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_LayerLayout, "",
                       "OVRPlugin/LayerLayout");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_LayerSharpenType, "",
                       "OVRPlugin/LayerSharpenType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_LayerSuperSamplingType, "",
                       "OVRPlugin/LayerSuperSamplingType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_LogLevel, "",
                       "OVRPlugin/LogLevel");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_MeshConstants, "",
                       "OVRPlugin/MeshConstants");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_MeshType, "",
                       "OVRPlugin/MeshType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Node, "", "OVRPlugin/Node");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OverlayFlag, "",
                       "OVRPlugin/OverlayFlag");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OverlayShape, "",
                       "OVRPlugin/OverlayShape");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PassthroughCapabilityFields,
                       "", "OVRPlugin/PassthroughCapabilityFields");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PassthroughCapabilityFlags,
                       "", "OVRPlugin/PassthroughCapabilityFlags");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PassthroughColorLutChannels,
                       "", "OVRPlugin/PassthroughColorLutChannels");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PassthroughPreferenceFields,
                       "", "OVRPlugin/PassthroughPreferenceFields");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PassthroughPreferenceFlags,
                       "", "OVRPlugin/PassthroughPreferenceFlags");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PerfMetrics, "",
                       "OVRPlugin/PerfMetrics");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PlatformUI, "",
                       "OVRPlugin/PlatformUI");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_ProcessorPerformanceLevel,
                       "", "OVRPlugin/ProcessorPerformanceLevel");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_RecenterFlags, "",
                       "OVRPlugin/RecenterFlags");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_RenderModelFlags, "",
                       "OVRPlugin/RenderModelFlags");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Result, "",
                       "OVRPlugin/Result");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SkeletonConstants, "",
                       "OVRPlugin/SkeletonConstants");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SkeletonType, "",
                       "OVRPlugin/SkeletonType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceComponentType, "",
                       "OVRPlugin/SpaceComponentType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceLocationFlags, "",
                       "OVRPlugin/SpaceLocationFlags");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceQueryActionType, "",
                       "OVRPlugin/SpaceQueryActionType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceQueryFilterType, "",
                       "OVRPlugin/SpaceQueryFilterType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceQueryType, "",
                       "OVRPlugin/SpaceQueryType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceStorageLocation, "",
                       "OVRPlugin/SpaceStorageLocation");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceStoragePersistenceMode,
                       "", "OVRPlugin/SpaceStoragePersistenceMode");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Step, "", "OVRPlugin/Step");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SystemHeadset, "",
                       "OVRPlugin/SystemHeadset");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SystemRegion, "",
                       "OVRPlugin/SystemRegion");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_TiledMultiResLevel, "",
                       "OVRPlugin/TiledMultiResLevel");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_TrackedKeyboardFlags, "",
                       "OVRPlugin/TrackedKeyboardFlags");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_TrackedKeyboardPresentationStyles, "",
    "OVRPlugin/TrackedKeyboardPresentationStyles");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_TrackedKeyboardQueryFlags,
                       "", "OVRPlugin/TrackedKeyboardQueryFlags");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Tracker, "",
                       "OVRPlugin/Tracker");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_TrackingConfidence, "",
                       "OVRPlugin/TrackingConfidence");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_TrackingOrigin, "",
                       "OVRPlugin/TrackingOrigin");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_VirtualKeyboardInputSource,
                       "", "OVRPlugin/VirtualKeyboardInputSource");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_VirtualKeyboardInputStateFlags, "",
    "OVRPlugin/VirtualKeyboardInputStateFlags");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationType,
                       "", "OVRPlugin/VirtualKeyboardLocationType");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_XrApi, "",
                       "OVRPlugin/XrApi");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::Qpl_OVRPlugin_ResultType, "",
                       "OVRPlugin/Qpl/ResultType");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin *, "", "OVRPlugin");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_GUID);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_GUID *, "",
                       "OVRPlugin/GUID");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_Ktx);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Ktx *, "", "OVRPlugin/Ktx");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_LogCallback2DelegateType);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_LogCallback2DelegateType *,
                       "", "OVRPlugin/LogCallback2DelegateType");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_Media);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Media *, "",
                       "OVRPlugin/Media");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_Mesh);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Mesh *, "",
                       "OVRPlugin/Mesh");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_0_1_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_0_1_0 *, "",
                       "OVRPlugin/OVRP_0_1_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_0_1_1);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_0_1_1 *, "",
                       "OVRPlugin/OVRP_0_1_1");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_0_1_2);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_0_1_2 *, "",
                       "OVRPlugin/OVRP_0_1_2");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_0_1_3);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_0_1_3 *, "",
                       "OVRPlugin/OVRP_0_1_3");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_0_5_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_0_5_0 *, "",
                       "OVRPlugin/OVRP_0_5_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_0_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_0_0 *, "",
                       "OVRPlugin/OVRP_1_0_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_10_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_10_0 *, "",
                       "OVRPlugin/OVRP_1_10_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_11_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_11_0 *, "",
                       "OVRPlugin/OVRP_1_11_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_12_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_12_0 *, "",
                       "OVRPlugin/OVRP_1_12_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_15_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_15_0 *, "",
                       "OVRPlugin/OVRP_1_15_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_16_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_16_0 *, "",
                       "OVRPlugin/OVRP_1_16_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_17_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_17_0 *, "",
                       "OVRPlugin/OVRP_1_17_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_18_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_18_0 *, "",
                       "OVRPlugin/OVRP_1_18_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_19_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_19_0 *, "",
                       "OVRPlugin/OVRP_1_19_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_1_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_1_0 *, "",
                       "OVRPlugin/OVRP_1_1_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_21_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_21_0 *, "",
                       "OVRPlugin/OVRP_1_21_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_28_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_28_0 *, "",
                       "OVRPlugin/OVRP_1_28_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_29_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_29_0 *, "",
                       "OVRPlugin/OVRP_1_29_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_2_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_2_0 *, "",
                       "OVRPlugin/OVRP_1_2_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_30_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_30_0 *, "",
                       "OVRPlugin/OVRP_1_30_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_31_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_31_0 *, "",
                       "OVRPlugin/OVRP_1_31_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_32_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_32_0 *, "",
                       "OVRPlugin/OVRP_1_32_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_34_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_34_0 *, "",
                       "OVRPlugin/OVRP_1_34_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_35_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_35_0 *, "",
                       "OVRPlugin/OVRP_1_35_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_36_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_36_0 *, "",
                       "OVRPlugin/OVRP_1_36_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_37_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_37_0 *, "",
                       "OVRPlugin/OVRP_1_37_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_38_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_38_0 *, "",
                       "OVRPlugin/OVRP_1_38_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_39_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_39_0 *, "",
                       "OVRPlugin/OVRP_1_39_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_3_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_3_0 *, "",
                       "OVRPlugin/OVRP_1_3_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_40_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_40_0 *, "",
                       "OVRPlugin/OVRP_1_40_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_41_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_41_0 *, "",
                       "OVRPlugin/OVRP_1_41_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_42_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_42_0 *, "",
                       "OVRPlugin/OVRP_1_42_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_43_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_43_0 *, "",
                       "OVRPlugin/OVRP_1_43_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_44_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_44_0 *, "",
                       "OVRPlugin/OVRP_1_44_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_45_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_45_0 *, "",
                       "OVRPlugin/OVRP_1_45_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_46_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_46_0 *, "",
                       "OVRPlugin/OVRP_1_46_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_47_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_47_0 *, "",
                       "OVRPlugin/OVRP_1_47_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_48_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_48_0 *, "",
                       "OVRPlugin/OVRP_1_48_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_49_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_49_0 *, "",
                       "OVRPlugin/OVRP_1_49_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_50_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_50_0 *, "",
                       "OVRPlugin/OVRP_1_50_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_51_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_51_0 *, "",
                       "OVRPlugin/OVRP_1_51_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_52_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_52_0 *, "",
                       "OVRPlugin/OVRP_1_52_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_53_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_53_0 *, "",
                       "OVRPlugin/OVRP_1_53_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_54_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_54_0 *, "",
                       "OVRPlugin/OVRP_1_54_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_55_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_55_0 *, "",
                       "OVRPlugin/OVRP_1_55_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_55_1);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_55_1 *, "",
                       "OVRPlugin/OVRP_1_55_1");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_56_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_56_0 *, "",
                       "OVRPlugin/OVRP_1_56_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_57_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_57_0 *, "",
                       "OVRPlugin/OVRP_1_57_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_58_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_58_0 *, "",
                       "OVRPlugin/OVRP_1_58_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_59_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_59_0 *, "",
                       "OVRPlugin/OVRP_1_59_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_5_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_5_0 *, "",
                       "OVRPlugin/OVRP_1_5_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_60_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_60_0 *, "",
                       "OVRPlugin/OVRP_1_60_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_61_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_61_0 *, "",
                       "OVRPlugin/OVRP_1_61_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_62_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_62_0 *, "",
                       "OVRPlugin/OVRP_1_62_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_63_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_63_0 *, "",
                       "OVRPlugin/OVRP_1_63_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_64_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_64_0 *, "",
                       "OVRPlugin/OVRP_1_64_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_65_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_65_0 *, "",
                       "OVRPlugin/OVRP_1_65_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_66_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_66_0 *, "",
                       "OVRPlugin/OVRP_1_66_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_67_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_67_0 *, "",
                       "OVRPlugin/OVRP_1_67_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_68_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_68_0 *, "",
                       "OVRPlugin/OVRP_1_68_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_69_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_69_0 *, "",
                       "OVRPlugin/OVRP_1_69_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_6_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_6_0 *, "",
                       "OVRPlugin/OVRP_1_6_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_70_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_70_0 *, "",
                       "OVRPlugin/OVRP_1_70_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_71_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_71_0 *, "",
                       "OVRPlugin/OVRP_1_71_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_72_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_72_0 *, "",
                       "OVRPlugin/OVRP_1_72_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_73_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_73_0 *, "",
                       "OVRPlugin/OVRP_1_73_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_74_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_74_0 *, "",
                       "OVRPlugin/OVRP_1_74_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_75_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_75_0 *, "",
                       "OVRPlugin/OVRP_1_75_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_76_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_76_0 *, "",
                       "OVRPlugin/OVRP_1_76_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_78_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_78_0 *, "",
                       "OVRPlugin/OVRP_1_78_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_79_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_79_0 *, "",
                       "OVRPlugin/OVRP_1_79_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_7_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_7_0 *, "",
                       "OVRPlugin/OVRP_1_7_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_81_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_81_0 *, "",
                       "OVRPlugin/OVRP_1_81_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_82_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_82_0 *, "",
                       "OVRPlugin/OVRP_1_82_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_83_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_83_0 *, "",
                       "OVRPlugin/OVRP_1_83_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_84_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_84_0 *, "",
                       "OVRPlugin/OVRP_1_84_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_85_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_85_0 *, "",
                       "OVRPlugin/OVRP_1_85_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_86_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_86_0 *, "",
                       "OVRPlugin/OVRP_1_86_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_87_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_87_0 *, "",
                       "OVRPlugin/OVRP_1_87_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_88_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_88_0 *, "",
                       "OVRPlugin/OVRP_1_88_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_8_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_8_0 *, "",
                       "OVRPlugin/OVRP_1_8_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_OVRP_1_9_0);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_OVRP_1_9_0 *, "",
                       "OVRPlugin/OVRP_1_9_0");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_Qpl);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Qpl *, "", "OVRPlugin/Qpl");
NEED_NO_BOX(::GlobalNamespace::OVRPlugin_UnityOpenXR);
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_UnityOpenXR *, "",
                       "OVRPlugin/UnityOpenXR");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_AppPerfFrameStats, "",
                       "OVRPlugin/AppPerfFrameStats");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_AppPerfStats, "",
                       "OVRPlugin/AppPerfStats");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_BodyJointLocation, "",
                       "OVRPlugin/BodyJointLocation");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_BodyState, "",
                       "OVRPlugin/BodyState");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_BodyStateInternal, "",
                       "OVRPlugin/BodyStateInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Bone, "", "OVRPlugin/Bone");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_BoneCapsule, "",
                       "OVRPlugin/BoneCapsule");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_BoundaryGeometry, "",
                       "OVRPlugin/BoundaryGeometry");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_BoundaryTestResult, "",
                       "OVRPlugin/BoundaryTestResult");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Boundsf, "",
                       "OVRPlugin/Boundsf");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_CameraDeviceIntrinsicsParameters, "",
    "OVRPlugin/CameraDeviceIntrinsicsParameters");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_CameraExtrinsics, "",
                       "OVRPlugin/CameraExtrinsics");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_CameraIntrinsics, "",
                       "OVRPlugin/CameraIntrinsics");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Colorf, "",
                       "OVRPlugin/Colorf");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_ControllerState, "",
                       "OVRPlugin/ControllerState");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_ControllerState2, "",
                       "OVRPlugin/ControllerState2");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_ControllerState4, "",
                       "OVRPlugin/ControllerState4");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_ControllerState5, "",
                       "OVRPlugin/ControllerState5");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_ControllerState6, "",
                       "OVRPlugin/ControllerState6");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_EventDataBuffer, "",
                       "OVRPlugin/EventDataBuffer");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_EyeGazeState, "",
                       "OVRPlugin/EyeGazeState");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_EyeGazesState, "",
                       "OVRPlugin/EyeGazesState");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_EyeGazesStateInternal, "",
                       "OVRPlugin/EyeGazesStateInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_FaceExpressionStatus, "",
                       "OVRPlugin/FaceExpressionStatus");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_FaceExpressionStatusInternal, "",
    "OVRPlugin/FaceExpressionStatusInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_FaceState, "",
                       "OVRPlugin/FaceState");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_FaceState2Internal, "",
                       "OVRPlugin/FaceState2Internal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_FaceStateInternal, "",
                       "OVRPlugin/FaceStateInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Fovf, "", "OVRPlugin/Fovf");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Frustumf, "",
                       "OVRPlugin/Frustumf");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Frustumf2, "",
                       "OVRPlugin/Frustumf2");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_HandState, "",
                       "OVRPlugin/HandState");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_HandStateInternal, "",
                       "OVRPlugin/HandStateInternal");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_HapticsAmplitudeEnvelopeVibration, "",
    "OVRPlugin/HapticsAmplitudeEnvelopeVibration");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_HapticsBuffer, "",
                       "OVRPlugin/HapticsBuffer");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_HapticsDesc, "",
                       "OVRPlugin/HapticsDesc");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_HapticsPcmVibration, "",
                       "OVRPlugin/HapticsPcmVibration");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_HapticsState, "",
                       "OVRPlugin/HapticsState");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_InsightPassthroughKeyboardHandsIntensity, "",
    "OVRPlugin/InsightPassthroughKeyboardHandsIntensity");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle, "",
                       "OVRPlugin/InsightPassthroughStyle");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_InsightPassthroughStyle2,
                       "", "OVRPlugin/InsightPassthroughStyle2");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_KeyboardDescription, "",
                       "OVRPlugin/KeyboardDescription");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_KeyboardState, "",
                       "OVRPlugin/KeyboardState");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_LayerDesc, "",
                       "OVRPlugin/LayerDesc");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_LayerDescInternal, "",
                       "OVRPlugin/LayerDescInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_LayerSubmit, "",
                       "OVRPlugin/LayerSubmit");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PassthroughCapabilities, "",
                       "OVRPlugin/PassthroughCapabilities");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PassthroughColorLutData, "",
                       "OVRPlugin/PassthroughColorLutData");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PassthroughPreferences, "",
                       "OVRPlugin/PassthroughPreferences");
DEFINE_IL2CPP_ARG_TYPE_GENERIC_STRUCT(
    ::GlobalNamespace::OVRPlugin_PinnedArray_1, "", "OVRPlugin/PinnedArray`1");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PolygonalBoundary2DInternal,
                       "", "OVRPlugin/PolygonalBoundary2DInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_PoseStatef, "",
                       "OVRPlugin/PoseStatef");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Posef, "",
                       "OVRPlugin/Posef");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Quatf, "",
                       "OVRPlugin/Quatf");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Rectf, "",
                       "OVRPlugin/Rectf");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Recti, "",
                       "OVRPlugin/Recti");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_RenderModelProperties, "",
                       "OVRPlugin/RenderModelProperties");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_RenderModelPropertiesInternal, "",
    "OVRPlugin/RenderModelPropertiesInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_RoomLayout, "",
                       "OVRPlugin/RoomLayout");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_RoomLayoutInternal, "",
                       "OVRPlugin/RoomLayoutInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SceneCaptureRequestInternal,
                       "", "OVRPlugin/SceneCaptureRequestInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Size3f, "",
                       "OVRPlugin/Size3f");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Sizef, "",
                       "OVRPlugin/Sizef");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Sizei, "",
                       "OVRPlugin/Sizei");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Skeleton, "",
                       "OVRPlugin/Skeleton");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Skeleton2, "",
                       "OVRPlugin/Skeleton2");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Skeleton2Internal, "",
                       "OVRPlugin/Skeleton2Internal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceContainerInternal, "",
                       "OVRPlugin/SpaceContainerInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceFilterInfoComponents,
                       "", "OVRPlugin/SpaceFilterInfoComponents");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceFilterInfoIds, "",
                       "OVRPlugin/SpaceFilterInfoIds");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceLocationf, "",
                       "OVRPlugin/SpaceLocationf");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceQueryInfo, "",
                       "OVRPlugin/SpaceQueryInfo");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceQueryResult, "",
                       "OVRPlugin/SpaceQueryResult");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpaceSemanticLabelInternal,
                       "", "OVRPlugin/SpaceSemanticLabelInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_SpatialAnchorCreateInfo, "",
                       "OVRPlugin/SpatialAnchorCreateInfo");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_TextureRectMatrixf, "",
                       "OVRPlugin/TextureRectMatrixf");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_TriangleMeshInternal, "",
                       "OVRPlugin/TriangleMeshInternal");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Vector2f, "",
                       "OVRPlugin/Vector2f");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Vector2i, "",
                       "OVRPlugin/Vector2i");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Vector3f, "",
                       "OVRPlugin/Vector3f");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Vector4f, "",
                       "OVRPlugin/Vector4f");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_Vector4s, "",
                       "OVRPlugin/Vector4s");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_VirtualKeyboardCreateInfo,
                       "", "OVRPlugin/VirtualKeyboardCreateInfo");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_VirtualKeyboardInputInfo,
                       "", "OVRPlugin/VirtualKeyboardInputInfo");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_VirtualKeyboardLocationInfo,
                       "", "OVRPlugin/VirtualKeyboardLocationInfo");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationState, "",
    "OVRPlugin/VirtualKeyboardModelAnimationState");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationStates, "",
    "OVRPlugin/VirtualKeyboardModelAnimationStates");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelAnimationStatesInternal,
    "", "OVRPlugin/VirtualKeyboardModelAnimationStatesInternal");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_VirtualKeyboardModelVisibility, "",
    "OVRPlugin/VirtualKeyboardModelVisibility");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_VirtualKeyboardSpaceCreateInfo, "",
    "OVRPlugin/VirtualKeyboardSpaceCreateInfo");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureData,
                       "", "OVRPlugin/VirtualKeyboardTextureData");
DEFINE_IL2CPP_ARG_TYPE(::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIds,
                       "", "OVRPlugin/VirtualKeyboardTextureIds");
DEFINE_IL2CPP_ARG_TYPE(
    ::GlobalNamespace::OVRPlugin_VirtualKeyboardTextureIdsInternal, "",
    "OVRPlugin/VirtualKeyboardTextureIdsInternal");
