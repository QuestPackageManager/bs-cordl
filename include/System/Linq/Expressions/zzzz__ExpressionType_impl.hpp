#pragma once
#include "System/Linq/Expressions/zzzz__ExpressionType_def.hpp"
// Ctor Parameters [CppParam { name: "value__", ty: "int32_t", modifiers: "", def_value: Some("{}") }]
constexpr ::System::Linq::Expressions::ExpressionType::ExpressionType(int32_t value__) noexcept {
  this->value__ = value__;
}
// Ctor Parameters []
constexpr ::System::Linq::Expressions::ExpressionType::ExpressionType() {}
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Add{ static_cast<int32_t>(0x0) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::AddChecked{ static_cast<int32_t>(0x1) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::And{ static_cast<int32_t>(0x2) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::AndAlso{ static_cast<int32_t>(0x3) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::ArrayLength{ static_cast<int32_t>(0x4) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::ArrayIndex{ static_cast<int32_t>(0x5) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Call{ static_cast<int32_t>(0x6) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Coalesce{ static_cast<int32_t>(0x7) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Conditional{ static_cast<int32_t>(0x8) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Constant{ static_cast<int32_t>(0x9) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Convert{ static_cast<int32_t>(0xa) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::ConvertChecked{ static_cast<int32_t>(0xb) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Divide{ static_cast<int32_t>(0xc) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Equal{ static_cast<int32_t>(0xd) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::ExclusiveOr{ static_cast<int32_t>(0xe) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::GreaterThan{ static_cast<int32_t>(0xf) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::GreaterThanOrEqual{ static_cast<int32_t>(0x10) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Invoke{ static_cast<int32_t>(0x11) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Lambda{ static_cast<int32_t>(0x12) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::LeftShift{ static_cast<int32_t>(0x13) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::LessThan{ static_cast<int32_t>(0x14) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::LessThanOrEqual{ static_cast<int32_t>(0x15) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::ListInit{ static_cast<int32_t>(0x16) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::MemberAccess{ static_cast<int32_t>(0x17) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::MemberInit{ static_cast<int32_t>(0x18) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Modulo{ static_cast<int32_t>(0x19) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Multiply{ static_cast<int32_t>(0x1a) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::MultiplyChecked{ static_cast<int32_t>(0x1b) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Negate{ static_cast<int32_t>(0x1c) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::UnaryPlus{ static_cast<int32_t>(0x1d) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::NegateChecked{ static_cast<int32_t>(0x1e) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::New{ static_cast<int32_t>(0x1f) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::NewArrayInit{ static_cast<int32_t>(0x20) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::NewArrayBounds{ static_cast<int32_t>(0x21) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Not{ static_cast<int32_t>(0x22) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::NotEqual{ static_cast<int32_t>(0x23) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Or{ static_cast<int32_t>(0x24) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::OrElse{ static_cast<int32_t>(0x25) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Parameter{ static_cast<int32_t>(0x26) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Power{ static_cast<int32_t>(0x27) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Quote{ static_cast<int32_t>(0x28) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::RightShift{ static_cast<int32_t>(0x29) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Subtract{ static_cast<int32_t>(0x2a) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::SubtractChecked{ static_cast<int32_t>(0x2b) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::TypeAs{ static_cast<int32_t>(0x2c) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::TypeIs{ static_cast<int32_t>(0x2d) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Assign{ static_cast<int32_t>(0x2e) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Block{ static_cast<int32_t>(0x2f) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::DebugInfo{ static_cast<int32_t>(0x30) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Decrement{ static_cast<int32_t>(0x31) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Dynamic{ static_cast<int32_t>(0x32) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Default{ static_cast<int32_t>(0x33) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Extension{ static_cast<int32_t>(0x34) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Goto{ static_cast<int32_t>(0x35) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Increment{ static_cast<int32_t>(0x36) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Index{ static_cast<int32_t>(0x37) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Label{ static_cast<int32_t>(0x38) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::RuntimeVariables{ static_cast<int32_t>(0x39) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Loop{ static_cast<int32_t>(0x3a) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Switch{ static_cast<int32_t>(0x3b) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Throw{ static_cast<int32_t>(0x3c) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Try{ static_cast<int32_t>(0x3d) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::Unbox{ static_cast<int32_t>(0x3e) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::AddAssign{ static_cast<int32_t>(0x3f) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::AndAssign{ static_cast<int32_t>(0x40) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::DivideAssign{ static_cast<int32_t>(0x41) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::ExclusiveOrAssign{ static_cast<int32_t>(0x42) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::LeftShiftAssign{ static_cast<int32_t>(0x43) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::ModuloAssign{ static_cast<int32_t>(0x44) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::MultiplyAssign{ static_cast<int32_t>(0x45) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::OrAssign{ static_cast<int32_t>(0x46) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::PowerAssign{ static_cast<int32_t>(0x47) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::RightShiftAssign{ static_cast<int32_t>(0x48) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::SubtractAssign{ static_cast<int32_t>(0x49) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::AddAssignChecked{ static_cast<int32_t>(0x4a) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::MultiplyAssignChecked{ static_cast<int32_t>(0x4b) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::SubtractAssignChecked{ static_cast<int32_t>(0x4c) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::PreIncrementAssign{ static_cast<int32_t>(0x4d) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::PreDecrementAssign{ static_cast<int32_t>(0x4e) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::PostIncrementAssign{ static_cast<int32_t>(0x4f) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::PostDecrementAssign{ static_cast<int32_t>(0x50) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::TypeEqual{ static_cast<int32_t>(0x51) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::OnesComplement{ static_cast<int32_t>(0x52) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::IsTrue{ static_cast<int32_t>(0x53) };
constexpr ::System::Linq::Expressions::ExpressionType System::Linq::Expressions::ExpressionType::IsFalse{ static_cast<int32_t>(0x54) };
